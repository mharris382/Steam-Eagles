<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DestMath</name>
    </assembly>
    <members>
        <member name="T:Dest.Math.Polynomial">
            <summary>
            Represents n-degree polynomial of one variable
            </summary>
        </member>
        <member name="M:Dest.Math.Polynomial.#ctor(System.Int32)">
            <summary>
            Creates polynomial of specified degree. Use indexer to set coefficients.
            Coefficients order is from smallest order to highest order, e.g for quadratic equation it's:
            c0 + c1*x + c2*x^2, coefficients array will be [c0,c1,c2].
            </summary>
            <param name="degree">Must be >= 0!</param>
        </member>
        <member name="M:Dest.Math.Polynomial.DeepCopy">
            <summary>
            Copies the polynomial
            </summary>
        </member>
        <member name="M:Dest.Math.Polynomial.CalcDerivative">
            <summary>
            Returns derivative of the current polynomial. Formula is:
            p (x) = c0 + c1*x + c2*x^2 + ... + cn*x^n
            p'(x) = c1 + 2*c2*x + 3*c3*x^2 + ... + n*cn*x^(n-1)
            </summary>
        </member>
        <member name="M:Dest.Math.Polynomial.CalcInversion">
            <summary>
            Computes inversion of the current polynomial ( invpoly[i] = poly[degree-i] for 0 &lt;= i &lt;= degree ).
            </summary>
        </member>
        <member name="M:Dest.Math.Polynomial.Compress(System.Single)">
            <summary>
            Reduce the degree by eliminating all (nearly) zero leading coefficients
            and by making the leading coefficient one.  The input parameter is
            the threshold for specifying that a coefficient is effectively zero.
            </summary>
        </member>
        <member name="M:Dest.Math.Polynomial.Eval(System.Single)">
            <summary>
            Evaluates the polynomial
            </summary>
        </member>
        <member name="P:Dest.Math.Polynomial.Degree">
            <summary>
            Gets or sets polynomial degree (0 - constant, 1 - linear, 2 - quadratic, etc).
            When set, recreates coefficient array thus all coefficients become 0.
            </summary>
        </member>
        <member name="P:Dest.Math.Polynomial.Item(System.Int32)">
            <summary>
            Gets or sets polynomial coefficient.
            </summary>
            <param name="index">Valid index is 0&lt;=index&lt;=Degree</param>
        </member>
        <member name="M:Dest.Math.Approximation.GaussPointsFit2(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Fits points with a Gaussian distribution. Produces box as the result.
            Box center is average of a point set. Box axes are eigenvectors of the
            covariance matrix, box extents are eigenvalues.
            A set must contain at least one point!
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.HeightLineFit2(System.Collections.Generic.IList{UnityEngine.Vector2},System.Single@,System.Single@)">
            <summary>
            Fitting to a line using least-squares method and using distance
            measurements in the y-direction. The result is a line represented by
            y = A*x + B. If a line cannot be constructed method returns false and
            A and B are returned as float.MaxValue.
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.LeastSquaresLineFit2(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Producing a line using least-squares fitting. A set must contain at least one point!
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.GaussPointsFit3(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Fits points with a Gaussian distribution. Produces box as the result.
            Box center is average of a point set. Box axes are eigenvectors of the
            covariance matrix, box extents are eigenvalues.
            A set must contain at least one point!
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.LeastsSquaresLineFit3(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Producing a line using least-squares fitting. A set must contain at least one point!
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.HeightPlaneFit3(System.Collections.Generic.IList{UnityEngine.Vector3},System.Single@,System.Single@,System.Single@)">
            <summary>
            Least-squares fit of a plane to (x,y,f(x,y)) data by using distance
            measurements in the z-direction.  The resulting plane is represented by
            z = A*x + B*y + C.  The return value is 'false' if the 3x3 coefficient
            matrix in the linear system that defines A, B, and C is (nearly) singular.
            In this case, A, B, and C are returned as float.MaxValue.
            </summary>
        </member>
        <member name="M:Dest.Math.Approximation.LeastSquaresPlaneFit3(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Producing a plane using least-squares fitting. A set must contain at least one point!
            </summary>
        </member>
        <member name="M:Dest.Math.ConvexHull.Create2D(System.Collections.Generic.IList{UnityEngine.Vector2},System.Int32[]@,System.Int32@,System.Single)">
            <summary>
            Generates 2D convex hull of the input point set. Resulting convex hull is defined by the indices parameter. Its behavior depends on the dimension parameter.
            If dimension is 2, then convex hull is 2D polygon and indices should be accessed as Edge=(points[indices[i]], points[indices[(i+1)%indices.Length]), for i=[0,indices.Length-1].
            If dimension is 1, then input point set lie on the line and covex hull is a segment, use (points[indices[0]], points[indices[1]) to access the segment.
            If dimension is 0, then all points in the input set are practically the same.
            </summary>
            <param name="points">Input point set whose convex hull should be calculated.</param>
            <param name="indices">Contains indices into point set (null if construction has failed).</param>
            <param name="dimension">Resulting dimension of the input set: 2, 1 or 0.</param>
            <param name="epsilon">Small positive number used to determine dimension of the input set.</param>
            <returns>True if convex hull is created, false otherwise (in case if input point set is null, contains no points or if some error has occured during construction)</returns>
        </member>
        <member name="M:Dest.Math.ConvexHull.Create3D(System.Collections.Generic.IList{UnityEngine.Vector3},System.Int32[]@,System.Int32@,System.Single)">
            <summary>
            Generates 3D convex hull of the input point set. Resulting convex hull is defined fo the indices parameter. Its behavior depends on the dimension parameter.
            If dimension is 3, then convex hull is 3D polyhedron and indices define triangles, Triangle=(points[indices[i]], points[indices[i+1]], points[indices[i+2]]), for i=[0,indices.Length-1], i+=3.
            If dimension is 2, then convex hull is 2D polygon and indices should be accessed as Edge=(points[indices[i]], points[indices[(i+1)%indices.Length]), for i=[0,indices.Length-1].
            If dimension is 1, then input point set lie on the line and covex hull is a segment, use (points[indices[0]], points[indices[1]) to access the segment.
            If dimension is 0, then all points in the input set are practically the same.
            </summary>
            <param name="points">Input point set whose convex hull should be calculated.</param>
            <param name="indices">Contains indices into point set (null if construction has failed).</param>
            <param name="dimension">Resulting dimension of the input set: 3, 2, 1 or 0.</param>
            <param name="epsilon">Small positive number used to determine dimension of the input set.</param>
            <returns>True if convex hull is created, false otherwise (in case if input point set is null, contains no points or if some error has occured during construction)</returns>
        </member>
        <member name="M:Dest.Math.Distance.Line2Line2(Dest.Math.Line2@,Dest.Math.Line2@)">
            <summary>
            Returns distance between two lines.
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line2Line2(Dest.Math.Line2@,Dest.Math.Line2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between two lines.
            </summary>
            <param name="closestPoint0">Point on line0 closest to line1</param>
            <param name="closestPoint1">Point on line1 closest to line0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Line2(Dest.Math.Line2@,Dest.Math.Line2@)">
            <summary>
            Returns squared distance between two lines.
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Line2(Dest.Math.Line2@,Dest.Math.Line2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between two lines.
            </summary>
            <param name="closestPoint0">Point on line0 closest to line1</param>
            <param name="closestPoint1">Point on line1 closest to line0</param>
        </member>
        <member name="M:Dest.Math.Distance.Line2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@)">
            <summary>
            Returns distance between a line and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a line and a ray
            </summary>
            <param name="closestPoint0">Point on line closest to ray</param>
            <param name="closestPoint1">Point on ray closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@)">
            <summary>
            Returns squared distance between a line and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a line and a ray
            </summary>
            <param name="closestPoint0">Point on line closest to ray</param>
            <param name="closestPoint1">Point on ray closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.Line2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@)">
            <summary>
            Returns distance between a line and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a line and a segment
            </summary>
            <param name="closestPoint0">Point on line closest to segment</param>
            <param name="closestPoint1">Point on segment closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@)">
            <summary>
            Returns squared distance between a line and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a line and a segment
            </summary>
            <param name="closestPoint0">Point on line closest to segment</param>
            <param name="closestPoint1">Point on segment closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2AAB2(UnityEngine.Vector2@,Dest.Math.AAB2@)">
            <summary>
            Returns distance between a point and an abb
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2AAB2(UnityEngine.Vector2@,Dest.Math.AAB2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and an abb
            </summary>
            <param name="closestPoint">Point projected on an aab</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2AAB2(UnityEngine.Vector2@,Dest.Math.AAB2@)">
            <summary>
            Returns squared distance between a point and an abb
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2AAB2(UnityEngine.Vector2@,Dest.Math.AAB2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and an abb
            </summary>
            <param name="closestPoint">Point projected on an aab</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Box2(UnityEngine.Vector2@,Dest.Math.Box2@)">
            <summary>
            Returns distance between a point and a box
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Box2(UnityEngine.Vector2@,Dest.Math.Box2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a box
            </summary>
            <param name="closestPoint">Point projected on a box</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Box2(UnityEngine.Vector2@,Dest.Math.Box2@)">
            <summary>
            Returns squared distance between a point and a box
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Box2(UnityEngine.Vector2@,Dest.Math.Box2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a box
            </summary>
            <param name="closestPoint">Point projected on a box</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Circle2(UnityEngine.Vector2@,Dest.Math.Circle2@)">
            <summary>
            Returns distance between a point and a circle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Circle2(UnityEngine.Vector2@,Dest.Math.Circle2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a circle
            </summary>
            <param name="closestPoint">Point projected on a circle</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Circle2(UnityEngine.Vector2@,Dest.Math.Circle2@)">
            <summary>
            Returns squared distance between a point and a circle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Circle2(UnityEngine.Vector2@,Dest.Math.Circle2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a circle
            </summary>
            <param name="closestPoint">Point projected on a circle</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Line2(UnityEngine.Vector2@,Dest.Math.Line2@)">
            <summary>
            Returns distance between a point and a line
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Line2(UnityEngine.Vector2@,Dest.Math.Line2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a line
            </summary>
            <param name="closestPoint">Point projected on a line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Line2(UnityEngine.Vector2@,Dest.Math.Line2@)">
            <summary>
            Returns squared distance between a point and a line
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Line2(UnityEngine.Vector2@,Dest.Math.Line2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a line
            </summary>
            <param name="closestPoint">Point projected on a line</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Ray2(UnityEngine.Vector2@,Dest.Math.Ray2@)">
            <summary>
            Returns distance between a point and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Ray2(UnityEngine.Vector2@,Dest.Math.Ray2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a ray
            </summary>
            <param name="closestPoint">Point projected on a ray and clamped by ray origin</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Ray2(UnityEngine.Vector2@,Dest.Math.Ray2@)">
            <summary>
            Returns squared distance between a point and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Ray2(UnityEngine.Vector2@,Dest.Math.Ray2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a ray
            </summary>
            <param name="closestPoint">Point projected on a ray and clamped by ray origin</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Segment2(UnityEngine.Vector2@,Dest.Math.Segment2@)">
            <summary>
            Returns distance between a point and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Segment2(UnityEngine.Vector2@,Dest.Math.Segment2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a segment
            </summary>
            <param name="closestPoint">Point projected on a segment and clamped by segment endpoints</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Segment2(UnityEngine.Vector2@,Dest.Math.Segment2@)">
            <summary>
            Returns squared distance between a point and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Segment2(UnityEngine.Vector2@,Dest.Math.Segment2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a segment
            </summary>
            <param name="closestPoint">Point projected on a segment and clamped by segment endpoints</param>
        </member>
        <member name="M:Dest.Math.Distance.Point2Triangle2(UnityEngine.Vector2@,Dest.Math.Triangle2@)">
            <summary>
            Returns distance between a point and a triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point2Triangle2(UnityEngine.Vector2@,Dest.Math.Triangle2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a point and a triangle
            </summary>
            <param name="closestPoint">Point projected on a triangle</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Triangle2(UnityEngine.Vector2@,Dest.Math.Triangle2@)">
            <summary>
            Returns squared distance between a point and a triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint2Triangle2(UnityEngine.Vector2@,Dest.Math.Triangle2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a point and a triangle
            </summary>
            <param name="closestPoint">Point projected on a triangle</param>
        </member>
        <member name="M:Dest.Math.Distance.Ray2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@)">
            <summary>
            Returns distance between two rays
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Ray2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between two rays
            </summary>
            <param name="closestPoint0">Point on ray0 closest to ray1</param>
            <param name="closestPoint1">Point on ray1 closest to ray0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@)">
            <summary>
            Returns squared distance between two rays
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between two rays
            </summary>
            <param name="closestPoint0">Point on ray0 closest to ray1</param>
            <param name="closestPoint1">Point on ray1 closest to ray0</param>
        </member>
        <member name="M:Dest.Math.Distance.Ray2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@)">
            <summary>
            Returns distance between a ray and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Ray2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between a ray and a segment
            </summary>
            <param name="closestPoint0">Point on ray closest to segment</param>
            <param name="closestPoint1">Point on segment closest to ray</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@)">
            <summary>
            Returns squared distance between a ray and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between a ray and a segment
            </summary>
            <param name="closestPoint0">Point on ray closest to segment</param>
            <param name="closestPoint1">Point on segment closest to ray</param>
        </member>
        <member name="M:Dest.Math.Distance.Segment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@)">
            <summary>
            Returns distance between two segments
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Segment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns distance between two segments
            </summary>
            <param name="closestPoint0">Point on segment0 closest to segment1</param>
            <param name="closestPoint1">Point on segment1 closest to segment0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrSegment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@)">
            <summary>
            Returns squared distance between two segments
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrSegment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns squared distance between two segments
            </summary>
            <param name="closestPoint0">Point on segment0 closest to segment1</param>
            <param name="closestPoint1">Point on segment1 closest to segment0</param>
        </member>
        <member name="M:Dest.Math.Distance.Line3Line3(Dest.Math.Line3@,Dest.Math.Line3@)">
            <summary>
            Returns distance between two lines.
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line3Line3(Dest.Math.Line3@,Dest.Math.Line3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between two lines.
            </summary>
            <param name="closestPoint0">Point on line0 closest to line1</param>
            <param name="closestPoint1">Point on line1 closest to line0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Line3(Dest.Math.Line3@,Dest.Math.Line3@)">
            <summary>
            Returns squared distance between two lines.
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Line3(Dest.Math.Line3@,Dest.Math.Line3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between two lines.
            </summary>
            <param name="closestPoint0">Point on line0 closest to line1</param>
            <param name="closestPoint1">Point on line1 closest to line0</param>
        </member>
        <member name="M:Dest.Math.Distance.Line3Ray3(Dest.Math.Line3@,Dest.Math.Ray3@)">
            <summary>
            Returns distance between a line and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line3Ray3(Dest.Math.Line3@,Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a line and a ray
            </summary>
            <param name="closestPoint0">Point on line closest to ray</param>
            <param name="closestPoint1">Point on ray closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Ray3(Dest.Math.Line3@,Dest.Math.Ray3@)">
            <summary>
            Returns squared distance between a line and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Ray3(Dest.Math.Line3@,Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a line and a ray
            </summary>
            <param name="closestPoint0">Point on line closest to ray</param>
            <param name="closestPoint1">Point on ray closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.Line3Segment3(Dest.Math.Line3@,Dest.Math.Segment3@)">
            <summary>
            Returns distance between a line and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Line3Segment3(Dest.Math.Line3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a line and a segment
            </summary>
            <param name="closestPoint0">Point on line closest to segment</param>
            <param name="closestPoint1">Point on segment closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Segment3(Dest.Math.Line3@,Dest.Math.Segment3@)">
            <summary>
            Returns squared distance between a line and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrLine3Segment3(Dest.Math.Line3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a line and a segment
            </summary>
            <param name="closestPoint0">Point on line closest to segment</param>
            <param name="closestPoint1">Point on segment closest to line</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3AAB3(UnityEngine.Vector3@,Dest.Math.AAB3@)">
            <summary>
            Returns distance between a point and an abb
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3AAB3(UnityEngine.Vector3@,Dest.Math.AAB3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and an abb
            </summary>
            <param name="closestPoint">Point projected on an aab</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3AAB3(UnityEngine.Vector3@,Dest.Math.AAB3@)">
            <summary>
            Returns squared distance between a point and an abb
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3AAB3(UnityEngine.Vector3@,Dest.Math.AAB3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and an abb
            </summary>
            <param name="closestPoint">Point projected on an aab</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Box3(UnityEngine.Vector3@,Dest.Math.Box3@)">
            <summary>
            Returns distance between a point and a box
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Box3(UnityEngine.Vector3@,Dest.Math.Box3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a box
            </summary>
            <param name="closestPoint">Point projected on a box</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Box3(UnityEngine.Vector3@,Dest.Math.Box3@)">
            <summary>
            Returns squared distance between a point and a box
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Box3(UnityEngine.Vector3@,Dest.Math.Box3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a box
            </summary>
            <param name="closestPoint">Point projected on a box</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Circle3(UnityEngine.Vector3@,Dest.Math.Circle3@,System.Boolean)">
            <summary>
            Returns distance between a point and a circle
            </summary>
            <param name="solid">When true circle considered to be solid disk otherwise hollow circle.</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Circle3(UnityEngine.Vector3@,Dest.Math.Circle3@,UnityEngine.Vector3@,System.Boolean)">
            <summary>
            Returns distance between a point and a circle
            </summary>
            <param name="closestPoint">Point projected on a circle</param>
            <param name="solid">When true circle considered to be solid disk otherwise hollow circle.</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Circle3(UnityEngine.Vector3@,Dest.Math.Circle3@,System.Boolean)">
            <summary>
            Returns squared distance between a point and a circle
            </summary>
            <param name="solid">When true circle considered to be solid disk otherwise hollow circle.</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Circle3(UnityEngine.Vector3@,Dest.Math.Circle3@,UnityEngine.Vector3@,System.Boolean)">
            <summary>
            Returns squared distance between a point and a circle
            </summary>
            <param name="closestPoint">Point projected on a circle</param>
            <param name="solid">When true circle considered to be solid disk otherwise hollow circle.</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Line3(UnityEngine.Vector3@,Dest.Math.Line3@)">
            <summary>
            Returns distance between a point and a line
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Line3(UnityEngine.Vector3@,Dest.Math.Line3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a line
            </summary>
            <param name="closestPoint">Point projected on a line</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Line3(UnityEngine.Vector3@,Dest.Math.Line3@)">
            <summary>
            Returns squared distance between a point and a line
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Line3(UnityEngine.Vector3@,Dest.Math.Line3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a line
            </summary>
            <param name="closestPoint">Point projected on a line</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Plane3(UnityEngine.Vector3@,Dest.Math.Plane3@)">
            <summary>
            Returns distance between a point and a plane
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Plane3(UnityEngine.Vector3@,Dest.Math.Plane3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a plane
            </summary>
            <param name="closestPoint">Point projected on a plane</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Plane3(UnityEngine.Vector3@,Dest.Math.Plane3@)">
            <summary>
            Returns squared distance between a point and a plane
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Plane3(UnityEngine.Vector3@,Dest.Math.Plane3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a plane
            </summary>
            <param name="closestPoint">Point projected on a plane</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Ray3(UnityEngine.Vector3@,Dest.Math.Ray3@)">
            <summary>
            Returns distance between a point and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Ray3(UnityEngine.Vector3@,Dest.Math.Ray3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a ray
            </summary>
            <param name="closestPoint">Point projected on a ray and clamped by ray origin</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Ray3(UnityEngine.Vector3@,Dest.Math.Ray3@)">
            <summary>
            Returns squared distance between a point and a ray
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Ray3(UnityEngine.Vector3@,Dest.Math.Ray3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a ray
            </summary>
            <param name="closestPoint">Point projected on a ray and clamped by ray origin</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Rectangle3(UnityEngine.Vector3@,Dest.Math.Rectangle3@)">
            <summary>
            Returns distance between a point and a rectangle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Rectangle3(UnityEngine.Vector3@,Dest.Math.Rectangle3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a rectangle
            </summary>
            <param name="closestPoint">Point projected on a rectangle</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Rectangle3(UnityEngine.Vector3@,Dest.Math.Rectangle3@)">
            <summary>
            Returns squared distance between a point and a rectangle
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Rectangle3(UnityEngine.Vector3@,Dest.Math.Rectangle3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a rectangle
            </summary>
            <param name="closestPoint">Point projected on a rectangle</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Segment3(UnityEngine.Vector3@,Dest.Math.Segment3@)">
            <summary>
            Returns distance between a point and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Segment3(UnityEngine.Vector3@,Dest.Math.Segment3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a segment
            </summary>
            <param name="closestPoint">Point projected on a segment and clamped by segment endpoints</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Segment3(UnityEngine.Vector3@,Dest.Math.Segment3@)">
            <summary>
            Returns squared distance between a point and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Segment3(UnityEngine.Vector3@,Dest.Math.Segment3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a segment
            </summary>
            <param name="closestPoint">Point projected on a segment and clamped by segment endpoints</param>
        </member>
        <member name="M:Dest.Math.Distance.Point3Sphere3(UnityEngine.Vector3@,Dest.Math.Sphere3@)">
            <summary>
            Returns distance between a point and a sphere
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Point3Sphere3(UnityEngine.Vector3@,Dest.Math.Sphere3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a point and a sphere
            </summary>
            <param name="closestPoint">Point projected on a sphere</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Sphere3(UnityEngine.Vector3@,Dest.Math.Sphere3@)">
            <summary>
            Returns squared distance between a point and a sphere
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrPoint3Sphere3(UnityEngine.Vector3@,Dest.Math.Sphere3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a point and a sphere
            </summary>
            <param name="closestPoint">Point projected on a sphere</param>
        </member>
        <member name="M:Dest.Math.Distance.Ray3Ray3(Dest.Math.Ray3@,Dest.Math.Ray3@)">
            <summary>
            Returns distance between two rays
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Ray3Ray3(Dest.Math.Ray3@,Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between two rays
            </summary>
            <param name="closestPoint0">Point on ray0 closest to ray1</param>
            <param name="closestPoint1">Point on ray1 closest to ray0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay3Ray3(Dest.Math.Ray3@,Dest.Math.Ray3@)">
            <summary>
            Returns squared distance between two rays
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay3Ray3(Dest.Math.Ray3@,Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between two rays
            </summary>
            <param name="closestPoint0">Point on ray0 closest to ray1</param>
            <param name="closestPoint1">Point on ray1 closest to ray0</param>
        </member>
        <member name="M:Dest.Math.Distance.Ray3Segment3(Dest.Math.Ray3@,Dest.Math.Segment3@)">
            <summary>
            Returns distance between a ray and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Ray3Segment3(Dest.Math.Ray3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between a ray and a segment
            </summary>
            <param name="closestPoint0">Point on ray closest to segment</param>
            <param name="closestPoint1">Point on segment closest to ray</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay3Segment3(Dest.Math.Ray3@,Dest.Math.Segment3@)">
            <summary>
            Returns squared distance between a ray and a segment
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrRay3Segment3(Dest.Math.Ray3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between a ray and a segment
            </summary>
            <param name="closestPoint0">Point on ray closest to segment</param>
            <param name="closestPoint1">Point on segment closest to ray</param>
        </member>
        <member name="M:Dest.Math.Distance.Segment3Segment3(Dest.Math.Segment3@,Dest.Math.Segment3@)">
            <summary>
            Returns distance between two segments
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.Segment3Segment3(Dest.Math.Segment3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns distance between two segments
            </summary>
            <param name="closestPoint0">Point on segment0 closest to segment1</param>
            <param name="closestPoint1">Point on segment1 closest to segment0</param>
        </member>
        <member name="M:Dest.Math.Distance.SqrSegment3Segment3(Dest.Math.Segment3@,Dest.Math.Segment3@)">
            <summary>
            Returns squared distance between two segments
            </summary>
        </member>
        <member name="M:Dest.Math.Distance.SqrSegment3Segment3(Dest.Math.Segment3@,Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns squared distance between two segments
            </summary>
            <param name="closestPoint0">Point on segment0 closest to segment1</param>
            <param name="closestPoint1">Point on segment1 closest to segment0</param>
        </member>
        <member name="T:Dest.Math.Intersection">
            <summary>
            Contains various intersection methods.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB2AAB2(Dest.Math.AAB2@,Dest.Math.AAB2@)">
            <summary>
            Tests whether two AAB intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindAAB2AAB2(Dest.Math.AAB2@,Dest.Math.AAB2@,Dest.Math.AAB2@)">
            <summary>
            Tests whether two AAB intersect and finds intersection which is AAB itself.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB2AAB2OverlapX(Dest.Math.AAB2@,Dest.Math.AAB2@)">
            <summary>
            Checks whether two aab has x overlap
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB2AAB2OverlapY(Dest.Math.AAB2@,Dest.Math.AAB2@)">
            <summary>
            Checks whether two aab has y overlap
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB2Circle2(Dest.Math.AAB2@,Dest.Math.Circle2@)">
            <summary>
            Tests if an axis aligned box intersects a circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestBox2Box2(Dest.Math.Box2@,Dest.Math.Box2@)">
            <summary>
            Tests if a box intersects another box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestBox2Circle2(Dest.Math.Box2@,Dest.Math.Circle2@)">
            <summary>
            Tests if a box intersects a circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestCircle2Circle2(Dest.Math.Circle2@,Dest.Math.Circle2@)">
            <summary>
            Tests if a circle intersects another circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindCircle2Circle2(Dest.Math.Circle2@,Dest.Math.Circle2@,Dest.Math.Circle2Circle2Intr@)">
            <summary>
            Tests if a circle intersects another circle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestConvexPolygon2ConvexPolygon2(Dest.Math.Polygon2,Dest.Math.Polygon2)">
            <summary>
            Tests whether two convex CCW ordered polygons intersect.
            Returns true if intersection occurs false otherwise.
            Note that caller is responsibile for supplying proper polygons (convex and CCW ordered).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2AAB2(Dest.Math.Line2@,Dest.Math.AAB2@)">
            <summary>
            Tests if a line intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2AAB2(Dest.Math.Line2@,Dest.Math.AAB2@,Dest.Math.Line2AAB2Intr@)">
            <summary>
            Tests if a line intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Box2(Dest.Math.Line2@,Dest.Math.Box2@)">
            <summary>
            Tests whether line and box intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Box2(Dest.Math.Line2@,Dest.Math.Box2@,Dest.Math.Line2Box2Intr@)">
            <summary>
            Tests whether line and box intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Circle2(Dest.Math.Line2@,Dest.Math.Circle2@)">
            <summary>
            Tests whether line and circle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Circle2(Dest.Math.Line2@,Dest.Math.Circle2@,Dest.Math.Line2Circle2Intr@)">
            <summary>
            Tests whether line and circle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2ConvexPolygon2(Dest.Math.Line2@,Dest.Math.Polygon2)">
            <summary>
            Tests if a line intersects a convex polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2ConvexPolygon2(Dest.Math.Line2@,Dest.Math.Polygon2,Dest.Math.Line2ConvexPolygon2Intr@)">
            <summary>
            Tests if a line intersects a convex ccw ordered polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Line2(Dest.Math.Line2@,Dest.Math.Line2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether two lines intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Line),
            or false if lines do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Line2(Dest.Math.Line2@,Dest.Math.Line2@)">
            <summary>
            Tests whether two lines intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Line),
            or false if lines do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Line2(Dest.Math.Line2@,Dest.Math.Line2@,Dest.Math.Line2Line2Intr@)">
            <summary>
            Tests whether two lines intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Line),
            or false if lines do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether line and ray intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if line and ray do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@)">
            <summary>
            Tests whether line and ray intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if line and ray do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Ray2(Dest.Math.Line2@,Dest.Math.Ray2@,Dest.Math.Line2Ray2Intr@)">
            <summary>
            Tests whether line and ray intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if line and ray do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether line and segment intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if line and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@)">
            <summary>
            Tests whether line and segment intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if line and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Segment2(Dest.Math.Line2@,Dest.Math.Segment2@,Dest.Math.Line2Segment2Intr@)">
            <summary>
            Tests whether line and segment intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if line and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Triangle2(Dest.Math.Line2@,Dest.Math.Triangle2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether line and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine2Triangle2(Dest.Math.Line2@,Dest.Math.Triangle2@)">
            <summary>
            Tests whether line and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine2Triangle2(Dest.Math.Line2@,Dest.Math.Triangle2@,Dest.Math.Line2Triangle2Intr@)">
            <summary>
            Tests whether line and triangle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2AAB2(Dest.Math.Ray2@,Dest.Math.AAB2@)">
            <summary>
            Tests if a ray intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2AAB2(Dest.Math.Ray2@,Dest.Math.AAB2@,Dest.Math.Ray2AAB2Intr@)">
            <summary>
            Tests if a ray intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Box2(Dest.Math.Ray2@,Dest.Math.Box2@)">
            <summary>
            Tests whether ray and box intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Box2(Dest.Math.Ray2@,Dest.Math.Box2@,Dest.Math.Ray2Box2Intr@)">
            <summary>
            Tests whether ray and box intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Circle2(Dest.Math.Ray2@,Dest.Math.Circle2@)">
            <summary>
            Tests whether ray and circle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Circle2(Dest.Math.Ray2@,Dest.Math.Circle2@,Dest.Math.Ray2Circle2Intr@)">
            <summary>
            Tests whether ray and circle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2ConvexPolygon2(Dest.Math.Ray2@,Dest.Math.Polygon2)">
            <summary>
            Tests if a ray intersects a convex polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2ConvexPolygon2(Dest.Math.Ray2@,Dest.Math.Polygon2,Dest.Math.Ray2ConvexPolygon2Intr@)">
            <summary>
            Tests if a ray intersects a convex ccw ordered polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Polygon2(Dest.Math.Ray2@,Dest.Math.Polygon2)">
            <summary>
            Tests if a ray intersects a polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Polygon2(Dest.Math.Ray2@,Dest.Math.Segment2[])">
            <summary>
            Tests if a ray intersects a segment array. Returns true if intersection occurs false otherwise.
            Using this method allows to pass non-closed polyline instead of a polygon. Also if you
            have static polygon which is queried often, it is better to convert polygon to Segment2 array
            once and then call this method. Overload which accepts a polygon will convert edges to Segment2
            every time, while this overload simply accepts Segment2 array and avoids this overhead.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Polygon2(Dest.Math.Ray2@,Dest.Math.Polygon2,Dest.Math.Ray2Polygon2Intr@)">
            <summary>
            Tests if a ray intersects a polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Polygon2(Dest.Math.Ray2@,Dest.Math.Segment2[],Dest.Math.Ray2Polygon2Intr@)">
            <summary>
            Tests if a ray intersects a polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            Using this method allows to pass non-closed polyline instead of a polygon. Also if you
            have static polygon which is queried often, it is better to convert polygon to Segment2 array
            once and then call this method. Overload which accepts a polygon will convert edges to Segment2
            every time, while this overload simply accepts Segment2 array and avoids this overhead.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether two rays intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if rays do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@)">
            <summary>
            Tests whether two rays intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if rays do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Ray2(Dest.Math.Ray2@,Dest.Math.Ray2@,Dest.Math.Ray2Ray2Intr@)">
            <summary>
            Tests whether two rays intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Ray),
            or false if rays do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether ray and segment intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if ray and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@)">
            <summary>
            Tests whether ray and segment intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if ray and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Segment2(Dest.Math.Ray2@,Dest.Math.Segment2@,Dest.Math.Ray2Segment2Intr@)">
            <summary>
            Tests whether ray and segment intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if ray and segment do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Triangle2(Dest.Math.Ray2@,Dest.Math.Triangle2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether ray and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay2Triangle2(Dest.Math.Ray2@,Dest.Math.Triangle2@)">
            <summary>
            Tests whether ray and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay2Triangle2(Dest.Math.Ray2@,Dest.Math.Triangle2@,Dest.Math.Ray2Triangle2Intr@)">
            <summary>
            Tests whether ray and triangle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2AAB2(Dest.Math.Segment2@,Dest.Math.AAB2@)">
            <summary>
            Tests if a segment intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2AAB2(Dest.Math.Segment2@,Dest.Math.AAB2@,Dest.Math.Segment2AAB2Intr@)">
            <summary>
            Tests if a segment intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Box2(Dest.Math.Segment2@,Dest.Math.Box2@)">
            <summary>
            Tests whether segment and box intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2Box2(Dest.Math.Segment2@,Dest.Math.Box2@,Dest.Math.Segment2Box2Intr@)">
            <summary>
            Tests whether segment and box intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Circle2(Dest.Math.Segment2@,Dest.Math.Circle2@)">
            <summary>
            Tests whether segment and circle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2Circle2(Dest.Math.Segment2@,Dest.Math.Circle2@,Dest.Math.Segment2Circle2Intr@)">
            <summary>
            Tests whether segment and circle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2ConvexPolygon2(Dest.Math.Segment2@,Dest.Math.Polygon2)">
            <summary>
            Tests if a ray intersects a convex ccw ordered polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2ConvexPolygon2(Dest.Math.Segment2@,Dest.Math.Polygon2,Dest.Math.Segment2ConvexPolygon2Intr@)">
            <summary>
            Tests if a ray intersects a convex ccw ordered polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether two segments intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if segments do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@)">
            <summary>
            Tests whether two segments intersect.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if segments do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2Segment2(Dest.Math.Segment2@,Dest.Math.Segment2@,Dest.Math.Segment2Segment2Intr@)">
            <summary>
            Tests whether two segments intersect and finds actual intersection parameters.
            Returns true if intersection occurs (IntersectionTypes.Point, IntersectionTypes.Segment),
            or false if segments do not intersect (IntersectionTypes.Empty).
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Triangle2(Dest.Math.Segment2@,Dest.Math.Triangle2@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests whether segment and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment2Triangle2(Dest.Math.Segment2@,Dest.Math.Triangle2@)">
            <summary>
            Tests whether segment and triangle intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment2Triangle2(Dest.Math.Segment2@,Dest.Math.Triangle2@,Dest.Math.Segment2Triangle2Intr@)">
            <summary>
            Tests whether segment and triangle intersect and finds actual intersection parameters.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestTriangle2Triangle2(Dest.Math.Triangle2@,Dest.Math.Triangle2@)">
            <summary>
            Tests if a triangle intersects another triangle (both triangles must be ordered counter clockwise). Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindTriangle2Triangle2(Dest.Math.Triangle2@,Dest.Math.Triangle2@,Dest.Math.Triangle2Triangle2Intr@)">
            <summary>
            Tests if a triangle intersects another triangle and finds intersection parameters (both triangles must be ordered counter clockwise). Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB3AAB3(Dest.Math.AAB3@,Dest.Math.AAB3@)">
            <summary>
            Tests whether two AAB intersect.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindAAB3AAB3(Dest.Math.AAB3@,Dest.Math.AAB3@,Dest.Math.AAB3@)">
            <summary>
            Tests whether two AAB intersect and finds intersection which is AAB itself.
            Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB3AAB3OverlapX(Dest.Math.AAB3@,Dest.Math.AAB3@)">
            <summary>
            Checks whether two aab has x overlap
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB3AAB3OverlapY(Dest.Math.AAB3@,Dest.Math.AAB3@)">
            <summary>
            Checks whether two aab has y overlap
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB3AAB3OverlapZ(Dest.Math.AAB3@,Dest.Math.AAB3@)">
            <summary>
            Checks whether two aab has z overlap
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestAAB3Sphere3(Dest.Math.AAB3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if an axis aligned box intersects a sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestBox3Box3(Dest.Math.Box3@,Dest.Math.Box3@)">
            <summary>
            Tests if a box intersects another box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestBox3Capsule3(Dest.Math.Box3@,Dest.Math.Capsule3@)">
            <summary>
            Tests if a box intersects a capsule. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestBox3Sphere3(Dest.Math.Box3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a box intersects a sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3AAB3(Dest.Math.Line3@,Dest.Math.AAB3@)">
            <summary>
            Tests if a line intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3AAB3(Dest.Math.Line3@,Dest.Math.AAB3@,Dest.Math.Line3AAB3Intr@)">
            <summary>
            Tests if a line intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Box3(Dest.Math.Line3@,Dest.Math.Box3@)">
            <summary>
            Tests if a line intersects a box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Box3(Dest.Math.Line3@,Dest.Math.Box3@,Dest.Math.Line3Box3Intr@)">
            <summary>
            Tests if a line intersects a box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Circle3(Dest.Math.Line3@,Dest.Math.Circle3@)">
            <summary>
            Tests if a line intersects a solid circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Circle3(Dest.Math.Line3@,Dest.Math.Circle3@,Dest.Math.Line3Circle3Intr@)">
            <summary>
            Tests if a line intersects a solid circle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Plane3(Dest.Math.Line3@,Dest.Math.Plane3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a line intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Plane3(Dest.Math.Line3@,Dest.Math.Plane3@)">
            <summary>
            Tests if a line intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Plane3(Dest.Math.Line3@,Dest.Math.Plane3@,Dest.Math.Line3Plane3Intr@)">
            <summary>
            Tests if a line intersects a plane and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Polygon3(Dest.Math.Line3@,Dest.Math.Polygon3)">
            <summary>
            Tests if a line intersects a solid polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Polygon3(Dest.Math.Line3@,Dest.Math.Polygon3,Dest.Math.Line3Polygon3Intr@)">
            <summary>
            Tests if a line intersects a solid polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Rectangle3(Dest.Math.Line3@,Dest.Math.Rectangle3@)">
            <summary>
            Tests if a line intersects a solid rectangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Rectangle3(Dest.Math.Line3@,Dest.Math.Rectangle3@,Dest.Math.Line3Rectangle3Intr@)">
            <summary>
            Tests if a line intersects a solid rectangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Sphere3(Dest.Math.Line3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a line intersects a sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Sphere3(Dest.Math.Line3@,Dest.Math.Sphere3@,Dest.Math.Line3Sphere3Intr@)">
            <summary>
            Tests if a line intersects a sphere and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,Dest.Math.Triangle3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,Dest.Math.Triangle3@)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if a line intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Triangle3(Dest.Math.Line3@,Dest.Math.Triangle3@,Dest.Math.Line3Triangle3Intr@)">
            <summary>
            Tests if a line intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.Line3Triangle3Intr@)">
            <summary>
            Tests if a line intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindLine3Triangle3(Dest.Math.Line3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Line3Triangle3Intr@)">
            <summary>
            Tests if a line intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestPlane3AAB3(Dest.Math.Plane3@,Dest.Math.AAB3@)">
            <summary>
            Tests if a plane intersects a box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestPlane3Box3(Dest.Math.Plane3@,Dest.Math.Box3@)">
            <summary>
            Tests if a plane intersects a box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestPlane3Plane3(Dest.Math.Plane3@,Dest.Math.Plane3@)">
            <summary>
            Tests if a plane intersects another plane. Returns true if intersection occurs false otherwise (also returns false when planes are the same)
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindPlane3Plane3(Dest.Math.Plane3@,Dest.Math.Plane3@,Dest.Math.Plane3Plane3Intr@)">
            <summary>
            Tests if a plane intersects another plane and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestPlane3Sphere3(Dest.Math.Plane3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a plane intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindPlane3Sphere3(Dest.Math.Plane3@,Dest.Math.Sphere3@,Dest.Math.Plane3Sphere3Intr@)">
            <summary>
            Tests if a plane intersects a plane and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestPlane3Triangle3(Dest.Math.Plane3@,Dest.Math.Triangle3@)">
            <summary>
            Tests if a plane intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindPlane3Triangle3(Dest.Math.Plane3@,Dest.Math.Triangle3@,Dest.Math.Plane3Triangle3Intr@)">
            <summary>
            Tests if a plane intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3AAB3(Dest.Math.Ray3@,Dest.Math.AAB3@)">
            <summary>
            Tests if a ray intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3AAB3(Dest.Math.Ray3@,Dest.Math.AAB3@,Dest.Math.Ray3AAB3Intr@)">
            <summary>
            Tests if a ray intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Box3(Dest.Math.Ray3@,Dest.Math.Box3@)">
            <summary>
            Tests if a ray intersects a box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Box3(Dest.Math.Ray3@,Dest.Math.Box3@,Dest.Math.Ray3Box3Intr@)">
            <summary>
            Tests if a ray intersects a box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Circle3(Dest.Math.Ray3@,Dest.Math.Circle3@)">
            <summary>
            Tests if a ray intersects a solid circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Circle3(Dest.Math.Ray3@,Dest.Math.Circle3@,Dest.Math.Ray3Circle3Intr@)">
            <summary>
            Tests if a ray intersects a solid circle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Plane3(Dest.Math.Ray3@,Dest.Math.Plane3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a ray intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Plane3(Dest.Math.Ray3@,Dest.Math.Plane3@)">
            <summary>
            Tests if a ray intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Plane3(Dest.Math.Ray3@,Dest.Math.Plane3@,Dest.Math.Ray3Plane3Intr@)">
            <summary>
            Tests if a ray intersects a plane and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Polygon3(Dest.Math.Ray3@,Dest.Math.Polygon3)">
            <summary>
            Tests if a line intersects a solid polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Polygon3(Dest.Math.Ray3@,Dest.Math.Polygon3,Dest.Math.Ray3Polygon3Intr@)">
            <summary>
            Tests if a ray intersects a solid polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Rectangle3(Dest.Math.Ray3@,Dest.Math.Rectangle3@)">
            <summary>
            Tests if a ray intersects a solid rectangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Rectangle3(Dest.Math.Ray3@,Dest.Math.Rectangle3@,Dest.Math.Ray3Rectangle3Intr@)">
            <summary>
            Tests if a ray intersects a solid rectangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Sphere3(Dest.Math.Ray3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a ray intersects a sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Sphere3(Dest.Math.Ray3@,Dest.Math.Sphere3@,Dest.Math.Ray3Sphere3Intr@)">
            <summary>
            Tests if a ray intersects a sphere and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,Dest.Math.Triangle3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,Dest.Math.Triangle3@)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if a ray intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Triangle3(Dest.Math.Ray3@,Dest.Math.Triangle3@,Dest.Math.Ray3Triangle3Intr@)">
            <summary>
            Tests if a ray intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.Ray3Triangle3Intr@)">
            <summary>
            Tests if a ray intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindRay3Triangle3(Dest.Math.Ray3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Ray3Triangle3Intr@)">
            <summary>
            Tests if a ray intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3AAB3(Dest.Math.Segment3@,Dest.Math.AAB3@)">
            <summary>
            Tests if a segment intersects an axis aligned box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3AAB3(Dest.Math.Segment3@,Dest.Math.AAB3@,Dest.Math.Segment3AAB3Intr@)">
            <summary>
            Tests if a segment intersects an axis aligned box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Box3(Dest.Math.Segment3@,Dest.Math.Box3@)">
            <summary>
            Tests if a segment intersects a box. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Box3(Dest.Math.Segment3@,Dest.Math.Box3@,Dest.Math.Segment3Box3Intr@)">
            <summary>
            Tests if a segment intersects a box and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Circle3(Dest.Math.Segment3@,Dest.Math.Circle3@)">
            <summary>
            Tests if a segment intersects a solid circle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Circle3(Dest.Math.Segment3@,Dest.Math.Circle3@,Dest.Math.Segment3Circle3Intr@)">
            <summary>
            Tests if a segment intersects a solid circle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Plane3(Dest.Math.Segment3@,Dest.Math.Plane3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a segment intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Plane3(Dest.Math.Segment3@,Dest.Math.Plane3@)">
            <summary>
            Tests if a segment intersects a plane. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Plane3(Dest.Math.Segment3@,Dest.Math.Plane3@,Dest.Math.Segment3Plane3Intr@)">
            <summary>
            Tests if a segment intersects a plane and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Polygon3(Dest.Math.Segment3@,Dest.Math.Polygon3)">
            <summary>
            Tests if a segment intersects a solid polygon. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Polygon3(Dest.Math.Segment3@,Dest.Math.Polygon3,Dest.Math.Segment3Polygon3Intr@)">
            <summary>
            Tests if a segment intersects a solid polygon and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Rectangle3(Dest.Math.Segment3@,Dest.Math.Rectangle3@)">
            <summary>
            Tests if a segment intersects a solid rectangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Rectangle3(Dest.Math.Segment3@,Dest.Math.Rectangle3@,Dest.Math.Segment3Rectangle3Intr@)">
            <summary>
            Tests if a segment intersects a solid rectangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Sphere3(Dest.Math.Segment3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a segment intersects a sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Sphere3(Dest.Math.Segment3@,Dest.Math.Sphere3@,Dest.Math.Segment3Sphere3Intr@)">
            <summary>
            Tests if a segment intersects a sphere and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,Dest.Math.Triangle3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,Dest.Math.Triangle3@)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if a segment intersects a triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Triangle3(Dest.Math.Segment3@,Dest.Math.Triangle3@,Dest.Math.Segment3Triangle3Intr@)">
            <summary>
            Tests if a segment intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,Dest.Math.Segment3Triangle3Intr@)">
            <summary>
            Tests if a segment intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment3Triangle3(Dest.Math.Segment3@,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Segment3Triangle3Intr@)">
            <summary>
            Tests if a segment intersects a triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestSphere3Sphere3(Dest.Math.Sphere3@,Dest.Math.Sphere3@)">
            <summary>
            Tests if a sphere intersects another sphere. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSphere3Sphere3(Dest.Math.Sphere3@,Dest.Math.Sphere3@,Dest.Math.Sphere3Sphere3Intr@)">
            <summary>
            Tests if a sphere intersects another sphere and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestTriangle3Triangle3(Dest.Math.Triangle3@,Dest.Math.Triangle3@,Dest.Math.IntersectionTypes@)">
            <summary>
            Tests if a triangle intersects another triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.TestTriangle3Triangle3(Dest.Math.Triangle3@,Dest.Math.Triangle3@)">
            <summary>
            Tests if a triangle intersects another triangle. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindTriangle3Triangle3(Dest.Math.Triangle3@,Dest.Math.Triangle3@,Dest.Math.Triangle3Triangle3Intr@,System.Boolean)">
            <summary>
            Tests if a triangle intersects another triangle and finds intersection parameters. Returns true if intersection occurs false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Intersection.FindSegment1Segment1(System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Finds intersection of 1d intervals. Endpoints of the intervals must be sorted,
            i.e. seg0Start must be &lt;= seg0End, seg1Start must be &lt;= seg1End. Returns 0 if
            intersection is empty, 1 - if intervals intersect in one point, 2 - if intervals
            intersect in segment. w0 and w1 will contain intersection point in case intersection occurs.
            </summary>
        </member>
        <member name="P:Dest.Math.Intersection.IntervalThreshold">
            <summary>
            Used in interval comparisons. Default is MathfEx.ZeroTolerance.
            </summary>
        </member>
        <member name="P:Dest.Math.Intersection.DotThreshold">
            <summary>
            Used in dot product comparisons. Default is MathfEx.ZeroTolerance.
            </summary>
        </member>
        <member name="P:Dest.Math.Intersection.DistanceThreshold">
            <summary>
            Used in distance comparisons. Default is MathfEx.ZeroTolerance.
            </summary>
        </member>
        <member name="T:Dest.Math.Circle2Circle2Intr">
            <summary>
            Contains information about intersection of two Circle2.
            The quantity Q is 0, 1, or 2. When Q > 0, the interpretation depends
            on the intersection type.
              IntersectionTypes.Point:  Q distinct points of intersection
              IntersectionTypes.Other:  The circles are the same
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2Circle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if there is intersection,
            IntersectionTypes.Other if circles are the same and IntersectionTypes.Empty
            if circles do not intersect
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2Circle2Intr.Quantity">
            <summary>
            Number of intersection points
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2Circle2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2Circle2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line2AAB2Intr">
            <summary>
            Contains information about intersection of Line2 and AxisAlignedBox2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2AAB2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2AAB2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2AAB2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2AAB2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Box2Intr">
            <summary>
            Contains information about intersection of Line2 and Box2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Box2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Box2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Box2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Box2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Circle2Intr">
            <summary>
            Contains information about intersection of Line2 and Circle2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Circle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Circle2Intr.Point0">
            <summary>
            First point of intersection (in case of IntersectionTypes.Point or IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Circle2Intr.Point1">
            <summary>
            Second point of intersection (in case of IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="T:Dest.Math.Line2ConvexPolygon2Intr">
            <summary>
            Contains information about intersection of Line2 and convex ccw ordered Polygon2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.Parameter0">
            <summary>
            Line evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2ConvexPolygon2Intr.Parameter1">
            <summary>
            Line evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Line2Intr">
            <summary>
            Contains information about intersection of two Line2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Line2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Line (lines are the same)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Line2Intr.Point">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Line2Intr.Parameter">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to first line.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Ray2Intr">
            <summary>
            Contains information about intersection of Line2 and Ray2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Ray2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (line and ray are collinear)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Ray2Intr.Point">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Ray2Intr.Parameter">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to line.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Segment2Intr">
            <summary>
            Contains information about intersection of Line2 and Segment2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Segment2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (line and segment are collinear)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Segment2Intr.Point">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Segment2Intr.Parameter">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to line.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Line2Triangle2Intr">
            <summary>
            Contains information about intersection of Line2 and Triangle2
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Triangle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Triangle2Intr.Quantity">
            <summary>
            Number of intersection points
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Triangle2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line2Triangle2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2AAB2Intr">
            <summary>
            Contains information about intersection of Line2 and AxisAlignedBox2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2AAB2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2AAB2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2AAB2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2AAB2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Box2Intr">
            <summary>
            Contains information about intersection of Ray2 and Box2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Box2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Box2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Box2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Box2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Circle2Intr">
            <summary>
            Contains information about intersection of Ray2 and Circle2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Circle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Circle2Intr.Point0">
            <summary>
            First point of intersection (in case of IntersectionTypes.Point or IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Circle2Intr.Point1">
            <summary>
            Second point of intersection (in case of IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2ConvexPolygon2Intr">
            <summary>
            Contains information about intersection of Ray2 and convex ccw ordered Polygon2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.Parameter0">
            <summary>
            Ray evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2ConvexPolygon2Intr.Parameter1">
            <summary>
            Ray evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Polygon2Intr">
            <summary>
            Contains information about intersection of Ray2 and general Polygon2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Polygon2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (ray and some polygon segment are collinear and overlap in more than one point)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Polygon2Intr.Point0">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            In case of IntersectionTypes.Segment contains first point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Polygon2Intr.Point1">
            <summary>
            In case of IntersectionTypes.Segment contains second point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Polygon2Intr.Parameter0">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to ray.
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            first intersection point according to ray.
            Otherwise 0.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Polygon2Intr.Parameter1">
            <summary>
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            second intersection point according to ray.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Ray2Intr">
            <summary>
            Contains information about intersection of two Ray2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Ray2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Ray (rays are collinear and overlap in more than one point)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Ray2Intr.Point">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            In case of IntersectionTypes.Ray contains second ray's origin.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Ray2Intr.Parameter">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to first ray.
            In case of IntersectionTypes.Ray contains evaluation parameter of the
            second ray's origin according to first ray.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Segment2Intr">
            <summary>
            Contains information about intersection of Ray2 and Segment2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Segment2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (ray and segment are collinear and overlap in more than one point)
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Segment2Intr.Point0">
            <summary>
            In case of IntersectionTypes.Point constains single point of intersection.
            In case of IntersectionTypes.Segment contains first point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Segment2Intr.Point1">
            <summary>
            In case of IntersectionTypes.Segment contains second point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Segment2Intr.Parameter0">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to ray.
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            first intersection point according to ray.
            Otherwise 0.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Segment2Intr.Parameter1">
            <summary>
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            second intersection point according to ray.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2Triangle2Intr">
            <summary>
            Contains information about intersection of Ray2 and Triangle2
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Triangle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Triangle2Intr.Quantity">
            <summary>
            Number of intersection points
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Triangle2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2Triangle2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2AAB2Intr">
            <summary>
            Contains information about intersection of Line2 and AxisAlignedBox2
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2AAB2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2AAB2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2AAB2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2AAB2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2Box2Intr">
            <summary>
            Contains information about intersection of Segment2 and Box2
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Box2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Box2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Box2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Box2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2Circle2Intr">
            <summary>
            Contains information about intersection of Segment2 and Circle2
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Circle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Circle2Intr.Point0">
            <summary>
            First point of intersection (in case of IntersectionTypes.Point or IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Circle2Intr.Point1">
            <summary>
            Second point of intersection (in case of IntersectionTypes.Segment)
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2ConvexPolygon2Intr">
            <summary>
            Contains information about intersection of Segment2 and convex ccw ordered Polygon2
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.Parameter0">
            <summary>
            Segment evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2ConvexPolygon2Intr.Parameter1">
            <summary>
            Segment evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2Segment2Intr">
            <summary>
            Contains information about intersection of two Segment2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Segment2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (segments are collinear and overlap in more than one point)
            if intersection occured otherwise IntersectionTypes.Empty.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Segment2Intr.Point0">
            <summary>
            In case of IntersectionTypes.Point contains single point of intersection.
            In case of IntersectionTypes.Segment contains first point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Segment2Intr.Point1">
            <summary>
            In case of IntersectionTypes.Segment contains second point of intersection.
            Otherwise Vector2.zero.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Segment2Intr.Parameter0">
            <summary>
            In case of IntersectionTypes.Point contains evaluation parameter of single
            intersection point according to first segment.
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            first intersection point according to first segment.
            Otherwise 0.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Segment2Intr.Parameter1">
            <summary>
            In case of IntersectionTypes.Segment contains evaluation parameter of the
            second intersection point according to first segment.
            Otherwise 0.
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2Triangle2Intr">
            <summary>
            Contains information about intersection of Segment2 and Triangle2
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Triangle2Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment
            if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Triangle2Intr.Quantity">
            <summary>
            Number of intersection points
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Triangle2Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2Triangle2Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Triangle2Triangle2Intr">
            <summary>
            Contains information about intersection of Triangle2 and Triangle2
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle2Triangle2Intr.IntersectionType">
            <summary>
            Equals to:
            IntersectionTypes.Empty if no intersection occurs;
            IntersectionTypes.Point if triangles are touching in a point;
            IntersectionTypes.Segment if triangles are touching in a segment;
            IntersectionTypes.Polygon if triangles intersect.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle2Triangle2Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2;
            IntersectionTypes.Polygon: 3 to 6.
            </summary>
        </member>
        <member name="P:Dest.Math.Triangle2Triangle2Intr.Item(System.Int32)">
            <summary>
            Gets intersection point by index (0 to 5). Points could be also accessed individually using Point0,...,Point5 fields.
            </summary>
        </member>
        <member name="T:Dest.Math.Line3AAB3Intr">
            <summary>
            Contains information about intersection of Line3 and AxisAlignedBox3
            </summary>
        </member>
        <member name="F:Dest.Math.Line3AAB3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line3AAB3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line3AAB3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3AAB3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Box3Intr">
            <summary>
            Contains information about intersection of Line3 and Box3
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Box3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Box3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Box3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Box3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Circle3Intr">
            <summary>
            Contains information about intersection of Line3 and Circle3 (circle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Circle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a line lies in the plane of a circle)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Circle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Plane3Intr">
            <summary>
            Contains information about intersection of Line3 and Plane3
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Plane3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Line (a line lies in a plane) if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Plane3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Plane3Intr.LineParameter">
            <summary>
            Line evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Polygon3Intr">
            <summary>
            Contains information about intersection of Line3 and Polygon3 (polygon considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Polygon3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a line lies in the plane of a polygon)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Polygon3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Rectangle3Intr">
            <summary>
            Contains information about intersection of Line3 and Rectangle3 (rectangle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Rectangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a line lies in the plane of a rectangle)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Rectangle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Sphere3Intr">
            <summary>
            Contains information about intersection of Line3 and Sphere3
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.LineParameter0">
            <summary>
            Line evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Sphere3Intr.LineParameter1">
            <summary>
            Line evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Line3Triangle3Intr">
            <summary>
            Contains information about intersection of Line3 and Triangle3
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty (even when a line lies in a triangle plane)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.LineParameter">
            <summary>
            Line evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.TriBary0">
            <summary>
            First barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.TriBary1">
            <summary>
            Second barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Line3Triangle3Intr.TriBary2">
            <summary>
            Third barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Plane3Plane3Intr">
            <summary>
            Contains information about intersection of Plane3 and Plane3
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Plane3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Line or IntersectionTypes.Plane (planes are the same) if intersection occured otherwise IntersectionTypes.Empty.
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Plane3Intr.Line">
            <summary>
            Intersection line (in case of IntersectionTypes.Line)
            </summary>
        </member>
        <member name="T:Dest.Math.Plane3Sphere3Intr">
            <summary>
            Contains information about intersection of Plane3 and Sphere3
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Sphere3Intr.IntersectionType">
            <summary>
            Equals to IntersectionType.Point if a sphere is touching a plane, IntersectionType.Other if a sphere intersects a plane, otherwise IntersectionType.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Sphere3Intr.Circle">
            <summary>
            Contains intersection circle of a sphere and a plane in case of IntersectionType.Other
            </summary>
        </member>
        <member name="T:Dest.Math.Plane3Triangle3Intr">
            <summary>
            Contains information about intersection of Plane3 and Triangle3
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Triangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point (a triangle is touching a plane by a vertex) or
            IntersectionTypes.Segment (a triangle is touching a plane by an edge or intersecting the plane) or
            IntersectionTypes.Polygon (a triangle is lying in a plane), otherwise IntersectionTypes.Empty (no intersection).
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Triangle3Intr.Quantity">
            <summary>
            Number of intersection points.
            0 - IntersectionTypes.Empty;
            1 - IntersectionTypes.Point;
            2 - IntersectionTypes.Segment;
            3 - IntersectionTypes.Polygon;
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Triangle3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Triangle3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3Triangle3Intr.Point2">
            <summary>
            Third intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3AAB3Intr">
            <summary>
            Contains information about intersection of Ray3 and AxisAlignedBox3
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3AAB3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3AAB3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3AAB3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3AAB3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Box3Intr">
            <summary>
            Contains information about intersection of Ray3 and Box3
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Box3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Box3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Box3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Box3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Circle3Intr">
            <summary>
            Contains information about intersection of Ray3 and Circle3 (circle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Circle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a ray lies in the plane of a circle)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Circle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Plane3Intr">
            <summary>
            Contains information about intersection of Ray3 and Plane3
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Plane3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Ray (a ray lies in a plane) if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Plane3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Plane3Intr.RayParameter">
            <summary>
            Ray evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Polygon3Intr">
            <summary>
            Contains information about intersection of Ray3 and Polygon3 (polygon considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Polygon3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a ray lies in the plane of a polygon)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Polygon3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Rectangle3Intr">
            <summary>
            Contains information about intersection of Ray3 and Rectangle3 (rectangle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Rectangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a ray lies in the plane of a rectangle)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Rectangle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Sphere3Intr">
            <summary>
            Contains information about intersection of Ray3 and Sphere3
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.RayParameter0">
            <summary>
            Ray evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Sphere3Intr.RayParameter1">
            <summary>
            Ray evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3Triangle3Intr">
            <summary>
            Contains information about intersection of Ray and Triangle3
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty (even when a ray lies in a triangle plane)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.RayParameter">
            <summary>
            Ray evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.TriBary0">
            <summary>
            First barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.TriBary1">
            <summary>
            Second barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3Triangle3Intr.TriBary2">
            <summary>
            Third barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3AAB3Intr">
            <summary>
            Contains information about intersection of Segment3 and AxisAlignedBox3
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3AAB3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3AAB3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3AAB3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3AAB3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Box3Intr">
            <summary>
            Contains information about intersection of Segment3 and Box3
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Box3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Box3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Box3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Box3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Circle3Intr">
            <summary>
            Contains information about intersection of Segment3 and Circle3 (circle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Circle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a segment lies in the plane of a circle)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Circle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Plane3Intr">
            <summary>
            Contains information about intersection of Segment3 and Plane3
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Plane3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment (a segment lies in a plane) if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Plane3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Plane3Intr.SegmentParameter">
            <summary>
            Segment evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Polygon3Intr">
            <summary>
            Contains information about intersection of Segment3 and Polygon3 (polygon considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Polygon3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a segment lies in the plane of a polygon)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Polygon3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Rectangle3Intr">
            <summary>
            Contains information about intersection of Segment3 and Rectangle3 (rectangle considered to be solid)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Rectangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty
            (including the case when a segment lies in the plane of a rectangle)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Rectangle3Intr.Point">
            <summary>
            Intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Sphere3Intr">
            <summary>
            Contains information about intersection of Segment3 and Sphere3
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point or IntersectionTypes.Segment if intersection occured otherwise IntersectionTypes.Empty
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2.
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.Point0">
            <summary>
            First intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.Point1">
            <summary>
            Second intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.SegmentParameter0">
            <summary>
            Segment evaluation parameter of the first intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Sphere3Intr.SegmentParameter1">
            <summary>
            Segment evaluation parameter of the second intersection point
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3Triangle3Intr">
            <summary>
            Contains information about intersection of Segment3 and Triangle3
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.IntersectionType">
            <summary>
            Equals to IntersectionTypes.Point if intersection occured otherwise IntersectionTypes.Empty (even when a segment lies in a triangle plane)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.Point">
            <summary>
            Intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.SegmentParameter">
            <summary>
            Segment evaluation parameter of the intersection point (in case of IntersectionTypes.Point)
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.TriBary0">
            <summary>
            First barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.TriBary1">
            <summary>
            Second barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3Triangle3Intr.TriBary2">
            <summary>
            Third barycentric coordinate of the intersection point
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Empty">
            <summary>
            Spheres are disjoint/separated
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Point">
            <summary>
            Spheres touch at point, each sphere outside the other
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Circle">
            <summary>
            Spheres intersect in a circle
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Sphere0">
            <summary>
            Sphere0 strictly contained in sphere1
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Sphere0Point">
            <summary>
            Sphere0 contained in sphere1, share common point
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Sphere1">
            <summary>
            Sphere1 strictly contained in sphere0
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Sphere1Point">
            <summary>
            Sphere1 contained in sphere0, share common point
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3IntrTypes.Same">
            <summary>
            Spheres are the same
            </summary>
        </member>
        <member name="T:Dest.Math.Sphere3Sphere3Intr">
            <summary>
            Contains information about intersection of Sphere3 and Sphere3
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3Intr.IntersectionType">
            <summary>
            Equals to:
            Sphere3Sphere3IntersectionTypes.Empty if no intersection occurs;
            Sphere3Sphere3IntersectionTypes.Point if spheres are touching in a point and outside of each other;
            Sphere3Sphere3IntersectionTypes.Circle is spheres intersect (common case);
            Sphere3Sphere3IntersectionTypes.Sphere0 or Sphere3Sphere3IntersectionTypes.Sphere1 if sphere0 is strictly contained inside sphere1, or
            sphere1 is strictly contained in sphere0 respectively;
            Sphere3Sphere3IntersectionTypes.Sphere0Point or Sphere3Sphere3IntersectionTypes.Sphere1Point if sphere0 is contained inside sphere1 and share common point or
            sphere1 is contained inside sphere0 and share common point;
            Sphere3Sphere3IntersectionTypes.Same if spheres are esssentialy the same.
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3Intr.Circle">
            <summary>
            Circle of intersection in case of Sphere3Sphere3IntersectionTypes.Circle
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3Sphere3Intr.ContactPoint">
            <summary>
            Contact point in case of Sphere3Sphere3IntersectionTypes.Point,
            Sphere3Sphere3IntersectionTypes.Sphere0Point, Sphere3Sphere3IntersectionTypes.Sphere1Point
            </summary>
        </member>
        <member name="T:Dest.Math.Triangle3Triangle3Intr">
            <summary>
            Contains information about intersection of Triangle3 and Triangle3
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3Triangle3Intr.IntersectionType">
            <summary>
            Equals to:
            IntersectionTypes.Empty if no intersection occurs;
            IntersectionTypes.Point if non-coplanar triangles touch in a point, see Touching member for the description;
            IntersectionTypes.Segment if non-coplanar triangles intersect or are touch in a segment, see Touching member for the description;
            IntersectionTypes.Plane if reportCoplanarIntersections is specified to true when calling Find method and triangles are coplanar
            and intersect, if reportCoplanarIntersections is specified to false, coplanar triangles are reported as not intersecting.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3Triangle3Intr.CoplanarIntersectionType">
            <summary>
            If triangles are non-coplanar equals to IntersectionType.Empty. If triangles are coplanar, equals to the following options:
            IntersectionTypes.Empty if coplanar triangles do not intersect;
            IntersectionTypes.Point is coplanar triangles touch in a point;
            IntersectionTypes.Segment if coplanar triangles touch in a segment;
            IntersectionTypes.Polygon if coplanar triangles intersect.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3Triangle3Intr.Touching">
            <summary>
            Equals to true if triangles are non-coplanar and touching in a point 
            (IntersectionTypes.Point; touch variants are: a vertex lies in the plane of a triangle and contained by a triangle (including border), two non-collinear edges touch) or
            if triangles are not coplanar and touching in a segment
            (IntersectionTypes.Segment; an edge lies in the plane of a triangle and intersects triangle in more than one point).
            Generally speaking, touching is true when non-coplanar triangles touch each other by some parts of their borders.
            Otherwise false.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3Triangle3Intr.Quantity">
            <summary>
            Number of intersection points.
            IntersectionTypes.Empty: 0;
            IntersectionTypes.Point: 1;
            IntersectionTypes.Segment: 2;
            IntersectionTypes.Polygon: 1 to 6.
            </summary>
        </member>
        <member name="P:Dest.Math.Triangle3Triangle3Intr.Item(System.Int32)">
            <summary>
            Gets intersection point by index (0 to 5). Points could be also accessed individually using Point0,...,Point5 fields.
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Empty">
            <summary>
            Entities do not intersect
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Point">
            <summary>
            Entities intersect in a point
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Segment">
            <summary>
            Entities intersect in a segment
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Ray">
            <summary>
            Entities intersect in a ray
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Line">
            <summary>
            Entities intersect in a line
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Polygon">
            <summary>
            Entities intersect in a polygon
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Plane">
            <summary>
            Entities intersect in a plane
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Polyhedron">
            <summary>
            Entities intersect in a polyhedron
            </summary>
        </member>
        <member name="F:Dest.Math.IntersectionTypes.Other">
            <summary>
            Entities intersect somehow
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.ZeroTolerance">
            <summary>
            1e-5f
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.NegativeZeroTolerance">
            <summary>
            -1e-5f
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.ZeroToleranceSqr">
            <summary>
            (1e-5f)^2
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.Pi">
            <summary>
            π
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.HalfPi">
            <summary>
            π/2
            </summary>
        </member>
        <member name="F:Dest.Math.Mathfex.TwoPi">
            <summary>
            2*π
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalSquared(System.Single)">
            <summary>
            Evaluates x^2
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalInvSquared(System.Single)">
            <summary>
            Evaluates x^(1/2)
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalCubic(System.Single)">
            <summary>
            Evaluates x^3
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalInvCubic(System.Single)">
            <summary>
            Evaluates x^(1/3)
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalQuadratic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Evaluates quadratic equation a*x^2 + b*x + c
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalSigmoid(System.Single)">
            <summary>
            Evaluates sigmoid function (used for smoothing values).
            Formula: x^2 * (3 - 2*x)
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalOverlappedStep(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Evaluates overlapped step function. Useful for animating several objects
            (stepIndex parameter is number of the objects), where animations follow one after
            another with some overlapping in time (overlap parameter).
            </summary>
            <param name="x">Evaluation parameter, makes sence in [0,1] range</param>
            <param name="overlap">Overlapping between animations (must be greater or equal to zero),
            where 0 means that animations do not overlap and follow one after another.</param>
            <param name="objectIndex">Index of object beeing animated</param>
            <param name="objectCount">Number of objects beeing animated</param>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalSmoothOverlappedStep(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Evaluates overlapped step function and applies sigmoid to smooth the result. Useful for animating several objects
            (stepIndex parameter is number of the objects), where animations follow one after
            another with some overlapping in time (overlap parameter).
            </summary>
            <param name="x">Evaluation parameter, makes sence in [0,1] range</param>
            <param name="overlap">Overlapping between animations (must be greater or equal to zero),
            where 0 means that animations do not overlap and follow one after another.</param>
            <param name="objectIndex">Index of object beeing animated</param>
            <param name="objectCount">Number of objects beeing animated</param>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalGaussian(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Evaluates scalar gaussian function. The formula is:
            a * e^(-(x-b)^2 / 2*c^2)
            </summary>
            <param name="x">Function parameter</param>
        </member>
        <member name="M:Dest.Math.Mathfex.EvalGaussian2D(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Evaluates 2-dimensional gaussian function. The formula is:
            A * e^(-(a*(x - x0)^2 + 2*b*(x - x0)*(y - y0) + c*(y - y0)^2))
            </summary>
            <param name="x">First function parameter</param>
            <param name="y">Second function parameter</param>
        </member>
        <member name="M:Dest.Math.Mathfex.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between 'value0' and 'value1'.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between 'value0' and 'value1'.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will NOT be clamped, i.e. interpolation can overshoot)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.SigmoidInterp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between 'value0' and 'value1' using sigmoid as interpolation function.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.SinInterp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between 'value0' and 'value1' using sine function easing at the end.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.CosInterp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between 'value0' and 'value1' using cosine function easing in the start.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.WobbleInterp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between 'value0' and 'value1' in using special function which overshoots first, then waves back and forth gradually declining towards the end.
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.CurveInterp(System.Single,System.Single,System.Single,UnityEngine.AnimationCurve)">
            <summary>
            Interpolates between 'value0' and 'value1' using provided animation curve (curve will be sampled in [0..1] range]).
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.FuncInterp(System.Single,System.Single,System.Single,System.Func{System.Single,System.Single})">
            <summary>
            Interpolates between 'value0' and 'value1' using provided function (function will be sampled in [0..1] range]).
            </summary>
            <param name="factor">Interpolation factor in range [0..1] (will be clamped)</param>
        </member>
        <member name="M:Dest.Math.Mathfex.InvSqrt(System.Single)">
            <summary>
            Returns 1/Sqrt(value) if value != 0, otherwise returns 0.
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.Near(System.Single,System.Single,System.Single)">
            <summary>
            Returns abs(v0-v1)&lt;eps
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.NearZero(System.Single,System.Single)">
            <summary>
            Returns abs(v)&lt;eps
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.CartesianToPolar(UnityEngine.Vector2)">
            <summary>
            Converts cartesian coordinates to polar coordinates.
            Resulting vector contains rho (length) in x coordinate and phi (angle) in y coordinate; rho >= 0, 0 &lt;= phi &lt; 2pi.
            If cartesian coordinates are (0,0) resulting coordinates are (0,0).
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.PolarToCartesian(UnityEngine.Vector2)">
            <summary>
            Converts polar coordinates to cartesian coordinates.
            Input vector contains rho (length) in x coordinate and phi (angle) in y coordinate; rho >= 0, 0 &lt;= phi &lt; 2pi.
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.CartesianToSpherical(UnityEngine.Vector3)">
            <summary>
            Converts cartesian coordinates to spherical coordinates.
            Resulting vector contains rho (length) in x coordinate, theta (azimutal angle in XZ plane from X axis) in y coordinate,
            phi (zenith angle from positive Y axis) in z coordinate; rho >= 0, 0 &lt;= theta &lt; 2pi, 0 &lt;= phi &lt; pi.
            If cartesian coordinates are (0,0,0) resulting coordinates are (0,0,0).
            </summary>
            <param name="cartesianCoordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Dest.Math.Mathfex.SphericalToCartesian(UnityEngine.Vector3)">
            <summary>
            Converts spherical coordinates to cartesian coordinates.
            Input vector contains rho (length) in x coordinate, theta (azimutal angle in XZ plane from X axis) in y coordinate,
            phi (zenith angle from positive Y axis) in z coordinate; rho >= 0, 0 &lt;= theta &lt; 2pi, 0 &lt;= phi &lt; pi.
            </summary>
            <param name="sphericalCoordinates"></param>
            <returns></returns>
        </member>
        <member name="M:Dest.Math.Mathfex.CartesianToCylindrical(UnityEngine.Vector3)">
            <summary>
            Converts cartesian coordinates to cylindrical coordinates.
            Resulting vector contains rho (length) in x coordinate, phi (polar angle in XZ plane) in y coordinate,
            height (height from XZ plane to the point) in z coordinate.
            </summary>
        </member>
        <member name="M:Dest.Math.Mathfex.CylindricalToCartesian(UnityEngine.Vector3)">
            <summary>
            Converts cylindrical coordinates to cartesian coordinates.
            Input vector contains rho (length) in x coordinate, phi (polar angle in XZ plane) in y coordinate,
            height (height from XZ plane to the point) in z coordinate.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.RotationMatrixToQuaternion(UnityEngine.Matrix4x4@,UnityEngine.Quaternion@)">
            <summary>
            Converts rotation matrix to quaternion
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.QuaternionToRotationMatrix(UnityEngine.Quaternion,UnityEngine.Matrix4x4@)">
            <summary>
            Converts quaternion to rotation matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.QuaternionToRotationMatrix(UnityEngine.Quaternion@,UnityEngine.Matrix4x4@)">
            <summary>
            Converts quaternion to rotation matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateTranslation(UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates translation matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateTranslation(UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates translation matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateScale(UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates non-uniform scale matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateScale(UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates non-uniform scale matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateScale(System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Creates uniform scale matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationEuler(System.Single,System.Single,System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Creates rotaion matrix using euler angles (order is the same as in Quaternion.Euler() method)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationEuler(UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates rotaion matrix using euler angles (order is the same as in Quaternion.Euler() method)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationEuler(UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates rotaion matrix using euler angles (order is the same as in Quaternion.Euler() method)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationX(System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around x-axis
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationY(System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around y-axis
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationZ(System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around z-axis
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationAngleAxis(System.Single,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around an arbirary axis (function will normalize axis)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationAngleUnitAxis(System.Single,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a matrix that rotates around an arbirary axis (caller must provide unit-length axis)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dest.Math.Matrix4x4ex.CreateRotation(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Matrix4x4@)" -->
        <!-- Badly formed XML comment ignored for member "M:Dest.Math.Matrix4x4ex.CreateRotation(UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Matrix4x4@)" -->
        <member name="M:Dest.Math.Matrix4x4ex.Transpose(UnityEngine.Matrix4x4@)">
            <summary>
            Transposes given matrix
            </summary>
            <param name="matrix">Matrix to transpose (will be overriden to contain output)</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Transpose(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Transposes given matrix
            </summary>
            <param name="matrix">Matrix to transpose</param>
            <param name="transpose">Output containing transposed matrix</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CalcDeterminant(UnityEngine.Matrix4x4@)">
            <summary>
            Returns matrix determinant
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Inverse(UnityEngine.Matrix4x4@,System.Single)">
            <summary>
            Inverses given matrix
            </summary>
            <param name="matrix">Matrix to inverse (will be overriden to contain output)</param>
            <param name="epsilon">Small positive number used to compare determinant with zero</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Inverse(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,System.Single)">
            <summary>
            Inverses given matrix. IMPORTANT: 'matrix' and 'inverse' parameters must be different!
            If you want matrix to contain inverse of itself, use another overload.
            </summary>
            <param name="matrix">Matrix to inverse</param>
            <param name="inverse">Output containing inverse matrix (Must not be the same variable as 'matrix'!)</param>
            <param name="epsilon">Small positive number used to compare determinant with zero</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CopyMatrix(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Copies source matrix into destination matrix
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Multiply(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Multiplies two matrices. Result matrix is matrix0*matrix1. IMPORTANT: 'result' parameter must not
            be the same variable as either 'matrix0' or 'matrix1', if you want to store the result in one of
            the input matrices, use MultiplyLeft or MultiplyRight methods.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.MultiplyRight(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Multiplies matrix0 by matrix1 on the right, i.e. the result is matrix0*matrix1.
            Output is written into matrix0 parameter.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.MultiplyLeft(UnityEngine.Matrix4x4@,UnityEngine.Matrix4x4@)">
            <summary>
            Multiplies matrix1 by matrix0 on the left, i.e. the result is matrix0*matrix1.
            Output is written into matrix1 parameter.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Multiply(UnityEngine.Matrix4x4@,System.Single)">
            <summary>
            Multiplies matrix by a scalar.
            </summary>
            <param name="matrix">Matrix to multiply (will be overriden to contain output)</param>
            <param name="scalar">Scalar to multiply</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Multiply(UnityEngine.Matrix4x4@,System.Single,UnityEngine.Matrix4x4@)">
            <summary>
            Multiplies matrix by a scalar.
            </summary>
            <param name="matrix">Matrix to multiply</param>
            <param name="scalar">Scalar to multiply</param>
            <param name="result">Output containing multiplied matrix</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Multiply(UnityEngine.Matrix4x4@,UnityEngine.Vector4)">
            <summary>
            Multiplies matrix by vector. Reulst vector is matrix*vector.
            </summary>
            <param name="matrix">Matrix to multiply</param>
            <param name="vector">Vector to multiply</param>
            <returns>Result of multiplication</returns>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.Multiply(UnityEngine.Matrix4x4@,UnityEngine.Vector4@)">
            <summary>
            Multiplies matrix by vector. Reulst vector is matrix*vector.
            </summary>
            <param name="matrix">Matrix to multiply</param>
            <param name="vector">Vector to multiply</param>
            <returns>Result of multiplication</returns>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: scaling, rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: scaling, rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(System.Single,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: uniform scaling, rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(System.Single,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates transformation matrix. Transformation order is: uniform scaling, rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: scaling, moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: scaling, moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: uniform scaling, moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateSRT(System.Single,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: uniform scaling, moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRT(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRT(UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: rotation, translation.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRT(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRT(UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation order is: moving to rotation origin, rotation, moving to translation point.
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateST(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation includes scaling and translation (order is unimportant).
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateST(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a transformation matrix. Transformation includes scaling and translation (order is unimportant).
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationFromColumns(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates rotation matrix from 3 vectors (vectors are columns of the matrix)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateRotationFromColumns(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates rotation matrix from 3 vectors (vectors are columns of the matrix)
            </summary>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadowDirectional(Dest.Math.Plane3,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates directional light shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="dirLightOppositeDirection">Light source is a directional light and parameter contains
            opposite direction of directional light (e.g. if light direction is L, caller must pass -L as a parameter)</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadowDirectional(Dest.Math.Plane3@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates directional light shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="dirLightOppositeDirection">Light source is a directional light and parameter contains
            opposite direction of directional light (e.g. if light direction is L, caller must pass -L as a parameter)</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadowPoint(Dest.Math.Plane3,UnityEngine.Vector3,UnityEngine.Matrix4x4@)">
            <summary>
            Creates point light shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="pointLightPosition">Light source is a point light and parameter contains
            position of a point light</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadowPoint(Dest.Math.Plane3@,UnityEngine.Vector3@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates point light shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="pointLightPosition">Light source is a point light and parameter contains
            position of a point light</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadow(Dest.Math.Plane3,UnityEngine.Vector4,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a generic shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="lightData">If w component is 0.0f, then light source is directional light and
            x,y,z components contain opposite direction of directional light. If w component is 1.0f
            then source is point light and x,y,z components contain position of point light.</param>
        </member>
        <member name="M:Dest.Math.Matrix4x4ex.CreateShadow(Dest.Math.Plane3@,UnityEngine.Vector4@,UnityEngine.Matrix4x4@)">
            <summary>
            Creates a generic shadow matrix that flattens geometry into a plane.
            </summary>
            <param name="shadowPlane">Projection plane</param>
            <param name="lightData">If w component is 0.0f, then light source is directional light and
            x,y,z components contain opposite direction of directional light. If w component is 1.0f
            then source is point light and x,y,z components contain position of point light.</param>
        </member>
        <member name="M:Dest.Math.Quaternionex.DeltaTo(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Calculates difference from this quaternion to given target quaternion. I.e. if you have quaternions Q1 and Q2,
            this method will return quaternion Q such that Q2 == Q * Q1 (remember that quaternions are multiplied right-to-left).
            </summary>
        </member>
        <member name="M:Dest.Math.Quaternionex.ToStringEx(UnityEngine.Quaternion)">
            <summary>
            Returns string representation (does not round components as standard Quaternion.ToString() does)
            </summary>
        </member>
        <member name="T:Dest.Math.Rand">
            <summary>
            Implements presudo-random number generator using Xorshift128 algorithm.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.#ctor">
            <summary>
            Creates random number generator using randomized seed.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.#ctor(System.Int32)">
            <summary>
            Creates random number generator using specified seed.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.ResetSeed(System.Int32)">
            <summary>
            Resets generator using specified seed.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.GetState(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            Gets generator inner state represented by four uints. Can be used for generator serialization.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.SetState(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sets generator inner state from four uints. Can be used for generator deserialization.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextInt">
            <summary>
            Generates a random integer in the range [int.MinValue,int.MaxValue].
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextInt(System.Int32)">
            <summary>
            Generates a random integer in the range [0,max)
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextInt(System.Int32,System.Int32)">
            <summary>
            Generates a random integer in the range [min,max). max must be >= min.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextIntInclusive(System.Int32,System.Int32)">
            <summary>
            Generates a random integer in the range [min,max]. max must be >= min.
            The method simply calls NextInt(min,max+1), thus largest allowable value for max is int.MaxValue-1.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextPositiveInt">
            <summary>
            Generates a random integer in the range [0,int.MaxValue].
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextUInt">
            <summary>
            Generates a random unsigned integer in the range [0,uint.MaxValue].
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextDouble">
            <summary>
            Generates a random double in the range [0,1).
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextDouble(System.Double,System.Double)">
            <summary>
            Generates a random double in the range [min,max).
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextFloat">
            <summary>
            Generates a random float in the range [0,1).
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextFloat(System.Single,System.Single)">
            <summary>
            Generates a random float in the range [min,max).
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextBool">
            <summary>
            Generates a random bool.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.NextByte">
            <summary>
            Generates a random byte.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomColorOpaque">
            <summary>
            Generates a random opaque color.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomColorTransparent">
            <summary>
            Generates a random color with randomized alpha.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomColor32Opaque">
            <summary>
            Generates a random opaque color.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomColor32Transparent">
            <summary>
            Generates a random color with randomized alpha.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomAngleRadians">
            <summary>
            Generates a random angle [0,2*pi)
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomAngleDegrees">
            <summary>
            Generates a random angle [0,360)
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InSquare(System.Single)">
            <summary>
            Generates a random point inside the square with specified side size.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.OnSquare(System.Single)">
            <summary>
            Generates a random point on the border of the square with specified side size.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InCube(System.Single)">
            <summary>
            Generates a random point inside the cube with specified side size.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.OnCube(System.Single)">
            <summary>
            Generates a random point on the surface of the cube with specified side size.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InCircle(System.Single)">
            <summary>
            Generates a random point inside the circle with specified radius.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InCircle(System.Single,System.Single)">
            <summary>
            Generates a random point inside the ring with specified radia.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.OnCircle(System.Single)">
            <summary>
            Generates a random point on the border of the circle with specified radius.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InSphere(System.Single)">
            <summary>
            Generates a random point inside the sphere with specified radius.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.OnSphere(System.Single)">
            <summary>
            Generates a random point on the surface of the sphere with specified radius.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InTriangle(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Generates a random point inside the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.InTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Generates a random point inside the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Rand.RandomRotation">
            <summary>
            Generates a random rotation.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Length(UnityEngine.Vector2)">
            <summary>
            Returns vector length
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.LengthSqr(UnityEngine.Vector2)">
            <summary>
            Returns vector squared length
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.DotPerp(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns x0*y1 - y0*x1
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.DotPerp(UnityEngine.Vector2,UnityEngine.Vector2@)">
            <summary>
            Returns x0*y1 - y0*x1
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.DotPerp(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Returns x0*y1 - y0*x1
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Dot(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Dot(UnityEngine.Vector2,UnityEngine.Vector2@)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Dot(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Perp(UnityEngine.Vector2)">
            <summary>
            Returns (y,-x)
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.AngleDeg(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns angle in degrees between this vector and the target vector. Method normalizes input vectors. Result lies in [0..180] range.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.AngleRad(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns angle in radians between this vector and the target vector. Method normalizes input vectors. Result lies in [0..PI] range.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Normalize(UnityEngine.Vector2@,System.Single)">
            <summary>
            Normalizes given vector and returns it's length before normalization.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.SetLength(UnityEngine.Vector2@,System.Single,System.Single)">
            <summary>
            Sets vector length to the given value. Returns new vector length or 0 if vector's initial length is less than epsilon.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.GrowLength(UnityEngine.Vector2@,System.Single,System.Single)">
            <summary>
            Changes vector length adding given value. Returns new vector length or 0 if vector's initial length is less than epsilon.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.Replicate(System.Single)">
            <summary>
            Creates a vector with all components equal to value
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.ToVector3XY(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 to Vector3, copying x and y components of Vector2 to x and y components of Vector3 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.ToVector3XZ(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 to Vector3, copying x and y components of Vector2 to x and z components of Vector3 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.ToVector3YZ(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 to Vector3, copying x and y components of Vector2 to y and z components of Vector3 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector2ex.ToStringEx(UnityEngine.Vector2)">
            <summary>
            Returns string representation (does not round components as standard Vector2.ToString() does)
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Length(UnityEngine.Vector3)">
            <summary>
            Returns vector length
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.LengthSqr(UnityEngine.Vector3)">
            <summary>
            Returns vector squared length
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Dot(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Dot(UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Dot(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Vector dot product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.AngleDeg(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns angle in degrees between this vector and the target vector. Method normalizes input vectors. Result lies in [0..180] range.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.AngleRad(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns angle in radians between this vector and the target vector. Method normalizes input vectors. Result lies in [0..PI] range.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.SignedAngleDeg(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns signed angle in degrees between this vector and the target vector. Method normalizes input vectors. Result lies in [-180..180] range.
            </summary>
            <param name="normal">Vector which defines world 'up'</param>
        </member>
        <member name="M:Dest.Math.Vector3ex.SignedAngleRad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns signed angle in radians between this vector and the target vector. Method normalizes input vectors. Reults lies in [-PI..PI] range.
            </summary>
            <param name="normal">Vector which defines world 'up'</param>
        </member>
        <member name="M:Dest.Math.Vector3ex.Cross(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Vector cross product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Cross(UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Vector cross product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Cross(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Vector cross product
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.UnitCross(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns normalized cross product of vectors
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.UnitCross(UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Returns normalized cross product of vectors
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.UnitCross(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns normalized cross product of vectors
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Normalize(UnityEngine.Vector3@,System.Single)">
            <summary>
            Normalizes given vector and returns it's length before normalization.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.SetLength(UnityEngine.Vector3@,System.Single,System.Single)">
            <summary>
            Sets vector length to the given value. Returns new vector length or 0 if vector's initial length is less than epsilon.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.GrowLength(UnityEngine.Vector3@,System.Single,System.Single)">
            <summary>
            Changes vector length adding given value. Returns new vector length or 0 if vector's initial length is less than epsilon.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.Replicate(System.Single)">
            <summary>
            Creates a vector with all components equal to value
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.CreateOrthonormalBasis(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Input W must be a unit-length vector. The output vectors {U,V} are
            unit length and mutually perpendicular, and {U,V,W} is an orthonormal basis.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.SameDirection(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns true if Dot(value0,value1) > 0
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.ToVector2XY(UnityEngine.Vector3)">
            <summary>
            Converts Vector3 to Vector2, copying x and y components of Vector3 to x and y components of Vector2 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.ToVector2XZ(UnityEngine.Vector3)">
            <summary>
            Converts Vector3 to Vector2, copying x and z components of Vector3 to x and y components of Vector2 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.ToVector2YZ(UnityEngine.Vector3)">
            <summary>
            Converts Vector3 to Vector2, copying y and z components of Vector3 to x and y components of Vector2 respectively.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.ToVector2(UnityEngine.Vector3,Dest.Math.ProjectionPlanes)">
            <summary>
            Converts Vector3 to Vector2 using specified projection plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.GetProjectionPlane(UnityEngine.Vector3)">
            <summary>
            Returns most appropriate projection plane considering vector as a normal (e.g. if y component is largest, then XZ plane is returned).
            </summary>
        </member>
        <member name="M:Dest.Math.Vector3ex.ToStringEx(UnityEngine.Vector3)">
            <summary>
            Returns string representation (does not round components as standard Vector3.ToString() does)
            </summary>
        </member>
        <member name="F:Dest.Math.BrentsRoot.X">
            <summary>
            Function root
            </summary>
        </member>
        <member name="F:Dest.Math.BrentsRoot.Iterations">
            <summary>
            Number of cycles in the inner loop which were performed to find the root.
            </summary>
        </member>
        <member name="F:Dest.Math.BrentsRoot.ExceededMaxIterations">
            <summary>
            True when inner loop exceeds maxIterations variable (in which case root is assigned current approximation), false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.BrentsMethod(System.Func{System.Single,System.Single},System.Single,System.Single,Dest.Math.BrentsRoot@,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is an implementation of Brent's
            Method for computing a root of a function on an interval [x0,x1] for
            which f(x0)*f(x1) &lt; 0 (i.e. values of the function must have
            different signs on interval ends).  The method uses inverse quadratic interpolation
            to generate a root estimate but falls back to inverse linear
            interpolation (secant method) if necessary.  Moreover, based on
            previous iterates, the method will fall back to bisection when it
            appears the interpolated estimate is not of sufficient quality.
            
            This will compute a root, if any, on the interval [x0,x1].  The function returns
            'true' when the root is found, in which case 'BrentsRoot.X' is the root. The function
            returns 'false' when the interval is invalid (x1 &lt;= x0) or when the interval
            does not bound a root (f(x0)*f(x1) > 0).
            </summary>
            <param name="function">The function whose root is desired. The function accepts one real number and returns real number.</param>
            <param name="x0">Interval left border</param>
            <param name="x1">Interval right border</param>
            <param name="root">Out parameter containing root of the function.</param>
            <param name="maxIterations">The maximum number of iterations used to locate a root. Should be positive number.</param>
            <param name="negativeTolerance">The root estimate x is accepted when the function value f(x)
            satisfies negativeTolerance &lt;= f(x) &lt;= positiveTolerance. negativeTolerance must be non-positive.</param>
            <param name="positiveTolerance">The root estimate x is accepted when the function value f(x)
            satisfies negativeTolerance &lt;= f(x) &lt;= positiveTolerance. positiveTolerance must be non-negative.</param>
            <param name="stepTolerance">Brent's Method requires additional tests before an interpolated
            x-value is accepted as the next root estimate.  One of these tests
            compares the difference of consecutive iterates and requires it
            to be larger than a user-specified x-tolerance (to ensure progress
            is made).  This parameter is that tolerance.</param>
            <param name="segmentTolerance">The root search is allowed to terminate when the current
            subinterval [xsub0,xsub1] is sufficiently small, say,
            |xsub1 - xsub0| &lt;= tolerance.  This parameter is that tolerance.</param>
            <returns>True if root is found, false otherwise.</returns>
        </member>
        <member name="M:Dest.Math.RootFinder.Linear(System.Single,System.Single,System.Single@,System.Single)">
            <summary>
            Linear equations: c1*x+c0 = 0
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.Quadratic(System.Single,System.Single,System.Single,Dest.Math.QuadraticRoots@,System.Single)">
            <summary>
            Quadratic equations: c2*x^2+c1*x+c0 = 0
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.Cubic(System.Single,System.Single,System.Single,System.Single,Dest.Math.CubicRoots@,System.Single)">
            <summary>
            Cubic equations: c3*x^3+c2*x^2+c1*x+c0 = 0
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.Quartic(System.Single,System.Single,System.Single,System.Single,System.Single,Dest.Math.QuarticRoots@,System.Single)">
            <summary>
            Quartic equations: c4*x^4+c3*x^3+c2*x^2+c1*x+c0 = 0
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.PolynomialBound(Dest.Math.Polynomial,System.Single)">
            <summary>
            Gets roots bound of the given polynomial or -1 if polynomial is constant.
            </summary>
        </member>
        <member name="M:Dest.Math.RootFinder.Polynomial(Dest.Math.Polynomial,System.Single,System.Single,System.Single[]@,System.Int32,System.Single)">
            <summary>
            General polynomial equation: Σ(c_i * x^i), where i=[0..degree]. Finds roots in the interval [xMin..xMax].
            </summary>
            <param name="poly">Polynomial whose roots to be found</param>
            <param name="xMin">Interval left border</param>
            <param name="xMax">Interval right border</param>
            <param name="roots">Roots of the polynomial</param>
            <param name="digits">Accuracy</param>
            <param name="epsilon">Small positive number</param>
        </member>
        <member name="M:Dest.Math.RootFinder.Polynomial(Dest.Math.Polynomial,System.Single[]@,System.Int32,System.Single)">
            <summary>
            General polynomial equation: Σ(c_i * x^i), where i=[0..degree].
            </summary>
            <param name="poly">Polynomial whose roots to be found</param>
            <param name="roots">Roots of the polynomial</param>
            <param name="digits">Accuracy</param>
            <param name="epsilon">Small positive number</param>
        </member>
        <member name="M:Dest.Math.EigenData.GetEigenvalue(System.Int32)">
            <summary>
            Gets eigenvalue. Index must be 0&lt;=index&lt;Size
            </summary>
        </member>
        <member name="M:Dest.Math.EigenData.GetEigenvector2(System.Int32)">
            <summary>
            Gets eigenvector. Use this only if eigen system was of 2x2 size. Index must be 0&lt;=index&lt;Size
            </summary>
        </member>
        <member name="M:Dest.Math.EigenData.GetEigenvector3(System.Int32)">
            <summary>
            Gets eigenvector. Use this only if eigen system was of 3x3 size. Index must be 0&lt;=index&lt;Size
            </summary>
        </member>
        <member name="M:Dest.Math.EigenData.GetEigenvector(System.Int32)">
            <summary>
            Gets eigenvector. Size of the resulting array is equal to eigen system size. Index must be 0&lt;=index&lt;Size
            </summary>
        </member>
        <member name="M:Dest.Math.EigenData.GetEigenvector(System.Int32,System.Single[])">
            <summary>
            Gets eigenvector. Size of the array must match eigen system size. Method will fill in components of eigenvector into the array.
            Index must be 0&lt;=index&lt;Size
            </summary>
        </member>
        <member name="P:Dest.Math.EigenData.Size">
            <summary>
            Eigen system size
            </summary>
        </member>
        <member name="M:Dest.Math.EigenDecomposition.QLAlgorithm(System.Single[],System.Single[],System.Single[0:,0:])">
            <summary>
            QL algorithm with implicit shifting.  This function is called for tridiagonal matrices.
            </summary>
        </member>
        <member name="M:Dest.Math.EigenDecomposition.IncreasingSort(System.Single[],System.Single[],System.Single[0:,0:],System.Boolean@)">
            <summary>
            Sort eigenvalues from smallest to largest.
            </summary>
        </member>
        <member name="M:Dest.Math.EigenDecomposition.DecreasingSort(System.Single[],System.Single[],System.Single[0:,0:],System.Boolean@)">
            <summary>
            Sort eigenvalues from largest to smallest.
            </summary>
        </member>
        <member name="M:Dest.Math.EigenDecomposition.Solve(System.Single[0:,0:],System.Boolean)">
            <summary>
            Solve the eigensystem. Set increasingSort to true when you want
            the eigenvalues to be sorted in increasing order (from smallest to largest);
            otherwise, the eigenvalues are sorted in decreasing order (from largest to smallest).
            </summary>
            <param name="symmetricSquareMatrix">Matrix must be square and symmetric. Matrix size must be >= 2.</param>
            <param name="increasingSort">true for increasing sort, false for decreasing sort.</param>
            <returns>Data containing eigenvalues and eigenvectors or null if matrix is non-square or size is &lt; 2.</returns>
        </member>
        <member name="M:Dest.Math.Integrator.TrapezoidRule(System.Func{System.Single,System.Single},System.Single,System.Single,System.Int32)">
            <summary>
            Evaluates integral ∫f(x)dx on [a,b] interval using trapezoidal rule.
            sampleCount must be greater or equal to 2.
            </summary>
        </member>
        <member name="M:Dest.Math.Integrator.RombergIntegral(System.Func{System.Single,System.Single},System.Single,System.Single,System.Int32)">
            <summary>
            Evaluates integral ∫f(x)dx on [a,b] interval using Romberg's method.
            Integration order must be positive (order > 0).
            </summary>
        </member>
        <member name="M:Dest.Math.Integrator.GaussianQuadrature(System.Func{System.Single,System.Single},System.Single,System.Single)">
            <summary>
            Evaluates integral ∫f(x)dx on [a,b] interval using Gaussian quadrature rule (five Legendre polynomials).
            </summary>
        </member>
        <member name="M:Dest.Math.LinearSystem.Solve2(System.Single[0:,0:],System.Single[],System.Single[]@,System.Single)">
            <summary>
            Solves linear system A*X=B with two equations and two unknowns.
            </summary>
            <param name="A">float[2,2] array containing equations coefficients</param>
            <param name="B">float[2] array containing constants</param>
            <param name="X">Out float[2] array contaning the solution or null if system has no solution</param>
            <param name="zeroTolerance">Small positive number</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.Solve2(System.Single[0:,0:],System.Single[],UnityEngine.Vector2@,System.Single)">
            <summary>
            Solves linear system A*X=B with two equations and two unknowns.
            </summary>
            <param name="A">float[2,2] array containing equations coefficients</param>
            <param name="B">float[2] array containing constants</param>
            <param name="X">Out vector contaning the solution or zero vector if system has no solution</param>
            <param name="zeroTolerance">Small positive number</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.Solve3(System.Single[0:,0:],System.Single[],System.Single[]@,System.Single)">
            <summary>
            Solves linear system A*X=B with three equations and three unknowns.
            </summary>
            <param name="A">float[3,3] array containing equations coefficients</param>
            <param name="B">float[3] array containing constants</param>
            <param name="X">Out float[3] array contaning the solution or null if system has no solution</param>
            <param name="zeroTolerance">Small positive number</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.Solve3(System.Single[0:,0:],System.Single[],UnityEngine.Vector3@,System.Single)">
            <summary>
            Solves linear system A*X=B with three equations and three unknowns.
            </summary>
            <param name="A">float[3,3] array containing equations coefficients</param>
            <param name="B">float[3] array containing constants</param>
            <param name="X">Out vector contaning the solution or zero vector if system has no solution</param>
            <param name="zeroTolerance">Small positive number</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.Solve(System.Single[0:,0:],System.Single[],System.Single[]@)">
            <summary>
            Solves linear system A*X=B with N equations and N unknowns.
            </summary>
            <param name="A">float[N,N] array containing equations coefficients</param>
            <param name="B">float[N] array containing constants</param>
            <param name="X">Out float[N] array contaning the solution or null if system has no solution</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.SolveTridiagonal(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[]@)">
            <summary>
            Solves linear system A*X=B, where A is tridiagonal matrix.
            </summary>
            <param name="A">Lower diagonal float[N-1]</param>
            <param name="B">Main  diagonal float[N]</param>
            <param name="C">Upper diagonal float[N-1]</param>
            <param name="R">Right-hand side float[N]</param>
            <param name="U">Out float[N] containing the solution or null if system has no solution</param>
            <returns>True if solution is found, false otherwise</returns>
        </member>
        <member name="M:Dest.Math.LinearSystem.Inverse(System.Single[0:,0:],System.Single[0:,0:]@)">
            <summary>
            Inverses square matrix A. Returns inversed matrix in invA parameter (invA is null if A has no inverse).
            </summary>
        </member>
        <member name="T:Dest.Math.OdeFunction">
            <summary>
            The system is y'(t) = F(t,y). The dimension of y is passed to the constructor of OdeSolver.
            </summary>
        </member>
        <member name="T:Dest.Math.AAB2">
            <summary>
            Axis aligned bounding box in 2D
            </summary>
        </member>
        <member name="F:Dest.Math.AAB2.Min">
            <summary>
            Min point
            </summary>
        </member>
        <member name="F:Dest.Math.AAB2.Max">
            <summary>
            Max point
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates AAB from min and max points.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates AAB from min and max points.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates AAB. The caller must ensure that xmin &lt;= xmax and ymin &lt;= ymax.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.op_Implicit(Dest.Math.AAB2)~UnityEngine.Rect">
            <summary>
            Converts AAB2 to UnityEngine.Rect. Code is Rect.MinMaxRect(value.Min.x, value.Min.y, value.Max.x, value.Max.y)
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.op_Implicit(UnityEngine.Rect)~Dest.Math.AAB2">
            <summary>
            Converts UnityEngine.Rect to AAB2. Code is AAB2() { Min = new Vector2(value.xMin, value.yMin), Max = new Vector2(value.xMax, value.yMax) }
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromPoint(UnityEngine.Vector2@)">
            <summary>
            Creates AAB from single point. Min and Max are set to point. Use Include() method to grow the resulting AAB.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromPoint(UnityEngine.Vector2)">
            <summary>
            Creates AAB from single point. Min and Max are set to point. Use Include() method to grow the resulting AAB.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromTwoPoints(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Computes AAB from two points extracting min and max values. In case min and max points are known, use constructor instead.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromTwoPoints(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes AAB from two points. In case min and max points are known, use constructor instead.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromPoints(System.Collections.Generic.IEnumerable{UnityEngine.Vector2})">
            <summary>
            Computes AAB from the a of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB2().
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromPoints(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Computes AAB from a set of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB2().
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CreateFromPoints(UnityEngine.Vector2[])">
            <summary>
            Computes AAB from a set of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB2()
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CalcCenterExtents(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Computes box center and extents (half sizes)
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CalcVertices(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates 4 box corners.
            </summary>
            <param name="vertex0">Vector2(Min.x, Min.y)</param>
            <param name="vertex1">Vector2(Max.x, Min.y)</param>
            <param name="vertex2">Vector2(Max.x, Max.y)</param>
            <param name="vertex3">Vector2(Min.x, Max.y)</param>
        </member>
        <member name="M:Dest.Math.AAB2.CalcVertices">
            <summary>
            Calculates 4 box corners and returns them in an allocated array.
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CalcVertices(UnityEngine.Vector2[])">
            <summary>
            Calculates 4 box corners and fills the input array with them (array length must be 4).
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.CalcArea">
            <summary>
            Returns box area
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Contains(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the aab
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Contains(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the aab
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Include(UnityEngine.Vector2@)">
            <summary>
            Enlarges the aab to include the point. If the point is inside the AAB does nothing.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Include(UnityEngine.Vector2)">
            <summary>
            Enlarges the aab to include the point. If the point is inside the AAB does nothing.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Include(Dest.Math.AAB2@)">
            <summary>
            Enlarges the aab so it includes another aab.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.Include(Dest.Math.AAB2)">
            <summary>
            Enlarges the aab so it includes another aab.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Box2">
            <summary>
            A box has center C, axis directions A0 and A1 (perpendicular and
            unit-length vectors), and extents e0 and e1 (nonnegative numbers).
            A point X = C + y0*A0 + y1*A1 is inside or on the box whenever
            |y[i]| &lt;= e[i] for all i.
            </summary>
        </member>
        <member name="F:Dest.Math.Box2.Center">
            <summary>
            Box center
            </summary>
        </member>
        <member name="F:Dest.Math.Box2.Axis0">
            <summary>
            First box axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Box2.Axis1">
            <summary>
            Second box axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Box2.Extents">
            <summary>
            Extents (half sizes) along Axis0 and Axis1. Must be non-negative!
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates new Box2 instance.
            </summary>
            <param name="center">Box center</param>
            <param name="axis0">First box axis. Must be unit length!</param>
            <param name="axis1">Second box axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0 and Axis1. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Box2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates new Box2 instance.
            </summary>
            <param name="center">Box center</param>
            <param name="axis0">First box axis. Must be unit length!</param>
            <param name="axis1">Second box axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0 and Axis1. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Box2.#ctor(Dest.Math.AAB2@)">
            <summary>
            Creates Box2 from AxisAlignedBox2
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.#ctor(Dest.Math.AAB2)">
            <summary>
            Creates Box2 from AxisAlignedBox2
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.CreateFromPoints(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Computes oriented bounding box from a set of points.
            If a set is empty returns new Box2().
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.GetAxis(System.Int32)">
            <summary>
            Returns axis by index (0, 1)
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.CalcVertices(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates 4 box corners. extAxis[i] is Axis[i]*Extent[i], i=0,1.
            </summary>
            <param name="vertex0">Center - extAxis0 - extAxis1</param>
            <param name="vertex1">Center + extAxis0 - extAxis1</param>
            <param name="vertex2">Center + extAxis0 + extAxis1</param>
            <param name="vertex3">Center - extAxis0 + extAxis1</param>
        </member>
        <member name="M:Dest.Math.Box2.CalcVertices">
            <summary>
            Calculates 4 box corners and returns them in an allocated array.
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.CalcVertices(UnityEngine.Vector2[])">
            <summary>
            Calculates 4 box corners and fills the input array with them (array length must be 4).
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.CalcArea">
            <summary>
            Returns area of the box as Extents.x * Extents.y * 4
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.Contains(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the box
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.Contains(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the box
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.Include(Dest.Math.Box2@)">
            <summary>
            Enlarges the box so it includes another box.
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.Include(Dest.Math.Box2)">
            <summary>
            Enlarges the box so it includes another box.
            </summary>
        </member>
        <member name="M:Dest.Math.Box2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Circle2">
            <summary>
            Circle is described by the formula |X - C|^2 = r^2,
            where C - circle center, r - circle radius
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2.Center">
            <summary>
            Circle center
            </summary>
        </member>
        <member name="F:Dest.Math.Circle2.Radius">
            <summary>
            Circle radius
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.#ctor(UnityEngine.Vector2@,System.Single)">
            <summary>
            Creates circle from center and radius
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.#ctor(UnityEngine.Vector2,System.Single)">
            <summary>
            Creates circle from center and radius
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateFromPointsAAB(System.Collections.Generic.IEnumerable{UnityEngine.Vector2})">
            <summary>
            Computes bounding circle from a set of points.
            First compute the axis-aligned bounding box of the points, then compute the circle containing the box.
            If a set is empty returns new Circle2().
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateFromPointsAAB(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Computes bounding circle from a set of points.
            First compute the axis-aligned bounding box of the points, then compute the circle containing the box.
            If a set is empty returns new Circle2().
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateFromPointsAverage(System.Collections.Generic.IEnumerable{UnityEngine.Vector2})">
            <summary>
            Computes bounding circle from a set of points.
            Compute the smallest circle whose center is the average of a point set.
            If a set is empty returns new Circle2().
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateFromPointsAverage(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Computes bounding circle from a set of points.
            Compute the smallest circle whose center is the average of a point set.
            If a set is empty returns new Circle2().
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateCircumscribed(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,Dest.Math.Circle2@)">
            <summary>
            Creates circle which is circumscribed around triangle.
            Returns 'true' if circle has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CreateInscribed(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,Dest.Math.Circle2@)">
            <summary>
            Creates circle which is insribed into triangle.
            Returns 'true' if circle has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CalcPerimeter">
            <summary>
            Returns circle perimeter
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.CalcArea">
            <summary>
            Returns circle area
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Eval(System.Single)">
            <summary>
            Evaluates circle using formula X = C + R*[cos(t), sin(t)]
            where t is an angle in [0,2*pi).
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Circle2.Eval(System.Single,System.Single)">
            <summary>
            Evaluates disk using formula X = C + radius*[cos(t), sin(t)]
            where t is an angle in [0,2*pi).
            </summary>
            <param name="t">Evaluation parameter</param>
            <param name="radius">Evaluation radius</param>
        </member>
        <member name="M:Dest.Math.Circle2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Contains(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the circle
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Contains(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the circle
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Include(Dest.Math.Circle2@)">
            <summary>
            Enlarges the circle so it includes another circle.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.Include(Dest.Math.Circle2)">
            <summary>
            Enlarges the circle so it includes another circle.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Line2">
            <summary>
            The line is represented as P+t*D where P is the line origin, D is a
            unit-length direction vector, and t is any real number.  The user must
            ensure that D is indeed unit length.
            </summary>
        </member>
        <member name="F:Dest.Math.Line2.Center">
            <summary>
            Line origin
            </summary>
        </member>
        <member name="F:Dest.Math.Line2.Direction">
            <summary>
            Line direction. Must be unit length!
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates the line
            </summary>
            <param name="center">Line origin</param>
            <param name="direction">Line direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Line2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates the line
            </summary>
            <param name="center">Line origin</param>
            <param name="direction">Line direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Line2.CreateFromTwoPoints(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates the line. Origin is p0, Direction is Normalized(p1-p0).
            </summary>
            <param name="p0">First point</param>
            <param name="p1">Second point</param>
        </member>
        <member name="M:Dest.Math.Line2.CreateFromTwoPoints(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates the line. Origin is p0, Direction is Normalized(p1-p0).
            </summary>
            <param name="p0">First point</param>
            <param name="p1">Second point</param>
        </member>
        <member name="M:Dest.Math.Line2.CreatePerpToLineTrhoughPoint(Dest.Math.Line2,UnityEngine.Vector2)">
            <summary>
            Creates the line which is perpendicular to given line and goes through given point.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.CreateBetweenAndEquidistantToPoints(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates the line which is perpendicular to segment [point0,point1] and line origin goes through middle of the segment.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.CreateParallelToGivenLineAtGivenDistance(Dest.Math.Line2,System.Single)">
            <summary>
            Creates the line which is parallel to given line on the specified distance from given line.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.Eval(System.Single)">
            <summary>
            Evaluates line using P+t*D formula, where P is the line origin, D is a
            unit-length direction vector, t is parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Line2.SignedDistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns signed distance to a point. Where positive distance is on the right of the line,
            zero is on the line, negative on the left side of the line.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySide(UnityEngine.Vector2,System.Single)">
            <summary>
            Determines on which side of the line a point is. Returns +1 if a point
            is to the right of the line, 0 if it's on the line, -1 if it's on the left.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySideNegative(UnityEngine.Vector2,System.Single)">
            <summary>
            Returns true if a point is on the negative side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySidePositive(UnityEngine.Vector2,System.Single)">
            <summary>
            Returns true if a point is on the positive side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySide(Dest.Math.Box2@,System.Single)">
            <summary>
            Determines on which side of the line a box is. Returns +1 if a box
            is to the right of the line, 0 if it's intersecting the line, -1 if it's on the left.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySideNegative(Dest.Math.Box2@,System.Single)">
            <summary>
            Returns true if a box is on the negative side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySidePositive(Dest.Math.Box2@,System.Single)">
            <summary>
            Returns true if a box is on the positive side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySide(Dest.Math.AAB2@,System.Single)">
            <summary>
            Determines on which side of the line a box is. Returns +1 if a box
            is to the right of the line, 0 if it's intersecting the line, -1 if it's on the left.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySideNegative(Dest.Math.AAB2@,System.Single)">
            <summary>
            Returns true if a box is on the negative side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySidePositive(Dest.Math.AAB2@,System.Single)">
            <summary>
            Returns true if a box is on the positive side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySide(Dest.Math.Circle2@,System.Single)">
            <summary>
            Determines on which side of the line a circle is. Returns +1 if a circle
            is to the right of the line, 0 if it's intersecting the line, -1 if it's on the left.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySideNegative(Dest.Math.Circle2@,System.Single)">
            <summary>
            Returns true if a circle is on the negative side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.QuerySidePositive(Dest.Math.Circle2@,System.Single)">
            <summary>
            Returns true if a circle is on the positive side of the line, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.AngleBetweenTwoLines(Dest.Math.Line2,System.Boolean)">
            <summary>
            Returns angle between this line's direction and another line's direction as: arccos(dot(this.Direction,another.Direction))
            If acuteAngleDesired is true, then in resulting angle is > pi/2, then result is transformed to be pi-angle.
            </summary>
        </member>
        <member name="M:Dest.Math.Line2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Edge2">
            <summary>
            Polygon2 edge
            </summary>
        </member>
        <member name="F:Dest.Math.Edge2.Point0">
            <summary>
            Edge start vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Edge2.Point1">
            <summary>
            Edge end vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Edge2.Direction">
            <summary>
            Unit length direction vector
            </summary>
        </member>
        <member name="F:Dest.Math.Edge2.Normal">
            <summary>
            Unit length normal vector
            </summary>
        </member>
        <member name="F:Dest.Math.Edge2.Length">
            <summary>
            Edge length
            </summary>
        </member>
        <member name="T:Dest.Math.Polygon2">
            <summary>
            Represents 2d polygon (vertex count must be >= 3).
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.#ctor(UnityEngine.Vector2[])">
            <summary>
            Creates polygon from an array of vertices (array is copied)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.#ctor(System.Int32)">
            <summary>
            Creates polygon setting number of vertices. Vertices then
            can be filled using indexer.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.CreateProjected(Dest.Math.Polygon3,Dest.Math.ProjectionPlanes)">
            <summary>
            Creates Polygon2 instance from Polygon3 instance by projecting
            Polygon3 vertices onto one of three base planes (on practice just
            dropping one of the coordinates).
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.GetEdge(System.Int32)">
            <summary>
            Returns polygon edge
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.UpdateEdges">
            <summary>
            Updates all polygon edges. Use after vertex change.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.UpdateEdge(System.Int32)">
            <summary>
            Updates certain polygon edge. Use after vertex change.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.CalcCenter">
            <summary>
            Returns polygon center
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.CalcPerimeter">
            <summary>
            Returns polygon perimeter length
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.CalcArea">
            <summary>
            Returns polygon area (polygon must be simple, i.e. without self-intersections).
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.IsConvex(Dest.Math.Orientations@,System.Single)">
            <summary>
            Tests if the polygon is convex and returns orientation
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.IsConvex(System.Single)">
            <summary>
            Tests if the polygon is convex
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.HasZeroCorners(System.Single)">
            <summary>
            Returns true if polygon contains some edges which have zero angle between them.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ReverseVertices">
            <summary>
            Reverses polygon vertex order
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexQuadCCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the convex CCW 4-sided polygon (the caller must ensure that polygon is indeed CCW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexQuadCCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the convex CCW 4-sided polygon (the caller must ensure that polygon is indeed CCW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexQuadCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the convex CW 4-sided polygon (the caller must ensure that polygon is indeed CW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexQuadCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the convex CW 4-sided polygon (the caller must ensure that polygon is indeed CW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexCCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the convex CCW polygon (the caller must ensure that polygon is indeed CCW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexCCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the convex CCW polygon (the caller must ensure that polygon is indeed CCW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the convex CW polygon (the caller must ensure that polygon is indeed CW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsConvexCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the convex CW polygon (the caller must ensure that polygon is indeed CW ordered)
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsSimple(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the simple polygon (i.e. without self intersection). Non-convex polygons are allowed, orientation is irrelevant.
            Note that points which are on border may be classified differently depending on the point position.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ContainsSimple(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the simple polygon (i.e. without self intersection). Non-convex polygons are allowed, orientation is irrelevant.
            Note that points which are on border may be classified differently depending on the point position.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ToSegmentArray">
            <summary>
            Converts the polygon to segment array
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon2.Vertices">
            <summary>
            Gets vertices array (do not change the data, use only for traversal)
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon2.Edges">
            <summary>
            Gets edges array (do not change the data, use only for traversal)
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon2.VertexCount">
            <summary>
            Polygon vertex count
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon2.Item(System.Int32)">
            <summary>
            Gets or sets polygon vertex
            </summary>
        </member>
        <member name="T:Dest.Math.Ray2">
            <summary>
            The ray is represented as P+t*D, where P is the ray origin, D is a
            unit-length direction vector, and t &gt;= 0.  The user must ensure that D
            is indeed unit length.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2.Center">
            <summary>
            Ray origin
            </summary>
        </member>
        <member name="F:Dest.Math.Ray2.Direction">
            <summary>
            Ray direction. Must be unit length!
            </summary>
        </member>
        <member name="M:Dest.Math.Ray2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates the ray
            </summary>
            <param name="center">Ray origin</param>
            <param name="direction">Ray direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Ray2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates the ray
            </summary>
            <param name="center">Ray origin</param>
            <param name="direction">Ray direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Ray2.Eval(System.Single)">
            <summary>
            Evaluates ray using P+t*D formula, where P is the ray origin, D is a
            unit-length direction vector, t is parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Ray2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Ray2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Ray2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Segment2">
             <summary>
             The segment is represented as (1-s)*P0+s*P1, where P0 and P1 are the
             endpoints of the segment and 0 &lt;= s &lt;= 1.
            
             Some algorithms involving segments might prefer a centered
             representation similar to how oriented bounding boxes are defined.
             This representation is C+t*D, where C = (P0+P1)/2 is the center of
             the segment, D = (P1-P0)/Length(P1-P0) is a unit-length direction
             vector for the segment, and |t| &lt;= e.  The value e = Length(P1-P0)/2
             is the 'extent' (or radius or half-length) of the segment.
             </summary>
        </member>
        <member name="F:Dest.Math.Segment2.P0">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2.P1">
            <summary>
            End point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2.Center">
            <summary>
            Segment center
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2.Direction">
            <summary>
            Segment direction. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Segment2.Extent">
            <summary>
            Segment half-length
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            The constructor computes Center, Dircetion, and Extent from P0 and P1.
            </summary>
            <param name="p0">Segment start point</param>
            <param name="p1">Segment end point</param>
        </member>
        <member name="M:Dest.Math.Segment2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            The constructor computes Center, Dircetion, and Extent from P0 and P1.
            </summary>
            <param name="p0">Segment start point</param>
            <param name="p1">Segment end point</param>
        </member>
        <member name="M:Dest.Math.Segment2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@,System.Single)">
            <summary>
            The constructor computes P0 and P1 from Center, Direction, and Extent.
            </summary>
            <param name="center">Center of the segment</param>
            <param name="direction">Direction of the segment. Must be unit length!</param>
            <param name="extent">Half-length of the segment</param>
        </member>
        <member name="M:Dest.Math.Segment2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            The constructor computes P0 and P1 from Center, Direction, and Extent.
            </summary>
            <param name="center">Center of the segment</param>
            <param name="direction">Direction of the segment. Must be unit length!</param>
            <param name="extent">Half-length of the segment</param>
        </member>
        <member name="M:Dest.Math.Segment2.SetEndpoints(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Initializes segments from endpoints.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.SetCenterDirectionExtent(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Initializes segment from center, direction and extent.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.CalcCenterDirectionExtent">
            <summary>
            Call this function when you change P0 or P1.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.CalcEndPoints">
            <summary>
            Call this function when you change Center, Direction, or Extent.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.Eval(System.Single)">
            <summary>
            Evaluates segment using (1-s)*P0+s*P1 formula, where P0 and P1
            are endpoints, s is parameter.
            </summary>
            <param name="s">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Segment2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Segment2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle2.V0">
            <summary>
            First triangle vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle2.V1">
            <summary>
            Second triangle vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle2.V2">
            <summary>
            Third triangle vertex
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.#ctor(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Creates Triangle2 from 3 vertices
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.#ctor(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Creates Triangle2 from 3 vertices
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcEdge(System.Int32)">
            <summary>
            Returns triangle edge by index 0, 1 or 2
            Edge[i] = V[i+1]-V[i]
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcDeterminant">
            <summary>
            Calculates cross product of triangle edges: (V1-V0)x(V2-V0).
            If the result is positive then triangle is ordered counter clockwise,
            if the result is negative then triangle is ordered clockwise,
            if the result is zero then triangle is degenerate.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcOrientation(System.Single)">
            <summary>
            Calculates triangle orientation. See CalcDeterminant() for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcArea">
            <summary>
            Calculates area of the triangle. It's equal to Abs(Determinant())/2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcArea(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates area of the triangle defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcArea(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates area of the triangle defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesDeg">
            <summary>
            Calculates angles of the triangle in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesDeg(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates angles of the triangle defined by 3 points in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesDeg(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates angles of the triangle defined by 3 points in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesRad">
            <summary>
            Calculates angles of the triangle in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesRad(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Calculates angles of the triangle defined by 3 points in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcAnglesRad(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates angles of the triangle defined by 3 points in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.EvalBarycentric(System.Single,System.Single)">
            <summary>
            Gets point on the triangle using barycentric coordinates.
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1, c2 is calculated as 1-c0-c1.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.EvalBarycentric(UnityEngine.Vector3@)">
            <summary>
            Gets point on the triangle using barycentric coordinates. baryCoords parameter is (c0,c1,c2).
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.EvalBarycentric(UnityEngine.Vector3)">
            <summary>
            Gets point on the triangle using barycentric coordinates. baryCoords parameter is (c0,c1,c2).
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcBarycentricCoords(UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector3@)">
            <summary>
            Calculate barycentric coordinates for the input point with regarding to triangle defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcBarycentricCoords(UnityEngine.Vector2@)">
            <summary>
            Calculate barycentric coordinates for the input point regarding to the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.CalcBarycentricCoords(UnityEngine.Vector2)">
            <summary>
            Calculate barycentric coordinates for the input point regarding to the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.DistanceTo(UnityEngine.Vector2)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.QuerySideCCW(UnityEngine.Vector2,System.Single)">
            <summary>
            Determines on which side of the triangle a point is. Returns +1 if a point
            is outside of the triangle, 0 if it's on the triangle border, -1 if it's inside the triangle.
            Method must be called for CCW ordered triangles.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.QuerySideCW(UnityEngine.Vector2,System.Single)">
            <summary>
            Determines on which side of the triangle a point is. Returns +1 if a point
            is outside of the triangle, 0 if it's on the triangle border, -1 if it's inside the triangle.
            Method must be called for CW ordered triangles.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.Project(UnityEngine.Vector2)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.Contains(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the triangle (CW or CCW ordered).
            Note however that if the triangle is CCW then points which are on triangle border considered inside, but
            if the triangle is CW then points which are on triangle border considered outside.
            For consistent (and faster) test use appropriate overloads for CW and CCW triangles.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.Contains(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the triangle (CW or CCW ordered).
            Note however that if the triangle is CCW then points which are on triangle border considered inside, but
            if the triangle is CW then points which are on triangle border considered outside.
            For consistent (and faster) test use appropriate overloads for CW and CCW triangles.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.ContainsCCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the CCW triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.ContainsCCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the CCW triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.ContainsCW(UnityEngine.Vector2@)">
            <summary>
            Tests whether a point is contained by the CW triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.ContainsCW(UnityEngine.Vector2)">
            <summary>
            Tests whether a point is contained by the CW triangle
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle2.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="P:Dest.Math.Triangle2.Item(System.Int32)">
            <summary>
            Gets or sets triangle vertex by index: 0, 1 or 2
            </summary>
        </member>
        <member name="T:Dest.Math.AAB3">
            <summary>
            Axis aligned bounding box in 3D
            </summary>
        </member>
        <member name="F:Dest.Math.AAB3.Min">
            <summary>
            Min point
            </summary>
        </member>
        <member name="F:Dest.Math.AAB3.Max">
            <summary>
            Max point
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates AAB from min and max points.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates AAB from min and max points.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates AAB. The caller must ensure that xmin &lt;= xmax, ymin &lt;= ymax and zmin &lt;= zmax.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.op_Implicit(Dest.Math.AAB3)~UnityEngine.Bounds">
            <summary>
            Converts AAB3 to UnityEngine.Bounds
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.op_Implicit(UnityEngine.Bounds)~Dest.Math.AAB3">
            <summary>
            Converts UnityEngine.Bounds to AAB3
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromPoint(UnityEngine.Vector3@)">
            <summary>
            Creates AAB from single point. Min and Max are set to point. Use Include() method to grow the resulting AAB.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromPoint(UnityEngine.Vector3)">
            <summary>
            Creates AAB from single point. Min and Max are set to point. Use Include() method to grow the resulting AAB.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromTwoPoints(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Computes AAB from two points extracting min and max values. In case min and max points are known, use constructor instead.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromTwoPoints(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes AAB from two points. In case min and max points are known, use constructor instead.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromPoints(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
            <summary>
            Computes AAB from a set of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB3().
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromPoints(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Computes AAB from a set of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB3().
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CreateFromPoints(UnityEngine.Vector3[])">
            <summary>
            Computes AAB from a set of points. Method includes points from a set one by one to create the AAB.
            If a set is empty, returns new AAB3().
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CalcCenterExtents(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Computes box center and extents (half sizes)
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CalcVertices(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates 8 box corners.
            </summary>
            <param name="vertex0">Vector3(Min.x, Min.y, Min.z)</param>
            <param name="vertex1">Vector3(Max.x, Min.y, Min.z)</param>
            <param name="vertex2">Vector3(Max.x, Max.y, Min.z)</param>
            <param name="vertex3">Vector3(Min.x, Max.y, Min.z)</param>
            <param name="vertex4">Vector3(Min.x, Min.y, Max.z)</param>
            <param name="vertex5">Vector3(Max.x, Min.y, Max.z)</param>
            <param name="vertex6">Vector3(Max.x, Max.y, Max.z)</param>
            <param name="vertex7">Vector3(Min.x, Max.y, Max.z)</param>
        </member>
        <member name="M:Dest.Math.AAB3.CalcVertices">
            <summary>
            Calculates 8 box corners and returns them in an allocated array.
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CalcVertices(UnityEngine.Vector3[])">
            <summary>
            Calculates 8 box corners and fills the input array with them (array length must be 8).
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.CalcVolume">
            <summary>
            Returns box volume
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Contains(UnityEngine.Vector3@)">
            <summary>
            Tests whether a point is contained by the aab
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Contains(UnityEngine.Vector3)">
            <summary>
            Tests whether a point is contained by the aab
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Include(UnityEngine.Vector3@)">
            <summary>
            Enlarging the aab to include the point. If the point is inside the AAB does nothing.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Include(UnityEngine.Vector3)">
            <summary>
            Enlarging the aab to include the point. If the point is inside the AAB does nothing.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Include(Dest.Math.AAB3@)">
            <summary>
            Enlarges the aab so it includes another aab.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.Include(Dest.Math.AAB3)">
            <summary>
            Enlarges the aab so it includes another aab.
            </summary>
        </member>
        <member name="M:Dest.Math.AAB3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Box3">
            <summary>
            A box has center C, axis directions U[0], U[1], and U[2] (mutually
            perpendicular unit-length vectors), and extents e[0], e[1], and e[2]
            (all nonnegative numbers).  A point X = C+y[0]*U[0]+y[1]*U[1]+y[2]*U[2]
            is inside or on the box whenever |y[i]| &lt;= e[i] for all i.
            </summary>
        </member>
        <member name="F:Dest.Math.Box3.Center">
            <summary>
            Box center
            </summary>
        </member>
        <member name="F:Dest.Math.Box3.Axis0">
            <summary>
            First box axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Box3.Axis1">
            <summary>
            Second box axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Box3.Axis2">
            <summary>
            Third box axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Box3.Extents">
            <summary>
            Extents (half sizes) along Axis0, Axis1 and Axis2. Must be non-negative!
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates new Box3 instance.
            </summary>
            <param name="center">Box center</param>
            <param name="axis0">First box axis. Must be unit length!</param>
            <param name="axis1">Second box axis. Must be unit length!</param>
            <param name="axis2">Third box axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0, Axis1 and Axis2. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Box3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates new Box3 instance.
            </summary>
            <param name="center">Box center</param>
            <param name="axis0">First box axis. Must be unit length!</param>
            <param name="axis1">Second box axis. Must be unit length!</param>
            <param name="axis2">Third box axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0, Axis1 and Axis2. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Box3.#ctor(Dest.Math.AAB3@)">
            <summary>
            Create Box3 from AxisAlignedBox3
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.#ctor(Dest.Math.AAB3)">
            <summary>
            Create Box3 from AxisAlignedBox3
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.CreateFromPoints(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Computes oriented bounding box from a set of points.
            If a set is empty returns new Box3().
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.GetAxis(System.Int32)">
            <summary>
            Returns axis by index (0, 1, 2)
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.CalcVertices(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates 8 box corners. extAxis[i] is Axis[i]*Extent[i], i=0,1,2
            </summary>
            <param name="vertex0">Center - extAxis0 - extAxis1 - extAxis2</param>
            <param name="vertex1">Center + extAxis0 - extAxis1 - extAxis2</param>
            <param name="vertex2">Center + extAxis0 + extAxis1 - extAxis2</param>
            <param name="vertex3">Center - extAxis0 + extAxis1 - extAxis2</param>
            <param name="vertex4">Center - extAxis0 - extAxis1 + extAxis2</param>
            <param name="vertex5">Center + extAxis0 - extAxis1 + extAxis2</param>
            <param name="vertex6">Center + extAxis0 + extAxis1 + extAxis2</param>
            <param name="vertex7">Center - extAxis0 + extAxis1 + extAxis2</param>
        </member>
        <member name="M:Dest.Math.Box3.CalcVertices">
            <summary>
            Calculates 8 box corners and returns them in an allocated array.
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.CalcVertices(UnityEngine.Vector3[])">
            <summary>
            Calculates 8 box corners and fills the input array with them (array length must be 8).
            See array-less overload for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.CalcVolume">
            <summary>
            Returns volume of the box as Extents.x * Extents.y * Extents.z * 8
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.Contains(UnityEngine.Vector3@)">
            <summary>
            Tests whether a point is contained by the box
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.Contains(UnityEngine.Vector3)">
            <summary>
            Tests whether a point is contained by the box
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.Include(Dest.Math.Box3@)">
            <summary>
            Enlarges the box so it includes another box.
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.Include(Dest.Math.Box3)">
            <summary>
            Enlarges the box so it includes another box.
            </summary>
        </member>
        <member name="M:Dest.Math.Box3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Capsule3">
            <summary>
            Capsule is defined by the volume around the segment with certain radius.
            </summary>
        </member>
        <member name="F:Dest.Math.Capsule3.Segment">
            <summary>
            Capsule base segment
            </summary>
        </member>
        <member name="F:Dest.Math.Capsule3.Radius">
            <summary>
            Capsule radius
            </summary>
        </member>
        <member name="M:Dest.Math.Capsule3.#ctor(Dest.Math.Segment3@,System.Single)">
            <summary>
            Creates new Capsule3 instance.
            </summary>
        </member>
        <member name="M:Dest.Math.Capsule3.#ctor(Dest.Math.Segment3,System.Single)">
            <summary>
            Creates new Capsule3 instance.
            </summary>
        </member>
        <member name="T:Dest.Math.Circle3">
            <summary>
            The plane containing the circle is Dot(N,X-C) = 0, where X is any point
            in the plane.  Vectors U, V, and N form an orthonormal set
            (matrix [U V N] is orthonormal and has determinant 1).  The circle
            within the plane is parameterized by X = C + R*(cos(t)*U + sin(t)*V),
            where t is an angle in [0,2*pi).
            </summary>
        </member>
        <member name="F:Dest.Math.Circle3.Center">
            <summary>
            Circle center.
            </summary>
        </member>
        <member name="F:Dest.Math.Circle3.Axis0">
            <summary>
            First circle axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Circle3.Axis1">
            <summary>
            Second circle axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Circle3.Normal">
            <summary>
            Circle normal which is Cross(Axis0, Axis1). Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Circle3.Radius">
            <summary>
            Circle radius.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single)">
            <summary>
            Creates new circle instance from center, axes and radius. Normal is calculated as cross product of the axes.
            </summary>
            <param name="axis0">Must be unit length!</param>
            <param name="axis1">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Circle3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Creates new circle instance from center, axes and radius. Normal is calculated as cross product of the axes.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single)">
            <summary>
            Creates new circle instance. Computes axes from specified normal.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Circle3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Creates new circle instance. Computes axes from specified normal.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Circle3.CreateCircumscribed(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Circle3@)">
            <summary>
            Creates circle which is circumscribed around triangle.
            Returns 'true' if circle has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.CreateInscribed(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Circle3@)">
            <summary>
            Creates circle which is insribed into triangle.
            Returns 'true' if circle has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.CalcPerimeter">
            <summary>
            Returns circle perimeter
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.CalcArea">
            <summary>
            Returns circle area
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.Eval(System.Single)">
            <summary>
            Evaluates circle using formula X = C + R*cos(t)*U + R*sin(t)*V
            where t is an angle in [0,2*pi).
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Circle3.Eval(System.Single,System.Single)">
            <summary>
            Evaluates disk using formula X = C + radius*cos(t)*U + radius*sin(t)*V
            where t is an angle in [0,2*pi).
            </summary>
            <param name="t">Evaluation parameter</param>
            <param name="radius">Evaluation radius</param>
        </member>
        <member name="M:Dest.Math.Circle3.DistanceTo(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.Project(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Circle3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Line3">
            <summary>
            The line is represented as P+t*D where P is the line origin, D is a
            unit-length direction vector, and t is any real number.  The user must
            ensure that D is indeed unit length.
            </summary>
        </member>
        <member name="F:Dest.Math.Line3.Center">
            <summary>
            Line origin
            </summary>
        </member>
        <member name="F:Dest.Math.Line3.Direction">
            <summary>
            Line direction. Must be unit length!
            </summary>
        </member>
        <member name="M:Dest.Math.Line3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates the line
            </summary>
            <param name="center">Line origin</param>
            <param name="direction">Line direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Line3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates the line
            </summary>
            <param name="center">Line origin</param>
            <param name="direction">Line direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Line3.CreateFromTwoPoints(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates the line. Origin is p0, Direction is Normalized(p1-p0).
            </summary>
            <param name="p0">First point</param>
            <param name="p1">Second point</param>
        </member>
        <member name="M:Dest.Math.Line3.CreateFromTwoPoints(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates the line. Origin is p0, Direction is Normalized(p1-p0).
            </summary>
            <param name="p0">First point</param>
            <param name="p1">Second point</param>
        </member>
        <member name="M:Dest.Math.Line3.Eval(System.Single)">
            <summary>
            Evaluates line using P+t*D formula, where P is the line origin, D is a
            unit-length direction vector, t is parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Line3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Line3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Line3.AngleBetweenTwoLines(Dest.Math.Line3,System.Boolean)">
            <summary>
            Returns angle between this line's direction and another line's direction as: arccos(dot(this.Direction,another.Direction))
            If acuteAngleDesired is true, then in resulting angle is > pi/2, then result is transformed to be pi-angle.
            </summary>
        </member>
        <member name="M:Dest.Math.Line3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Plane3">
            <summary>
            The plane is represented as Dot(N,X) = c where N is a unit-length
            normal vector, c is the plane constant, and X is any point on the
            plane.  The user must ensure that the normal vector is unit length.
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3.Normal">
            <summary>
            Plane normal. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Plane3.Constant">
            <summary>
            Plane constant c from the equation Dot(N,X) = c
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3@,System.Single)">
            <summary>
            Creates the plane by specifying N and c directly.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3,System.Single)">
            <summary>
            Creates the plane by specifying N and c directly.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            N is specified, c = Dot(N,P) where P is a point on the plane.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            N is specified, c = Dot(N,P) where P is a point on the plane.
            </summary>
            <param name="normal">Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates the plane from 3 points.
            N = Cross(P1-P0,P2-P0)/Length(Cross(P1-P0,P2-P0)), c = Dot(N,P0) where
            P0, P1, P2 are points on the plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates the plane from 3 points.
            N = Cross(P1-P0,P2-P0)/Length(Cross(P1-P0,P2-P0)), c = Dot(N,P0) where
            P0, P1, P2 are points on the plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.op_Implicit(Dest.Math.Plane3)~UnityEngine.Plane">
            <summary>
            Converts Plane3 to UnityEngine.Plane
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.op_Implicit(UnityEngine.Plane)~Dest.Math.Plane3">
            <summary>
            Converts UnityEngine.Plane to Plane3
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.CalcOrigin">
            <summary>
            Returns N*c
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.CreateOrthonormalBasis(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates orthonormal basis from plane. In the output n - is the plane normal.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.SignedDistanceTo(UnityEngine.Vector3@)">
            <summary>
            Compute d = Dot(N,P)-c where N is the plane normal and c is the plane
            constant.  This is a signed distance.  The sign of the return value is
            positive if the point is on the positive side of the plane, negative if
            the point is on the negative side, and zero if the point is on the plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.SignedDistanceTo(UnityEngine.Vector3)">
            <summary>
            Compute d = Dot(N,P)-c where N is the plane normal and c is the plane
            constant.  This is a signed distance.  The sign of the return value is
            positive if the point is on the positive side of the plane, negative if
            the point is on the negative side, and zero if the point is on the plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySide(UnityEngine.Vector3,System.Single)">
            <summary>
            Determines on which side of the plane a point is. Returns +1 if a point
            is on the positive side of the plane, 0 if it's on the plane, -1 if it's on the negative side.
            The positive side of the plane is the half-space to which the plane normal points.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySideNegative(UnityEngine.Vector3,System.Single)">
            <summary>
            Returns true if a point is on the negative side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySidePositive(UnityEngine.Vector3,System.Single)">
            <summary>
            Returns true if a point is on the positive side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySide(Dest.Math.Box3@,System.Single)">
            <summary>
            Determines on which side of the plane a box is. Returns +1 if a box
            is on the positive side of the plane, 0 if it's intersecting the plane, -1 if it's on the negative side.
            The positive side of the plane is the half-space to which the plane normal points.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySideNegative(Dest.Math.Box3@,System.Single)">
            <summary>
            Returns true if a box is on the negative side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySidePositive(Dest.Math.Box3@,System.Single)">
            <summary>
            Returns true if a box is on the positive side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySide(Dest.Math.AAB3@,System.Single)">
            <summary>
            Determines on which side of the plane a box is. Returns +1 if a box
            is on the positive side of the plane, 0 if it's intersecting the plane, -1 if it's on the negative side.
            The positive side of the plane is the half-space to which the plane normal points.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySideNegative(Dest.Math.AAB3@,System.Single)">
            <summary>
            Returns true if a box is on the negative side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySidePositive(Dest.Math.AAB3@,System.Single)">
            <summary>
            Returns true if a box is on the positive side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySide(Dest.Math.Sphere3@,System.Single)">
            <summary>
            Determines on which side of the plane a sphere is. Returns +1 if a sphere
            is on the positive side of the plane, 0 if it's intersecting the plane, -1 if it's on the negative side.
            The positive side of the plane is the half-space to which the plane normal points.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySideNegative(Dest.Math.Sphere3@,System.Single)">
            <summary>
            Returns true if a sphere is on the negative side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.QuerySidePositive(Dest.Math.Sphere3@,System.Single)">
            <summary>
            Returns true if a sphere is on the positive side of the plane, false otherwise.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.ProjectVector(UnityEngine.Vector3)">
            <summary>
            Returns projected vector
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.AngleBetweenPlaneNormalAndLine(Dest.Math.Line3)">
            <summary>
            Returns angle in radians between plane normal and line direction which is: arccos(dot(normal,direction))
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.AngleBetweenPlaneNormalAndLine(UnityEngine.Vector3)">
            <summary>
            Returns angle in radians between plane normal and line direction which is: arccos(dot(normal,direction)). Direction will be normalized.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.AngleBetweenPlaneAndLine(Dest.Math.Line3)">
            <summary>
            Returns angle between plane itself and line direction which is: pi/2 - arccos(dot(normal,direction))
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.AngleBetweenPlaneAndLine(UnityEngine.Vector3)">
            <summary>
            Returns angle in radians between plane itself and direction which is: pi/2 - arccos(dot(normal,direction)).  Direction will be normalized.
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.AngleBetweenTwoPlanes(Dest.Math.Plane3)">
            <summary>
            Returns angle in radians between this plane's normal and another plane's normal as: arccos(dot(this.Normal,another.Normal))
            </summary>
        </member>
        <member name="M:Dest.Math.Plane3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Edge3">
            <summary>
            Polygon3 edge
            </summary>
        </member>
        <member name="F:Dest.Math.Edge3.Point0">
            <summary>
            Edge start vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Edge3.Point1">
            <summary>
            Edge end vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Edge3.Direction">
            <summary>
            Unit length direction vector
            </summary>
        </member>
        <member name="F:Dest.Math.Edge3.Normal">
            <summary>
            Unit length normal vector
            </summary>
        </member>
        <member name="F:Dest.Math.Edge3.Length">
            <summary>
            Edge length
            </summary>
        </member>
        <member name="T:Dest.Math.Polygon3">
            <summary>
            Represents 3d planar polygon (vertex count must be >= 3).
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.#ctor(UnityEngine.Vector3[],Dest.Math.Plane3)">
            <summary>
            Creates polygon from an array of vertices (array is copied).
            The caller is responsible for supplying the points which lie in the polygon's plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.#ctor(System.Int32,Dest.Math.Plane3)">
            <summary>
            Creates polygon setting number of vertices. Vertices then
            can be filled using indexer.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.SetVertexProjected(System.Int32,UnityEngine.Vector3)">
            <summary>
            Sets polygon vertex and ensures that it will lie in the plane by projecting it.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.ProjectVertices">
            <summary>
            Projects polygon vertices onto polygon plane.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.GetEdge(System.Int32)">
            <summary>
            Returns polygon edge
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.UpdateEdges">
            <summary>
            Updates all polygon edges. Use after vertex change.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.UpdateEdge(System.Int32)">
            <summary>
            Updates certain polygon edge. Use after vertex change.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.CalcCenter">
            <summary>
            Returns polygon center
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.CalcPerimeter">
            <summary>
            Returns polygon perimeter length
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.HasZeroCorners(System.Single)">
            <summary>
            Returns true if polygon contains some edges which have zero angle between them.
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.ReverseVertices">
            <summary>
            Reverses polygon vertex order
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.ToSegmentArray">
            <summary>
            Converts the polygon to segment array
            </summary>
        </member>
        <member name="M:Dest.Math.Polygon3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon3.Vertices">
            <summary>
            Gets vertices array (do not change the data, use only for traversal)
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon3.Edges">
            <summary>
            Gets edges array (do not change the data, use only for traversal)
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon3.VertexCount">
            <summary>
            Polygon vertex count
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon3.Item(System.Int32)">
            <summary>
            Gets or sets polygon vertex. The caller is responsible for supplying the points which lie in the polygon's plane.
            </summary>
        </member>
        <member name="P:Dest.Math.Polygon3.Plane">
            <summary>
            Gets or sets polygon plane. After plane change reset all vertices manually or call ProjectVertices() to project all vertices automatically.
            </summary>
        </member>
        <member name="T:Dest.Math.Ray3">
            <summary>
            The ray is represented as P+t*D, where P is the ray origin, D is a
            unit-length direction vector, and t &gt;= 0.  The user must ensure that D
            is indeed unit length.
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3.Center">
            <summary>
            Ray origin
            </summary>
        </member>
        <member name="F:Dest.Math.Ray3.Direction">
            <summary>
            Ray direction. Must be unit length!
            </summary>
        </member>
        <member name="M:Dest.Math.Ray3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates the ray
            </summary>
            <param name="center">Ray origin</param>
            <param name="direction">Ray direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Ray3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates the ray
            </summary>
            <param name="center">Ray origin</param>
            <param name="direction">Ray direction. Must be unit length!</param>
        </member>
        <member name="M:Dest.Math.Ray3.op_Implicit(Dest.Math.Ray3)~UnityEngine.Ray">
            <summary>
            Converts Ray3 to UnityEngine.Ray
            </summary>
        </member>
        <member name="M:Dest.Math.Ray3.op_Implicit(UnityEngine.Ray)~Dest.Math.Ray3">
            <summary>
            Converts UnityEngine.Ray to Ray3
            </summary>
        </member>
        <member name="M:Dest.Math.Ray3.Eval(System.Single)">
            <summary>
            Evaluates ray using P+t*D formula, where P is the ray origin, D is a
            unit-length direction vector, t is parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Ray3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Ray3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Ray3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Rectangle3">
            <summary>
            Points are R(s,t) = C+s0*U0+s1*U1, where C is the center of the
            rectangle, U0 and U1 are unit-length and perpendicular axes.  The
            parameters s0 and s1 are constrained by |s0| &lt;= e0 and |s1| &lt;= e1,
            where e0 &gt; 0 and e1 &gt; 0 are called the extents of the rectangle.
            </summary>
        </member>
        <member name="F:Dest.Math.Rectangle3.Center">
            <summary>
            Rectangle center
            </summary>
        </member>
        <member name="F:Dest.Math.Rectangle3.Axis0">
            <summary>
            First rectangle axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Rectangle3.Axis1">
            <summary>
            Second rectangle axis. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Rectangle3.Normal">
            <summary>
            Rectangle normal which is Cross(Axis0, Axis1). Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Rectangle3.Extents">
            <summary>
            Extents (half sizes) along Axis0 and Axis1. Must be non-negative!
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector2@)">
            <summary>
            Creates new Rectangle3 instance.
            </summary>
            <param name="center">Rectangle center</param>
            <param name="axis0">First box axis. Must be unit length!</param>
            <param name="axis1">Second box axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0 and Axis1. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Rectangle3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Creates new Rectangle3 instance.
            </summary>
            <param name="center">Rectangle center</param>
            <param name="axis0">First rectangle axis. Must be unit length!</param>
            <param name="axis1">Second rectangle axis. Must be unit length!</param>
            <param name="extents">Extents (half sizes) along Axis0 and Axis1. Must be non-negative!</param>
        </member>
        <member name="M:Dest.Math.Rectangle3.CreateFromCCWPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates rectangle from 4 counter clockwise ordered ordered points. Center=(p0+p2)/2, Axis0=Normalized(p1-p0), Axis1=Normalized(p2-p1).
            The user therefore must ensure that the points are indeed represent rectangle to obtain meaningful result.
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.CreateFromCWPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates rectangle from 4 clockwise ordered points. Center=(p0+p2)/2, Axis0=Normalized(p2-p1), Axis1=Normalized(p1-p0).
            The user therefore must ensure that the points are indeed represent rectangle to obtain meaningful result.
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.CalcVertices(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates 4 box corners. extAxis[i] is Axis[i]*Extent[i], i=0,1.
            </summary>
            <param name="vertex0">Center - extAxis0 - extAxis1</param>
            <param name="vertex1">Center + extAxis0 - extAxis1</param>
            <param name="vertex2">Center + extAxis0 + extAxis1</param>
            <param name="vertex3">Center - extAxis0 + extAxis1</param>
        </member>
        <member name="M:Dest.Math.Rectangle3.CalcVertices">
            <summary>
            Calculates 4 box corners and returns them in an allocated array.
            Look array-less method for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.CalcVertices(UnityEngine.Vector3[])">
            <summary>
            Calculates 4 box corners and fills the input array with them (array length must be 4).
            Look array-less method for the description.
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.CalcArea">
            <summary>
            Returns area of the box as Extent.x*Extent.y*4
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Rectangle3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Segment3">
             <summary>
             The segment is represented as (1-s)*P0+s*P1, where P0 and P1 are the
             endpoints of the segment and 0 &lt;= s &lt;= 1.
            
             Some algorithms involving segments might prefer a centered
             representation similar to how oriented bounding boxes are defined.
             This representation is C+t*D, where C = (P0+P1)/2 is the center of
             the segment, D = (P1-P0)/Length(P1-P0) is a unit-length direction
             vector for the segment, and |t| &lt;= e.  The value e = Length(P1-P0)/2
             is the 'extent' (or radius or half-length) of the segment.
             </summary>
        </member>
        <member name="F:Dest.Math.Segment3.P0">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3.P1">
            <summary>
            End point
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3.Center">
            <summary>
            Segment center
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3.Direction">
            <summary>
            Segment direction. Must be unit length!
            </summary>
        </member>
        <member name="F:Dest.Math.Segment3.Extent">
            <summary>
            Segment half-length
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            The constructor computes Center, Dircetion, and Extent from P0 and P1.
            </summary>
            <param name="p0">Segment start point</param>
            <param name="p1">Segment end point</param>
        </member>
        <member name="M:Dest.Math.Segment3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            The constructor computes Center, Dircetion, and Extent from P0 and P1.
            </summary>
            <param name="p0">Segment start point</param>
            <param name="p1">Segment end point</param>
        </member>
        <member name="M:Dest.Math.Segment3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single)">
            <summary>
            The constructor computes P0 and P1 from Center, Direction, and Extent.
            </summary>
            <param name="center">Center of the segment</param>
            <param name="direction">Direction of the segment. Must be unit length!</param>
            <param name="extent">Half-length of the segment</param>
        </member>
        <member name="M:Dest.Math.Segment3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            The constructor computes P0 and P1 from Center, Direction, and Extent.
            </summary>
            <param name="center">Center of the segment</param>
            <param name="direction">Direction of the segment. Must be unit length!</param>
            <param name="extent">Half-length of the segment</param>
        </member>
        <member name="M:Dest.Math.Segment3.SetEndpoints(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes segments from endpoints.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.SetCenterDirectionExtent(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes segment from center, direction and extent.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.CalcCenterDirectionExtent">
            <summary>
            Call this function when you change P0 or P1.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.CalcEndPoints">
            <summary>
            Call this function when you change Center, Direction, or Extent.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.Eval(System.Single)">
            <summary>
            Evaluates segment using (1-s)*P0+s*P1 formula, where P0 and P1
            are endpoints, s is parameter.
            </summary>
            <param name="s">Evaluation parameter</param>
        </member>
        <member name="M:Dest.Math.Segment3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Segment3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="T:Dest.Math.Sphere3">
            <summary>
            The sphere is represented as |X-C| = R where C is the center and R is
            the radius.
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3.Center">
            <summary>
            Circle center
            </summary>
        </member>
        <member name="F:Dest.Math.Sphere3.Radius">
            <summary>
            Circle radius
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.#ctor(UnityEngine.Vector3@,System.Single)">
            <summary>
            Creates Sphere3 from center and radius
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.#ctor(UnityEngine.Vector3,System.Single)">
            <summary>
            Creates Sphere3 from center and radius
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateFromPointsAAB(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
            <summary>
            Computes bounding sphere from a set of points.
            First compute the axis-aligned bounding box of the points, then compute the sphere containing the box.
            If a set is empty returns new Sphere3().
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateFromPointsAAB(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Computes bounding sphere from a set of points.
            First compute the axis-aligned bounding box of the points, then compute the sphere containing the box.
            If a set is empty returns new Sphere3().
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateFromPointsAverage(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
            <summary>
            Computes bounding sphere from a set of points.
            Compute the smallest sphere whose center is the average of a point set.
            If a set is empty returns new Sphere3().
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateFromPointsAverage(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Computes bounding sphere from a set of points.
            Compute the smallest sphere whose center is the average of a point set.
            If a set is empty returns new Sphere3().
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateCircumscribed(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Sphere3@)">
            <summary>
            Creates sphere which is circumscribed around tetrahedron.
            Returns 'true' if sphere has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CreateInscribed(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,Dest.Math.Sphere3@)">
            <summary>
            Creates sphere which is insribed into tetrahedron.
            Returns 'true' if sphere has been constructed, 'false' otherwise (input points are linearly dependent).
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CalcArea">
            <summary>
            Returns sphere area
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.CalcVolume">
            <summary>
            Returns sphere volume
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Eval(System.Single,System.Single)">
            <summary>
            Evaluates sphere using formula X = C + R*[cos(theta)*sin(phi) , sin(theta)*sin(phi) , cos(phi)],
            where 0 &lt;= theta,phi &lt; 2*pi.
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.DistanceTo(UnityEngine.Vector3)">
            <summary>
            Returns distance to a point, distance is >= 0f.
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Project(UnityEngine.Vector3)">
            <summary>
            Returns projected point
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Contains(UnityEngine.Vector3@)">
            <summary>
            Tests whether a point is contained by the sphere
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Contains(UnityEngine.Vector3)">
            <summary>
            Tests whether a point is contained by the sphere
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Include(Dest.Math.Sphere3@)">
            <summary>
            Enlarges the sphere so it includes another sphere.
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.Include(Dest.Math.Sphere3)">
            <summary>
            Enlarges the sphere so it includes another sphere.
            </summary>
        </member>
        <member name="M:Dest.Math.Sphere3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3.V0">
            <summary>
            First triangle vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3.V1">
            <summary>
            Second triangle vertex
            </summary>
        </member>
        <member name="F:Dest.Math.Triangle3.V2">
            <summary>
            Third triangle vertex
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.#ctor(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Creates Triangle3 from 3 vertices
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates Triangle3 from 3 vertices
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcEdge(System.Int32)">
            <summary>
            Returns triangle edge by index 0, 1 or 2
            Edge[i] = V[i+1]-V[i]
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcNormal">
            <summary>
            Returns triangle normal as (V1-V0)x(V2-V0)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcArea">
            <summary>
            Returns triangle area as 0.5*Abs(Length((V1-V0)x(V2-V0)))
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcArea(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Returns triangle area defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcArea(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns triangle area defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesDeg">
            <summary>
            Calculates angles of the triangle in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesDeg(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates angles of the triangle defined by 3 points in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesDeg(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Calculates angles of the triangle defined by 3 points in degrees.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesRad">
            <summary>
            Calculates angles of the triangle in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesRad(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculates angles of the triangle defined by 3 points in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcAnglesRad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Calculates angles of the triangle defined by 3 points in radians.
            Angles are returned in the instance of Vector3 following way: (angle of vertex V0, angle of vertex V1, angle of vertex V2)
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.EvalBarycentric(System.Single,System.Single)">
            <summary>
            Gets point on the triangle using barycentric coordinates.
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1, c2 is calculated as 1-c0-c1.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.EvalBarycentric(UnityEngine.Vector3@)">
            <summary>
            Gets point on the triangle using barycentric coordinates. baryCoords parameter is (c0,c1,c2).
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.EvalBarycentric(UnityEngine.Vector3)">
            <summary>
            Gets point on the triangle using barycentric coordinates. baryCoords parameter is (c0,c1,c2).
            The result is c0*V0 + c1*V1 + c2*V2, 0 &lt;= c0,c1,c2 &lt;= 1, c0+c1+c2=1
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcBarycentricCoords(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Calculate barycentric coordinates for the input point with regarding to triangle defined by 3 points.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcBarycentricCoords(UnityEngine.Vector3@)">
            <summary>
            Calculate barycentric coordinates for the input point regarding to the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.CalcBarycentricCoords(UnityEngine.Vector3)">
            <summary>
            Calculate barycentric coordinates for the input point regarding to the triangle.
            </summary>
        </member>
        <member name="M:Dest.Math.Triangle3.ToString">
            <summary>
            Returns string representation.
            </summary>
        </member>
        <member name="P:Dest.Math.Triangle3.Item(System.Int32)">
            <summary>
            Gets or sets triangle vertex by index: 0, 1 or 2
            </summary>
        </member>
        <member name="F:Dest.Math.Orientations.CW">
            <summary>
            Clockwise
            </summary>
        </member>
        <member name="F:Dest.Math.Orientations.CCW">
            <summary>
            Counter clockwise
            </summary>
        </member>
        <member name="F:Dest.Math.Orientations.None">
            <summary>
            No orientation (degenerate object)
            </summary>
        </member>
    </members>
</doc>
