// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain






int4 bounds;
float4 globalWind;
int2 gasPerSolid;

Texture2D<float> solid;
Texture2D<float> gas;

RWTexture2D<float4> velocity;
RWTexture2D<float2> previousVelocity;

int2 RIGHT = int2(1,0);
int2 LEFT = int2(-1,0);
int2 UP = int2(0,-1);
int2 DOWN = int2(0,1);

int DIR_RIGHT = 1;
int DIR_UP = 2;
int DIR_LEFT = 4;
int DIR_DOWN = 8;


//returns pressure (which in the case of solid, will be the maximum pressure)
int GetPressureAbsolute(int gasDensity, float isSolid)
{
    return ((1-isSolid.x) * gasDensity.x) + (isSolid.x * 17);
}

int GetPressureDelta(int gasSelf, int gasNeighbor, float isSolid)
{
    return gasSelf-GetPressureAbsolute(gasNeighbor, isSolid) ;//difference from gas self to target
}
float GetSolid(int2 uv)
{
    return all(solid[uv]==0);
}

int GetPressure(int2 uv)
{
    return gas[uv] * 16.0;
}

int4 GetNeighborPressure(uint3 id)
{
    return int4(
        GetPressure(id + RIGHT),
        GetPressure(id + UP),
        GetPressure(id + LEFT),
        GetPressure(id + DOWN));
}
float4 GetNeighborSolids(uint3 id)
{
    return float4(
        GetSolid((id*gasPerSolid) + RIGHT),
        GetSolid((id*gasPerSolid) + UP),
        GetSolid((id*gasPerSolid) + LEFT),
        GetSolid((id*gasPerSolid) + DOWN));
}
int4 GetPressureDeltas(int gasSelf, int4 gasNeighbors, float4 solidNeighbors)
{
    return int4(GetPressureDelta(gasSelf, gasNeighbors.x, solidNeighbors.x),
        GetPressureDelta(gasSelf, gasNeighbors.y, solidNeighbors.y),
        GetPressureDelta(gasSelf, gasNeighbors.z, solidNeighbors.z),
        GetPressureDelta(gasSelf, gasNeighbors.a, solidNeighbors.a));
}

int CountNonZeros(float4 values)
{
    int result = 0;
    result += values.x != 0;
    result += values.y != 0;
    result += values.z != 0;
    result += values.w != 0;
    return result;
}

int CountValidNeighbors(int4 deltas, int4 gas, float4 solids)
{
    int result = 0;
    result += (deltas.x > 0) && (solids.x!=0) && (gas.x < 16);
    result += (deltas.y > 0) && (solids.y!=0) && (gas.y < 16);
    result += (deltas.z > 0) && (solids.z!=0) && (gas.z < 16);
    result += (deltas.w > 0) && (solids.w!=0) && (gas.w < 16);
    return result;
}

int Sum(int4 value)
{
    return value.x + value.y + value.z + value.w;
}

float2 GetVelocity(uint3 uv, int gasSelf)
{
    const int4 pressureNeighbors = GetNeighborPressure(uv);
    const float4 solidNeighbors = GetNeighborSolids(uv);
    int4 pressureDeltas = GetPressureDeltas(gasSelf, pressureNeighbors, solidNeighbors);
    int totalFlow = Sum(pressureDeltas);
    int validNeighbors = CountValidNeighbors(pressureDeltas, pressureNeighbors, solidNeighbors);
    if(totalFlow == 0)
    {
        return float2(0, 0);
    }
    if(totalFlow > 0)//giving more gas than receiving
    {
        
    }
    
    
    
    float verticalPressureDelta = pressureDeltas.y - pressureDeltas.w;
    float horizontalPressureDelta = pressureDeltas.x - pressureDeltas.z;
    return  float2(horizontalPressureDelta, verticalPressureDelta)*2.0 + globalWind;
}
bool ConfirmCellIsUnblockedSolid(uint3 id)
{
    bool isSolid = all(solid[id.xy/gasPerSolid]==0);
    if(isSolid)
    {
        velocity[id.xy] = float4(0,0,1,1);
    }
    return isSolid;
}


int EncodeVelocityToInt(float2 velocity)
{
    int result = velocity.y > 0 ? DIR_UP : 0;
    result |= velocity.x > 0 ? DIR_RIGHT : 0;
    result |= velocity.y < 0 ? DIR_DOWN : 0;
    result |= velocity.x < 0 ? DIR_LEFT : 0;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 cellVelocity = velocity[id.xy];
    float2 prevVelocity = previousVelocity[id.xy];
    previousVelocity[id.xy] = cellVelocity;
    
    if(!ConfirmCellIsUnblockedSolid(id))return;

    //DO STUFF
    
    if(gas[id.xy]==0)
        return;
    cellVelocity = GetVelocity(id, gas[id.xy]);
    velocity[id.xy] = float4(cellVelocity.x, cellVelocity.y, 1, 1);
    //
    //
    //
    // int2 offsetUp =  int2(0, -1), offsetDown = int2(0,1), offsetLeft = int2(1,0), offsetRight = int2(1,0);
    //
    // int2 uvCurrent = id.xy;
    //
    //
    //
    // int2 uvUp = uvCurrent + int2(0, -1), uvDown = uvCurrent + int2(0, 1), uvRight = uvCurrent + int2(1, 0), uvLeft = uvCurrent +  int2(-1, 0);
    // int2 uvSolid =  id.xy/gasPerSolid;
    // bool isSolid = all(solid[uvSolid]==0);
    // if(isSolid)
    // {
    //     velocity[id.xy] = float4(0,0,1,1);
    //     return;
    // }
    //
    // int2 uvSolidUp = uvSolid + int2(0, -1), uvSolidDown = uvSolid + int2(0, 1), uvSolidRight = uvSolid + int2(1, 0), uvSolidLeft = uvSolid +  int2(-1, 0);
    //
    // float solidCurrent = solid[uvSolid];
    // float solidUp = GetSolid(uvSolidUp), solidDown =GetSolid(uvSolidDown), solidRight = GetSolid(uvSolidRight),  solidLeft = solid[uvSolidLeft];
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    // int2 uvSolidU = uvSolid + int2(0,-1);
    // int2 uvSolidD = uvSolid + int2(0,1);
    // int2 uvSolidR = uvSolid + int2(1,0);
    // int2 uvSolidL = uvSolid + int2(-1,0);
    //
    //
    //
    // float solidU = all(solid[uvSolidU]==0);
    // float solidD = all(solid[uvSolidD]==0);
    // float solidR = all(solid[uvSolidR]==0);
    // float solidL = all(solid[uvSolidL]==0);
    // float yComponent = solidU - solidD;
    // float xComponent = solidR - solidL;
    //
    // int cellPressure = int(gas[id.xy].x);
    // for (int x =-1; x <=1; x++)
    // {
    //     for (int y = -1; y <= 1; y++)
    //     {
    //         int2 offset = int2(x,y);
    //         if(all(offset == 0))
    //         {
    //             
    //         }
    //     }
    // }
    //
    //
    // velocity[id.xy] = float4(xComponent, yComponent, 0,1);
    
}
