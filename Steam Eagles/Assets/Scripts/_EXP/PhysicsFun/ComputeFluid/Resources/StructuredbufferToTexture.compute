// THIS FILE CONTAINS UTILITY FOR CONVERTING A STRUCTURED BUFFER FOR RENDER TEXTURE FOR THE PORPUSE OF VISUALISATION


//____________________________________________________________________________________
// KERNELS
#pragma kernel PressureStructeredToTextureBillinearR32
#pragma kernel VelocityStructeredToTextureBillinearRG32
#pragma kernel DyeStructeredToTextureBillinearRGB8


//____________________________________________________________________________________
// DECLERNATIONS
#include "FluidDynamicCommonUniforms.cginc"

//____________________________________________________________________________________
// HELPER FUNCTIONS
#include "FluidDynamicUtility.cginc"

//____________________________________________________________________________________
// MAIN FUNCTIONS
// The following 3 functions have different definations and identical code, due to the limitations unity has with Command Buffers not being able to set 
// None Global texture, specifically on kernels. Hence I need a unique function + texture for each, so that I can bind the texture once on start up
// but still use these different kernels in the same code in the same pipeline 

// StructeredToTextureBillinear DECLERNATIONS

StructuredBuffer<float4>   _Pressure_StructeredToTexture_Source_R32;
RWTexture2D<float4>        _Pressure_StructeredToTexture_Results_R32;
int2                        _Pressure_Results_Resolution_2D;

//----------------------------------------------------------------------------
// Function         : PressureStructeredToTextureBillinearR32
// Description      : This kernel blits a structured buffer on top of a render texture
//                    for visualisation. It runs once per pixel of the target render texture
//                    and in case the the render texture is higher res than the source, it bilinearly
//                    interpolates between the closest structuredbuffer entries
//----------------------------------------------------------------------------
[numthreads(16,16,1)]
void PressureStructeredToTextureBillinearR32(uint3 id : SV_DispatchThreadID)
{
    //float2 coord  = (float2)id.xy / (float)(_Pressure_Results_Resolution -1 );          // first normailizing the thread ids based on the targets resoltuion
    float2 coord = (float2)id.xy / (float2)(_Pressure_Results_Resolution_2D - 1);
    //           coord *= (float) (i_Resolution-1);                                           // remapping it to the coordinates of the structured buffer, but still as 2D ids. 
    coord *= float2(x_Resolution, y_Resolution) - float2(1,1);
    uint2 index = uint2(id.xy);
    _Pressure_StructeredToTexture_Results_R32[index] = StructuredBufferBilinearLoad(_Pressure_StructeredToTexture_Source_R32, coord);

}


StructuredBuffer<float4>   _Velocity_StructeredToTexture_Source_RB32;
RWTexture2D<float4>        _Velocity_StructeredToTexture_Results_RB32;
int2                        _Velocity_Results_Resolution_2D;

//----------------------------------------------------------------------------
// Function         : VelocityStructeredToTextureBillinearRG32
// Description      : This kernel blits a structured buffer on top of a render texture
//                    for visualisation. It runs once per pixel of the target render texture
//                    and in case the the render texture is higher res than the source, it bilinearly
//                    interpolates between the closest structuredbuffer entries
//----------------------------------------------------------------------------
[numthreads(16, 16, 1)]
void VelocityStructeredToTextureBillinearRG32(uint3 id : SV_DispatchThreadID)
{
    float2 coord = (float2)id.xy / (float2)(_Velocity_Results_Resolution_2D - 1);          // first normailizing the thread ids based on the targets resoltuion
    coord *= float2(x_Resolution, y_Resolution) - 1;                                                // remapping it to the coordinates of the structured buffer, but still as 2D ids. 

    _Velocity_StructeredToTexture_Results_RB32[id.xy] = StructuredBufferBilinearLoad(_Velocity_StructeredToTexture_Source_RB32, coord);

}

StructuredBuffer<float4>   _Dye_StructeredToTexture_Source_RBB8;
RWTexture2D<float4>        _Dye_StructeredToTexture_Results_RBB8;
int2                        _Dye_Results_Resolution_2D;

//----------------------------------------------------------------------------
// Function         : DyeStructeredToTextureBillinearRGB8
// Description      : This kernel blits a structured buffer on top of a render texture
//                    for visualisation. It runs once per pixel of the target render texture
//                    and in case the the render texture is higher res than the source, it bilinearly
//                    interpolates between the closest structuredbuffer entries
//----------------------------------------------------------------------------
[numthreads(16, 16, 1)]
void DyeStructeredToTextureBillinearRGB8(uint3 id : SV_DispatchThreadID)
{
    float2 coord = (float2)id.xy / (float2)(_Dye_Results_Resolution_2D - 1);          // first normailizing the thread ids based on the targets resoltuion
    coord *= float2(x_Resolution, y_Resolution) - (float)1;                                           // remapping it to the coordinates of the structured buffer, but still as 2D ids. 

    _Dye_StructeredToTexture_Results_RBB8[id.xy] = StructuredBufferBilinearLoad(_Dye_StructeredToTexture_Source_RBB8, coord);

}