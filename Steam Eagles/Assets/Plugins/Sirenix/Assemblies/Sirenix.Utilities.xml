<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sirenix.Utilities</name>
    </assembly>
    <members>
        <member name="T:Sirenix.Utilities.ColorExtensions">
            <summary>
            Extension methods for the UnityEngine.Color type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.Lerp(UnityEngine.Color[],System.Single)">
            <summary>
            Lerps between multiple colors.
            </summary>
            <original name="colors">The colors.</original>
            <original name="t">The t.</original>
            <returns></returns>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.MoveTowards(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Moves the towards implementation for Color.
            </summary>
            <original name="from">From color.</original>
            <original name="to">To color.</original>
            <original name="maxDelta">The maximum delta.</original>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.TryParseString(System.String,UnityEngine.Color@)">
            <summary>
            Tries to parse a string to a Color. The following formats are supported:
            "new Color(0.4, 0, 0, 1)", "#FFEEBBFF", "#FFEECC", "FFEEBBFF", "FFEECC"
            </summary>
            <original name="colorStr">The color string.</original>
            <original name="color">The color.</original>
            <returns>Returns true if the parse was a success.</returns>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.ToCSharpColor(UnityEngine.Color)">
            <summary>
            Converts a color to a string formatted to c#
            </summary>
            <original name="color">The color.</original>
            <returns>new Color(r, g, b, a)</returns>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.Pow(UnityEngine.Color,System.Single)">
            <summary>
            Pows the color with the specified factor.
            </summary>
            <original name="color">The color.</original>
            <original name="factor">The factor.</original>
        </member>
        <member name="M:Sirenix.Utilities.ColorExtensions.NormalizeRGB(UnityEngine.Color)">
            <summary>
            Normalizes the RGB values of the color ignoring the alpha value.
            </summary>
            <original name="color">The color.</original>
        </member>
        <member name="T:Sirenix.Utilities.DelegateExtensions">
            <summary>
            Delegate method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DelegateExtensions.Memoize``1(System.Func{``0})">
            <summary>
            Memoizes the specified func - returns the memoized version
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DelegateExtensions.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoizes the specified func - returns the memoized version
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.FieldInfoExtensions">
            <summary>
            FieldInfo method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.FieldInfoExtensions.IsAliasField(System.Reflection.FieldInfo)">
            <summary>
            Determines whether the specified field is an alias.
            </summary>
            <original name="fieldInfo">The field to check.</original>
            <returns>
              <c>true</c> if the specified field is an alias; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.FieldInfoExtensions.DeAliasField(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Returns the original, backing field of an alias field if the field is an alias.
            </summary>
            <original name="fieldInfo">The field to check.</original>
            /// <original name="throwOnNotAliased">if set to <c>true</c> an exception will be thrown if the field is not aliased.</original>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The field was not aliased; this only occurs if throwOnNotAliased is true.</exception>
        </member>
        <member name="T:Sirenix.Utilities.GarbageFreeIterators">
            <summary>
            Garbage free enumerator methods.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.GFIterator``1(System.Collections.Generic.List{``0})">
            <summary>
            Garbage free enumerator for lists.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.GFIterator``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Garbage free enumerator for dictionaries.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.GFValueIterator``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Garbage free enumator for dictionary values.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.GFIterator``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Garbage free enumerator for hashsets.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1">
            <summary>
            List iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates a list iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.ListIterator`1.Dispose">
            <summary>
            Disposes the iterator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1">
            <summary>
            Hashset iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            Creates a hashset iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.HashsetIterator`1.Dispose">
            <summary>
            Disposes the iterator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2">
            <summary>
            Dictionary iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Creates a dictionary iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryIterator`2.Dispose">
            <summary>
            Disposes the iterator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2">
            <summary>
            Dictionary value iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Creates a dictionary value iterator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2.Current">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GarbageFreeIterators.DictionaryValueIterator`2.Dispose">
            <summary>
            Disposes the iterator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.LinqExtensions">
            <summary>
            Various LinQ extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.Examine``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Calls an action on each item before yielding them.
            </summary>
            <original name="source">The collection.</original>
            <original name="action">The action to call for each item.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Perform an action on each item.
            </summary>
            <original name="source">The source.</original>
            <original name="action">The action to perform.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Perform an action on each item.
            </summary>
            <original name="source">The source.</original>
            <original name="action">The action to perform.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.Convert``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            Convert each item in the collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="converter">Func to convert the items.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert a collection to an immutable list.
            </summary>
            <original name="source">The collection.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>
            Add an item to the beginning of a collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="prepend">Func to create the item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Add an item to the beginning of a collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="prepend">The item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the beginning of another collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="prepend">The collection to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0})">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">Func to create the item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,``0)">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The collection to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Func{``0})">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">Func to create the item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},``0)">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The collection to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Func{``0})">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">Func to create the item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},``0)">
            <summary>
            Add an item to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The item to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.PrependIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the beginning of another collection, if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="prepend">The collection to prepend.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendWith``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>
            Add an item to the end of a collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="append">Func to create the item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Add an item to the end of a collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="append">The item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the end of another collection.
            </summary>
            <original name="source">The collection.</original>
            <original name="append">The collection to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0})">
            <summary>
            Add an item to the end of a collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">Func to create the item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,``0)">
            <summary>
            Add an item to the end of a collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">The item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the end of another collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">The collection to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Func{``0})">
            <summary>
            Add an item to the end of a collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">Func to create the item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},``0)">
            <summary>
            Add an item to the end of a collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">The item to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection to the end of another collection if a condition is met.
            </summary>
            <original name="source">The collection.</original>
            <original name="condition">The condition.</original>
            <original name="append">The collection to append.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.FilterCast``1(System.Collections.IEnumerable)">
            <summary>
            Returns and casts only the items of type <typeparamref name="T"/>.
            </summary>
            <original name="source">The collection.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a collection to a hashset.
            </summary>
            <original name="hashSet">The hashset.</original>
            <original name="range">The collection.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns <c>true</c> if the list is either null or empty. Otherwise <c>false</c>.
            </summary>
            <original name="list">The list.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.Populate``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Sets all items in the list to the given value.
            </summary>
            <original name="list">The list.</original>
            <original name="item">The value.</original>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the end of the IList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts an IList
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.LinqExtensions.Sort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts an IList
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ListExtensions">
            <summary>
            Various list extension methods.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ListExtensions.SetLength``1(System.Collections.Generic.IList{``0}@,System.Int32)">
            <summary>
            Increases or decrease the number of items in the list to the specified count.
            </summary>
            <original name="list">The list.</original>
            <original name="length">The new length.</original>
        </member>
        <member name="M:Sirenix.Utilities.ListExtensions.SetLength``1(System.Collections.Generic.IList{``0}@,System.Int32,System.Func{``0})">
            <summary>
            Increases or decrease the number of items in the list to the specified count.
            </summary>
            <original name="list">The list.</original>
            <original name="length">The new length.</original>
            <original name="newElement">Value of new elements.</original>
        </member>
        <member name="M:Sirenix.Utilities.ListExtensions.SetLength``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Increases or decrease the number of items in the list to the specified count.
            </summary>
            <original name="list">The list.</original>
            <original name="length">The new length.</original>
        </member>
        <member name="M:Sirenix.Utilities.ListExtensions.SetLength``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Increases or decrease the number of items in the list to the specified count.
            </summary>
            <original name="list">The list.</original>
            <original name="length">The new length.</original>
            <original name="newElement">Value of new elements.</original>
        </member>
        <member name="T:Sirenix.Utilities.MemberInfoExtensions">
            <summary>
            MemberInfo method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.IsDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns true if the attribute whose type is specified by the generic argument is defined on this member
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.IsDefined``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns true if the attribute whose type is specified by the generic argument is defined on this member
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Returns the first found custom attribute of type T on this member
            Returns null if none was found
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the first found non-inherited custom attribute of type T on this member
            Returns null if none was found
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets all attributes of the specified generic type.
            </summary>
            <original name="member">The member.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Gets all attributes of the specified generic type.
            </summary>
            <original name="member">The member.</original>
            <original name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets all attribute instances defined on a MemeberInfo.
            </summary>
            <original name="member">The member.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetAttributes(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Gets all attribute instances on a MemberInfo.
            </summary>
            <original name="member">The member.</original>
            <original name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.GetNiceName(System.Reflection.MemberInfo)">
            <summary>
            If this member is a method, returns the full method name (name + params) otherwise the member name paskal splitted
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.IsStatic(System.Reflection.MemberInfo)">
            <summary>
            Determines whether a FieldInfo, PropertyInfo or MethodInfo is static.
            </summary>
            <original name="member">The member.</original>
            <returns>
              <c>true</c> if the specified member is static; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.IsAlias(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member is an alias.
            </summary>
            <original name="memberInfo">The member to check.</original>
            <returns>
              <c>true</c> if the specified member is an alias; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberInfoExtensions.DeAlias(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Returns the original, backing member of an alias member if the member is an alias.
            </summary>
            <original name="memberInfo">The member to check.</original>
            /// <original name="throwOnNotAliased">if set to <c>true</c> an exception will be thrown if the member is not aliased.</original>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The member was not aliased; this only occurs if throwOnNotAliased is true.</exception>
        </member>
        <member name="T:Sirenix.Utilities.MethodInfoExtensions">
            <summary>
            Various extensions for MethodInfo.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.GetFullName(System.Reflection.MethodBase,System.String)">
            <summary>
            Returns the specified method's full name "methodName(argType1 arg1, argType2 arg2, etc)"
            Uses the specified gauntlet to replaces type names, ex: "int" instead of "Int32"
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.GetParamsNames(System.Reflection.MethodBase)">
            <summary>
            Returns a string representing the passed method parameters names. Ex "int num, float damage, Transform target"
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.GetFullName(System.Reflection.MethodBase)">
            <summary>
            Returns the specified method's full name.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.IsExtensionMethod(System.Reflection.MethodBase)">
            <summary>
            Tests if a method is an extension method.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.IsAliasMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is an alias.
            </summary>
            <original name="methodInfo">The method to check.</original>
            <returns>
              <c>true</c> if the specified method is an alias; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MethodInfoExtensions.DeAliasMethod(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Returns the original, backing method of an alias method if the method is an alias.
            </summary>
            <original name="methodInfo">The method to check.</original>
            /// <original name="throwOnNotAliased">if set to <c>true</c> an exception will be thrown if the method is not aliased.</original>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The method was not aliased; this only occurs if throwOnNotAliased is true.</exception>
        </member>
        <member name="T:Sirenix.Utilities.Operator">
            <summary>
            Determines the type of operator.
            </summary>
            <seealso cref="T:Sirenix.Utilities.TypeExtensions" />
        </member>
        <member name="F:Sirenix.Utilities.Operator.Equality">
            <summary>
            The == operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Inequality">
            <summary>
            The != operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Addition">
            <summary>
            The + operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Subtraction">
            <summary>
            The - operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Multiply">
            <summary>
            The * operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Division">
            <summary>
            The / operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LessThan">
            <summary>
            The &lt; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.GreaterThan">
            <summary>
            The &gt; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LessThanOrEqual">
            <summary>
            The &lt;= operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.GreaterThanOrEqual">
            <summary>
            The &gt;= operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.Modulus">
            <summary>
            The % operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.RightShift">
            <summary>
            The &gt;&gt; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LeftShift">
            <summary>
            The &lt;&lt; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.BitwiseAnd">
            <summary>
            The &amp; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.BitwiseOr">
            <summary>
            The | operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.ExclusiveOr">
            <summary>
            The ^ operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.BitwiseComplement">
            <summary>
            The ~ operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LogicalAnd">
            <summary>
            The &amp;&amp; operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LogicalOr">
            <summary>
            The || operator.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Operator.LogicalNot">
            <summary>
            The ! operator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.PathUtilities">
            <summary>
            DirectoryInfo method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory. Always returns forward slash seperators as opposed to Path.GetDirectoryName().
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.HasSubDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Determines whether the directory has a given directory in its hierarchy of children.
            </summary>
            <original name="parentDir">The parent directory.</original>
            <original name="subDir">The sub directory.</original>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.FindParentDirectoryWithName(System.IO.DirectoryInfo,System.String)">
            <summary>
            Finds a parent directory with a given name, or null if no such parent directory exists.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.CanMakeRelative(System.String,System.String)">
            <summary>
            Returns a value indicating whether or not a path can be made relative to another.
            </summary>
            <original name="absoluteParentPath">The parent path.</original>
            <original name="absolutePath">The path to make relative to the parent path.</original>
            <returns>A value indicating if the path can be made relative to the parent path.</returns>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.MakeRelative(System.String,System.String)">
            <summary>
            Returns a path string to path that is relative to the parent path.
            </summary>
            <original name="absoluteParentPath">The parent path.</original>
            <original name="absolutePath">The path to make relative to the parent path.</original>
            <returns>A relative path from parent path to path.</returns>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.TryMakeRelative(System.String,System.String,System.String@)">
            <summary>
            Tries to make a path that is relative from parent path to path.
            </summary>
            <original name="absoluteParentPath">The parent path.</original>
            <original name="absolutePath">The path to make relative to the parent path.</original>
            <original name="relativePath">A relative path from parent path to path. <c>null</c> if no relative path could be made.</original>
            <returns>A value indicating if the method succeeded in making a relative path.</returns>
        </member>
        <member name="M:Sirenix.Utilities.PathUtilities.Combine(System.String,System.String)">
            <summary>
            Combines two paths, and replaces all backslases with forward slash.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.PropertyInfoExtensions">
            <summary>
            PropertyInfo method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.PropertyInfoExtensions.IsAutoProperty(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Determines whether a property is an auto property.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.PropertyInfoExtensions.IsAliasProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property is an alias.
            </summary>
            <original name="propertyInfo">The property to check.</original>
            <returns>
              <c>true</c> if the specified property is an alias; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.PropertyInfoExtensions.DeAliasProperty(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns the original, backing property of an alias property if the property is an alias.
            </summary>
            <original name="propertyInfo">The property to check.</original>
            /// <original name="throwOnNotAliased">if set to <c>true</c> an exception will be thrown if the property is not aliased.</original>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The property was not aliased; this only occurs if throwOnNotAliased is true.</exception>
        </member>
        <member name="T:Sirenix.Utilities.RectExtensions">
            <summary>
            Defines a collection of handy Rect transformation methods, that can chained together for complex behaviour.
            Note that only the TakeX method defined here actually change the original Rect; the rest instead return a new transformed Rect.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetWidth(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect with the specified width.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetHeight(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect with the specified height.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetSize(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect with the specified size.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetSize(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect with the specified size.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="widthAndHeight">The desired width and height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetSize(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Returns a Rect with the specified size.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="size">The desired size of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.HorizontalPadding(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount on the X-axis.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="padding">The desired padding.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.HorizontalPadding(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount on the X-axis.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="left">Desired padding on the left side.</original>
            <original name="right">Desired padding on the right side.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.VerticalPadding(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount on the Y-axis.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="padding">The desired padding.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.VerticalPadding(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount on the Y-axis.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="top">The desired padding on the top.</original>
            <original name="bottom">The desired padding on the bottom.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Padding(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="padding">The desired padding.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Padding(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="horizontal">The desired horizontal padding.</original>
            <original name="vertical">The desired vertical padding.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Padding(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been inserted by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="left">The desired padding on the left.</original>
            <original name="right">The desired padding on the right.</original>
            <original name="top">The desired padding on the top.</original>
            <original name="bottom">The desired padding on the bottom.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignLeft(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified width, that has been aligned to the left of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenter(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified width, that has been aligned to horizontal center of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenter(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect, with the specified width and height in the center of the provided bounds.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignRight(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified width, that has been aligned to the right of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignRight(UnityEngine.Rect,System.Single,System.Boolean)">
            <summary>
            Returns a Rect, with the specified width, that has been aligned to the right of the original Rect.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignTop(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified height, that has been aligned to the top of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignMiddle(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified height, that has been aligned to the vertical middle of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignBottom(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified height, that has been aligned to the bottom of the original Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenterX(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified width, that has been aligned horizontally to the center of the original bounds.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenterY(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified height, that has been aligned vertically to the center of the original bounds.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenterXY(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect, with the specified width and height, that has been aligned horizontally and vertically to the center of the original bounds.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="size">The desired width and height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AlignCenterXY(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect, with the specified width and height, that has been aligned horizontally and vertically to the center of the original bounds.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="width">The desired width of the new Rect.</original>
            <original name="height">The desired height of the new Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Expand(UnityEngine.Rect,System.Single)">
            <summary>
            Returns a Rect that has been expanded by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="expand">The desired expansion.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Expand(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been expanded by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="horizontal">The desired expansion on the X-axis.</original>
            <original name="vertical">The desired expansion on the Y-axis.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Expand(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a Rect that has been expanded by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="left">The desired expansion on the left.</original>
            <original name="right">The desired expansion on the right.</original>
            <original name="top">The desired expansion on the top.</original>
            <original name="bottom">The desired expansion on the bottom.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.Split(UnityEngine.Rect,System.Int32,System.Int32)">
            <summary>
            Splits a Rect horizontally into the specified number of sub-rects, and returns a sub-bounds for the specified index.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="index">The index for the subrect. Includes 0, and excludes count.</original>
            <original name="count">The amount of subrects the Rect should be split into.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SplitVertical(UnityEngine.Rect,System.Int32,System.Int32)">
            <summary>
            Splits a Rect vertically into the specified number of sub-rects, and returns a sub-bounds for the specified index.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="index">The index for the subrect. Includes 0, and excludes count.</original>
            <original name="count">The amount of subrects the Rect should be split into.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SplitGrid(UnityEngine.Rect,System.Single,System.Single,System.Int32)">
            <summary>
            Splits a Rect into a grid from left to right and then down.
            </summary>
            <original name="bounds">The original bounds.</original>
            <original name="width">The width of a grid cell.</original>
            <original name="height">The height of a grid cell.</original>
            <original name="index">The index of the grid cell.</original>
            <returns></returns>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SplitTableGrid(UnityEngine.Rect,System.Int32,System.Single,System.Int32)">
            <summary>
            Splits a Rect into a grid from left to right and then down.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetCenterX(UnityEngine.Rect,System.Single)">
            <summary>
            Moves a Rect to the specified center X position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The desired center x position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetCenterY(UnityEngine.Rect,System.Single)">
            <summary>
            Moves a Rect to the specified center Y position.
            </summary>
            <original name="bounds">The desired original Rect.</original>
            <original name="y">The desired desired center y position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetCenter(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Moves a Rect to the specified center position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The desired center X position.</original>
            <original name="y">The desired center Y position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetCenter(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Moves a Rect to the specified center position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="center">The desired center position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetPosition(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Moves a Rect to the specified position.
            </summary>
            <original name="bounds">The orignal Rect.</original>
            <original name="position">The desired position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.ResetPosition(UnityEngine.Rect)">
            <summary>
            Resets a Rect's position to zero.
            </summary>
            <original name="bounds">The original Rect.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddPosition(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Moves a Rect's position by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="move">The change in position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddPosition(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Moves a Rect's position by the specified amount.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The x.</original>
            <original name="y">The y.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetX(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's X position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The desired X position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddX(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's X position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubX(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts from a Rect's X position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="x">The value to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetY(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's Y position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="y">The desired Y position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddY(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's Y position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="y">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubY(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts a Rect's Y position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="y">The value to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetMin(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Sets the min position of a Rect.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="min">The desired min position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddMin(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Adds to a Rect's min position.
            </summary>
            <original name="bounds">The original bounds.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubMin(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Subtracts a Rect's min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The vlaue to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetMax(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Sets a Rect's max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="max">The desired max position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddMax(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Adds to a Rect's max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubMax(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Subtracts a Rect's max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetXMin(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's X min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="xMin">The desired min X position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddXMin(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's X min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubXMin(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts from a Rect's X min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetXMax(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's X max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="xMax">The desired X max position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddXMax(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's X max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubXMax(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts a Rect's X max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetYMin(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's Y min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="yMin">The desired Y min.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddYMin(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's Y min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubYMin(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts a Rect's Y min position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to subtract.</original>
            <returns></returns>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SetYMax(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's Y max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="yMax">The desired Y max position.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.AddYMax(UnityEngine.Rect,System.Single)">
            <summary>
            Adds to a Rect's Y max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to add.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.SubYMax(UnityEngine.Rect,System.Single)">
            <summary>
            Subtracts from a Rect's Y max position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="value">The value to subtract.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.MinWidth(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's width, if it is less than the specified value.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="minWidth">The desired min width.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.MaxWidth(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's width, if it is greater than the specified value.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="maxWidth">The desired max width.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.MinHeight(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's height, if it is less than the specified value.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="minHeight">The desired min height.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.MaxHeight(UnityEngine.Rect,System.Single)">
            <summary>
            Sets a Rect's height, if it is greater than the specified value.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="maxHeight">The desired max height.</original>
        </member>
        <member name="M:Sirenix.Utilities.RectExtensions.ExpandTo(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            Expands a bounds to contain a given position.
            </summary>
            <original name="bounds">The original Rect.</original>
            <original name="pos">The position to expand the bounds towards.</original>
        </member>
        <member name="T:Sirenix.Utilities.StringExtensions">
            <summary>
            String method extensions.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Eg MY_INT_VALUE => MyIntValue
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns whether or not the specified string is contained with this string
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.StringExtensions.SplitPascalCase(System.String)">
            <summary>
            Ex: "thisIsCamelCase" -> "This Is Camel Case"
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.StringExtensions.IsNullOrWhitespace(System.String)">
            <summary>
            Returns true if this string is null, empty, or contains only whitespace.
            </summary>
            <original name="str">The string to check.</original>
            <returns><c>true</c> if this string is null, empty, or contains only whitespace; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Sirenix.Utilities.StringExtensions.CalculateLevenshteinDistance(System.String,System.String)">
            <summary>
            O(n*m) - Use with care.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.TypeExtensions">
            <summary>
            Type method extensions.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.TypeExtensions.TypeNameAlternatives">
            <summary>
            Type name alias lookup.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsValidIdentifier(System.String)">
            <summary>
            Checks whether a given string is a valid CSharp identifier name. This also checks full type names including namespaces.
            </summary>
            <original name="identifier">The identifier to check.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsCastableTo(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether a type can be casted to another type.
            </summary>
            <original name="from">From.</original>
            <original name="to">To.</original>
            <original name="requireImplicitCast">if set to <c>true</c> an implicit or explicit operator must be defined on the given type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCastMethodDelegate(System.Type,System.Type,System.Boolean)">
            <summary>
            If a type can be casted to another type, this provides a function to manually convert the type.
            </summary>
            <original name="from">From.</original>
            <original name="to">To.</original>
            <original name="requireImplicitCast">if set to <c>true</c> an implicit or explicit operator must be defined on the given type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCastMethodDelegate``2(System.Boolean)">
            <summary>
            If a type can be casted to another type, this provides a function to manually convert the type.
            </summary>
            <original name="requireImplicitCast">if set to <c>true</c> an implicit or explicit operator must be defined on the given type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCastMethod(System.Type,System.Type,System.Boolean)">
            <summary>
            If a type can be casted to another type, this provides the method info of the method in charge of converting the type.
            </summary>
            <original name="from">From.</original>
            <original name="to">To.</original>
            <original name="requireImplicitCast">if set to <c>true</c> an implicit or explicit operator must be defined on the given type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetEqualityComparerDelegate``1">
             <summary>
             Gets an equality comparer delegate used to compare the equality of values of a given type. In order, this will be:
            
             1. The == operator, if one is defined on the type.
             2. A delegate that uses <see cref="T:System.IEquatable`1"/>, if the type implements that interface.
             3. .NET's own <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>
             </summary>
             <remarks>
             <para>Note that in the special case of the type <see cref="T:UnityEngine.Quaternion"/>, a special equality comparer is returned that only checks whether all the Quaternion components are equal.</para>
             <para>This is because, by default, Quaternion's equality operator is broken when operating on invalid quaternions; "default(Quaternion) == default(Quaternion)" evaluates to false, and this causes a multitude of problems.</para>
             <para>Special delegates are also returned for float and double, that consider float.NaN to be equal to float.NaN, and double.NaN to be equal to double.NaN.</para>
             </remarks>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets the first attribute of type T. Returns null in the no attribute of type T was found.
            </summary>
            <original name="type">The type.</original>
            <original name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.ImplementsOrInherits(System.Type,System.Type)">
            <summary>
            Determines whether a type implements or inherits from another type.
            </summary>
            <original name="type">The type.</original>
            <original name="to">To.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.ImplementsOpenGenericType(System.Type,System.Type)">
            <summary>
            Determines whether a type implements an open generic interface or class such as IList&lt;&gt; or List&lt;&gt;.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericType">Type of the open generic type.</original>
            <returns></returns>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.ImplementsOpenGenericInterface(System.Type,System.Type)">
            <summary>
            Determines whether a type implements an open generic interface such as IList&lt;&gt;.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericInterfaceType">Type of the open generic interface.</original>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Type " + openGenericInterfaceType.Name + " is not a generic type definition and an interface.</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.ImplementsOpenGenericClass(System.Type,System.Type)">
            <summary>
            Determines whether a type implements an open generic class such as List&lt;&gt;.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericType">Type of the open generic interface.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetArgumentsOfInheritedOpenGenericType(System.Type,System.Type)">
            <summary>
            Gets the generic arguments of an inherited open generic class or interface.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericType">The open generic type to get the arguments of.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetArgumentsOfInheritedOpenGenericClass(System.Type,System.Type)">
            <summary>
            Gets the generic arguments of an inherited open generic class.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericType">Type of the open generic class.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetArgumentsOfInheritedOpenGenericInterface(System.Type,System.Type)">
            <summary>
            Gets the generic arguments of an inherited open generic interface.
            </summary>
            <original name="candidateType">Type of the candidate.</original>
            <original name="openGenericInterfaceType">Type of the open generic interface.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetOperatorMethod(System.Type,Sirenix.Utilities.Operator,System.Type,System.Type)">
            <summary>
            Gets the MethodInfo of a specific operator kind, with the given left and right operands. This overload is *far* faster than any of the other GetOperatorMethod implementations, and should be used whenever possible.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetOperatorMethod(System.Type,Sirenix.Utilities.Operator)">
            <summary>
            Gets the MethodInfo of a specific operator type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetOperatorMethods(System.Type,Sirenix.Utilities.Operator)">
            <summary>
            Gets the MethodInfo of a specific operator type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetAllMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets all members from a given type, including members from all base types if the <see cref="F:System.Reflection.BindingFlags.DeclaredOnly"/> flag isn't set.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetAllMembers(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets all members from a given type, including members from all base types.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetAllMembers``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets all members of a specific type from a type, including members from all base types, if the <see cref="F:System.Reflection.BindingFlags.DeclaredOnly"/> flag isn't set.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetGenericBaseType(System.Type,System.Type)">
            <summary>
            Gets the generic type definition of an open generic base type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetGenericBaseType(System.Type,System.Type,System.Int32@)">
            <summary>
            Gets the generic type definition of an open generic base type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetBaseTypes(System.Type,System.Boolean)">
            <summary>
            Returns a lazy enumerable of all the base types of this type including interfaces and classes
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetBaseClasses(System.Type,System.Boolean)">
            <summary>
            Returns a lazy enumerable of all the base classes of this type
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetNiceName(System.Type)">
            <summary>
            Returns a nicely formatted name of a type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetNiceFullName(System.Type)">
            <summary>
            Returns a nicely formatted full name of a type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCompilableNiceName(System.Type)">
            <summary>
            Gets the name of the compilable nice.
            </summary>
            <original name="type">The type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCompilableNiceFullName(System.Type)">
            <summary>
            Gets the full name of the compilable nice.
            </summary>
            <original name="type">The type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Returns the first found custom attribute of type T on this type
            Returns null if none was found
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCustomAttribute``1(System.Type)">
            <summary>
            Returns the first found non-inherited custom attribute of type T on this type
            Returns null if none was found
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCustomAttributes``1(System.Type)">
            <summary>
            Gets all attributes of type T.
            </summary>
            <original name="type">The type.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetCustomAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets all attributes of type T.
            </summary>
            <original name="type">The type</original>
            <original name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsDefined``1(System.Type)">
            <summary>
            Returns true if the attribute whose type is specified by the generic argument is defined on this type
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsDefined``1(System.Type,System.Boolean)">
            <summary>
            Returns true if the attribute whose type is specified by the generic argument is defined on this type
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.InheritsFrom``1(System.Type)">
            <summary>
            Determines whether a type inherits or implements another type. Also include support for open generic base types such as List&lt;&gt;.
            </summary>
            <original name="type"></original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.InheritsFrom(System.Type,System.Type)">
            <summary>
            Determines whether a type inherits or implements another type. Also include support for open generic base types such as List&lt;&gt;.
            </summary>
            <original name="type"></original>
            <original name="baseType"></original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetInheritanceDistance(System.Type,System.Type)">
            <summary>
            Gets the number of base types between given type and baseType.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.HasParamaters(System.Reflection.MethodInfo,System.Collections.Generic.IList{System.Type},System.Boolean)">
            <summary>
            Determines whether a method has the specified parameter types.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetReturnType(System.Reflection.MemberInfo)">
            <summary>
            FieldInfo will return the fieldType, propertyInfo the PropertyType, MethodInfo the return type and EventInfo will return the EventHandlerType.
            </summary>
            <original name="memberInfo">The MemberInfo.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the value contained in a given <see cref="T:System.Reflection.MemberInfo"/>. Currently only <see cref="T:System.Reflection.FieldInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> is supported.
            </summary>
            <original name="member">The <see cref="T:System.Reflection.MemberInfo"/> to get the value of.</original>
            <original name="obj">The instance to get the value from.</original>
            <returns>The value contained in the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
            <exception cref="T:System.ArgumentException">Can't get the value of the given <see cref="T:System.Reflection.MemberInfo"/> type.</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of a given MemberInfo. Currently only <see cref="T:System.Reflection.FieldInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> is supported.
            </summary>
            <original name="member">The <see cref="T:System.Reflection.MemberInfo"/> to set the value of.</original>
            <original name="obj">The object to set the value on.</original>
            <original name="value">The value to set.</original>
            <exception cref="T:System.ArgumentException">
            Property has no setter
            or
            Can't set the value of the given <see cref="T:System.Reflection.MemberInfo"/> type.
            </exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.TryInferGenericParameters(System.Type,System.Type[]@,System.Type[])">
            <summary>//
            Tries to infer a set of valid generic parameters for a generic type definition, given a subset of known parameters.
            </summary>
            <original name="genericTypeDefinition">The generic type definition to attempt to infer parameters for.</original>
            <original name="inferredParams">The inferred parameters, if inferral was successful.</original>
            <original name="knownParameters">The known parameters to infer from.</original>
            <returns>True if the parameters could be inferred, otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">
            genericTypeDefinition is null
            or
            knownParameters is null
            </exception>
            <exception cref="T:System.ArgumentException">The genericTypeDefinition parameter must be a generic type definition.</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.AreGenericConstraintsSatisfiedBy(System.Type,System.Type[])">
            <summary>
            <para>Checks whether an array of types satisfy the constraints of a given generic type definition.</para>
            <para>If this method returns true, the given parameters can be safely used with <see cref="M:System.Type.MakeGenericType(System.Type[])"/> with the given generic type definition.</para>
            </summary>
            <original name="genericType">The generic type definition to check.</original>
            <original name="parameters">The parameters to check validity for.</original>
            <exception cref="T:System.ArgumentNullException">
            genericType is null
            or
            types is null
            </exception>
            <exception cref="T:System.ArgumentException">The genericType parameter must be a generic type definition.</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.AreGenericConstraintsSatisfiedBy(System.Reflection.MethodBase,System.Type[])">
            <summary>
            <para>Checks whether an array of types satisfy the constraints of a given generic method definition.</para>
            <para>If this method returns true, the given parameters can be safely used with <see cref="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])"/> with the given generic method definition.</para>
            </summary>
            <original name="genericMethod">The generic method definition to check.</original>
            <original name="parameters">The parameters to check validity for.</original>
            <exception cref="T:System.ArgumentNullException">
            genericType is null
            or
            types is null
            </exception>
            <exception cref="T:System.ArgumentException">The genericMethod parameter must be a generic method definition.</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GenericParameterIsFulfilledBy(System.Type,System.Type,System.Collections.Generic.Dictionary{System.Type,System.Type},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Before calling this method we must ALWAYS hold a lock on the GenericConstraintsSatisfaction_LOCK object, as that is an implicit assumption it works with.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetGenericConstraintsString(System.Type,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetGenericParameterConstraintsString(System.Type,System.Boolean)">
            <summary>
            Formats a string with the specified generic parameter constraints on any given type. Example output: <c>where T : class</c>
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GenericArgumentsContainsTypes(System.Type,System.Type[])">
            <summary>
            Determines whether a generic type contains the specified generic argument constraints.
            </summary>
            <original name="type">The type.</original>
            <original name="types">The generic argument types.</original>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsFullyConstructedGenericType(System.Type)">
            <summary>
            Determines whether a type is a fully constructed generic type.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Determines whether a type is nullable by ensuring the type is neither a PrimitiveType, ValueType or an Enum.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.GetEnumBitmask(System.Object,System.Type)">
            <summary>
            Gets the enum bitmask in a ulong.
            </summary>
            <exception cref="T:System.ArgumentException">enumType</exception>
        </member>
        <member name="M:Sirenix.Utilities.TypeExtensions.IsCSharpKeyword(System.String)">
            <summary>
            Gets a value indicating if the string is a reserved C# keyword.
            </summary>
            <original name="identifier">The identifier to check.</original>
            <returns><c>true</c> if the string is a C# keyword. Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Sirenix.Utilities.UnityExtensions">
            <summary>
            Extends various Unity classes.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.UnityExtensions.SafeIsUnityNull(UnityEngine.Object)">
            <summary>
            Determines whether a Unity object is null or "fake null",
            without ever calling Unity's own equality operators.
            This method is useful for checking if a Unity object is
            null, destroyed or missing at times when it is not allowed
            to call Unity's own equality operators, for example when
            not running on the main thread.
            </summary>
            <original name="obj">The Unity object to check.</original>
            <returns>True if the object is null, missing or destroyed; otherwise false.</returns>
        </member>
        <member name="T:Sirenix.Utilities.ArrayUtilities">
            <summary>
            Contains utilities for operating on arrays.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ArrayUtilities.CreateNewArrayWithAddedElement``1(``0[],``0)">
            <summary>
            Creates a new array with an added element.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <original name="array">The array.</original>
            <original name="value">The value to add.</original>
            <returns>The new array.</returns>
            <exception cref="T:System.ArgumentNullException">The given array was null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.ArrayUtilities.CreateNewArrayWithInsertedElement``1(``0[],System.Int32,``0)">
            <summary>
            Creates a new array with an element inserted at a given index.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <original name="array">The array.</original>
            <original name="index">The index to insert at.</original>
            <original name="value">The value to insert.</original>
            <exception cref="T:System.ArgumentNullException">The given array was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index to insert at was out of range.</exception>
        </member>
        <member name="M:Sirenix.Utilities.ArrayUtilities.CreateNewArrayWithRemovedElement``1(``0[],System.Int32)">
            <summary>
            Creates a new array with an element removed.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <original name="array">The array.</original>
            <original name="index">The index to remove an element at.</original>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The given array was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The given index to remove an element at was out of range.</exception>
        </member>
        <member name="T:Sirenix.Utilities.Editor.AssetScriptGuidUtility">
            <summary>
            Utility class for asset Guid script
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Editor.AssetScriptGuidUtility.TryUpdateAssetScriptGuid(System.String,System.Type)">
            <summary>
            Tries to update the Guid of a specified asset with the Guid from a specified script type.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.DeepReflection">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateWeakStaticValueGetter(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateWeakInstanceValueGetter(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateWeakInstanceValueSetter(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateWeakInstanceValueGetter``1(System.Type,System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateValueGetter``1(System.Type,System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DeepReflection.CreateValueGetter``2(System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.DoubleLookupDictionary`3">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.DoubleLookupDictionary`3.Item(`0)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.InnerCount(`0)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.TotalInnerCount">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.ContainsKeys(`0,`1)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.TryGetInnerValue(`0,`1,`2@)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.AddInner(`0,`1,`2)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.RemoveInner(`0,`1)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.DoubleLookupDictionary`3.RemoveWhere(System.Func{`2,System.Boolean})">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.WeakValueGetter">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.WeakValueSetter">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.WeakValueGetter`1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.WeakValueSetter`1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ValueGetter`2">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ValueSetter`2">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.EmitUtilities">
            <summary>
            Provides utilities for using the <see cref="N:System.Reflection.Emit"/> namespace.
            <para />
            This class is due for refactoring. Use at your own peril.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.EmitUtilities.CanEmit">
            <summary>
            Gets a value indicating whether emitting is supported on the current platform.
            </summary>
            <value>
              <c>true</c> if the current platform can emit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateStaticFieldGetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <typeparam name="FieldType">The type of the field to get a value from.</typeparam>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakStaticFieldGetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateStaticFieldSetter``1(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <typeparam name="FieldType">The type of the field to set a value to.</typeparam>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a setter for.</original>
            <returns>A delegate which sets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakStaticFieldSetter(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a setter for.</original>
            <returns>A delegate which sets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstanceFieldGetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <typeparam name="InstanceType">The type of the instance to get a value from.</typeparam>
            <typeparam name="FieldType">The type of the field to get a value from.</typeparam>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceFieldGetter``1(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which gets the value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <typeparam name="FieldType">The type of the field to get a value from.</typeparam>
            <original name="instanceType">The <see cref="T:System.Type"/> of the instance to get a value from.</original>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceFieldGetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which gets the weakly typed value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <original name="instanceType">The <see cref="T:System.Type"/> of the instance to get a value from.</original>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstanceFieldSetter``2(System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <typeparam name="InstanceType">The type of the instance to set a value on.</typeparam>
            <typeparam name="FieldType">The type of the field to set a value to.</typeparam>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a setter for.</original>
            <returns>A delegate which sets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceFieldSetter``1(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which sets the value of a field on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <typeparam name="FieldType">The type of the field to set a value to.</typeparam>
            <original name="instanceType">Type of the instance.</original>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo" /> instance describing the field to create a setter for.</original>
            <returns>
            A delegate which sets the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Field cannot be static.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceFieldSetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Creates a delegate which sets the weakly typed value of a field on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <original name="instanceType">Type of the instance.</original>
            <original name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo" /> instance describing the field to create a setter for.</original>
            <returns>
            A delegate which sets the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Field cannot be static.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstancePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which gets the weakly typed value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <original name="instanceType">The <see cref="T:System.Type"/> of the instance to get a value from.</original>
            <original name="propertyInfo">The <see cref="T:System.Reflection.FieldInfo"/> instance describing the field to create a getter for.</original>
            <returns>A delegate which gets the value of the given field.</returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstancePropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which sets the weakly typed value of a property on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <original name="instanceType">Type of the instance.</original>
            <original name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> instance describing the property to create a setter for.</original>
            <returns>
            A delegate which sets the value of the given field.
            </returns>
            <exception cref="T:System.ArgumentNullException">The fieldInfo parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Property cannot be static.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateStaticPropertySetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which sets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <typeparam name="PropType">The type of the property to set a value to.</typeparam>
            <original name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance describing the property to create a setter for.</original>
            <returns>A delegate which sets the value of the given property.</returns>
            <exception cref="T:System.ArgumentNullException">The propertyInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateStaticPropertyGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which gets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <typeparam name="PropType">The type of the property to get a value from.</typeparam>
            <original name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance describing the property to create a getter for.</original>
            <returns>A delegate which gets the value of the given property.</returns>
            <exception cref="T:System.ArgumentNullException">The propertyInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstancePropertySetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which sets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to set the value.
            </summary>
            <typeparam name="InstanceType">The type of the instance to set a value on.</typeparam>
            <typeparam name="PropType">The type of the property to set a value to.</typeparam>
            <original name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance describing the property to create a setter for.</original>
            <returns>A delegate which sets the value of the given property.</returns>
            <exception cref="T:System.ArgumentNullException">The propertyInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstancePropertyGetter``2(System.Reflection.PropertyInfo)">
            <summary>
            Creates a delegate which gets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to get the value.
            </summary>
            <typeparam name="InstanceType">The type of the instance to get a value from.</typeparam>
            <typeparam name="PropType">The type of the property to get a value from.</typeparam>
            <original name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance describing the property to create a getter for.</original>
            <returns>A delegate which gets the value of the given property.</returns>
            <exception cref="T:System.ArgumentNullException">The propertyInfo parameter is null.</exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateMethodReturner``2(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given parameterless instance method and returns the result.
            </summary>
            <typeparam name="InstanceType">The type of the class which the method is on.</typeparam>
            <typeparam name="ReturnType">The type which is returned by the given method info.</typeparam>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.</returns>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateStaticMethodCaller(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given parameterless static method.
            </summary>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.</returns>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceMethodCaller``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given parameterless weakly typed instance method.
            </summary>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.</returns>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceMethodCaller(System.Reflection.MethodInfo)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceMethodCaller``2(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given weakly typed instance method with one argument and returns a value.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TArg1">The type of the first argument.</typeparam>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>
            A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.
            </returns>
            <exception cref="T:System.ArgumentNullException">methodInfo</exception>
            <exception cref="T:System.ArgumentException">
            Given method ' + methodInfo.Name + ' is static when it has to be an instance method.
            or
            Given method ' + methodInfo.Name + ' must return type  + typeof(TResult) + .
            or
            Given method ' + methodInfo.Name + ' must have exactly one parameter.
            or
            The first parameter of the method ' + methodInfo.Name + ' must be of type  + typeof(TArg1) + .
            </exception>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceMethodCallerFunc``1(System.Reflection.MethodInfo)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateWeakInstanceMethodCallerFunc``2(System.Reflection.MethodInfo)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstanceMethodCaller``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given parameterless instance method.
            </summary>
            <typeparam name="InstanceType">The type of the class which the method is on.</typeparam>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.</returns>
        </member>
        <member name="M:Sirenix.Utilities.EmitUtilities.CreateInstanceMethodCaller``2(System.Reflection.MethodInfo)">
            <summary>
            Creates a fast delegate method which calls a given instance method with a given argument.
            </summary>
            <typeparam name="InstanceType">The type of the class which the method is on.</typeparam>
            <typeparam name="Arg1">The type of the argument with which to call the method.</typeparam>
            <original name="methodInfo">The method info instance which is used.</original>
            <returns>A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke.</returns>
        </member>
        <member name="T:Sirenix.Utilities.Flags">
            <summary>
            This class encapsulates common <see cref="T:System.Reflection.BindingFlags"/> combinations.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.AnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public members, including base members.
            Note that you also need to specify either the Instance or Static flag.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstancePublic">
            <summary>
            Search criteria encompassing all public instance members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstancePrivate">
            <summary>
            Search criteria encompassing all non-public instance members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstanceAnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public instance members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticPublic">
            <summary>
            Search criteria encompassing all public static members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticPrivate">
            <summary>
            Search criteria encompassing all non-public static members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticAnyVisibility">
            <summary>
            Search criteria encompassing all public and non-public static members, including base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstancePublicDeclaredOnly">
            <summary>
            Search criteria encompassing all public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstancePrivateDeclaredOnly">
            <summary>
            Search criteria encompassing all non-public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.InstanceAnyDeclaredOnly">
            <summary>
            Search criteria encompassing all public and non-public instance members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticPublicDeclaredOnly">
            <summary>
            Search criteria encompassing all public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticPrivateDeclaredOnly">
            <summary>
            Search criteria encompassing all non-public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticAnyDeclaredOnly">
            <summary>
            Search criteria encompassing all public and non-public static members, excluding base members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.StaticInstanceAnyVisibility">
            <summary>
            Search criteria encompassing all members, including base and static members.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.Flags.AllMembers">
            <summary>
            Search criteria encompassing all members (public and non-public, instance and static), including base members.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GlobalConfig`1">
             <summary>
             <para>
             A GlobalConfig singleton, automatically created and saved as a ScriptableObject in the project at the specified path.
             This only happens if the UnityEditor is present. If it's not, a non-persistent ScriptableObject is created at run-time.
             </para>
             <para>
             Remember to locate the path within a resources folder if you want the config file to be loaded at runtime without the Unity editor being present.
             </para>
             <para>
             The asset path is specified by defining a <see cref="T:Sirenix.Utilities.GlobalConfigAttribute"/>. If no attribute is defined it will be saved in the root assets folder.
             </para>
             </summary>
             <example>
             <code>
             [GlobalConfig("Assets/Resources/MyConfigFiles/")]
             public class MyGlobalConfig : GlobalConfig&lt;MyGlobalConfig&gt;
             {
                 public int MyGlobalVariable;
             }
            
             void SomeMethod()
             {
                 int value = MyGlobalConfig.Instance.MyGlobalVariable;
             }
             </code>
             </example>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfig`1.HasInstanceLoaded">
            <summary>
            Gets a value indicating whether this instance has instance loaded.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfig`1.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GlobalConfig`1.LoadInstanceIfAssetExists">
            <summary>
            Tries to load the singleton instance.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GlobalConfig`1.OpenInEditor">
            <summary>
            Opens the config in a editor window. This is currently only used internally by the Sirenix.OdinInspector.Editor assembly.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigUtility`1.HasInstanceLoaded">
            <summary>
            Gets a value indicating whether this instance has instance loaded.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GlobalConfigUtility`1.GetInstance(System.String,System.String)">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GlobalConfigAttribute">
            <summary>
            <para>This attribute is used by classes deriving from GlobalConfig and specifies the asset path for the generated config file.</para>
            </summary>
            <seealso cref="!:EditorGlobalConfigAttribute"/>
            <seealso cref="T:Sirenix.Utilities.GlobalConfig`1"/>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigAttribute.FullPath">
            <summary>
            Gets the full asset path including Application.dataPath. Only relevant if IsInResourcesFolder is false.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigAttribute.AssetPath">
            <summary>
            Gets the relative asset path. Only relevant if IsInResourcesFolder is false.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigAttribute.ResourcesPath">
            <summary>
            Gets the resources path. Only relevant if IsInResourcesFolder is true.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigAttribute.UseAsset">
            <summary>
            Whether the config should be associated with an asset in the project. If false, no config asset will be generated or loaded, and a new "temporary" config instance will be created for every reload. This is true by default.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.GlobalConfigAttribute.IsInResourcesFolder">
            <summary>
            Gets a value indicating whether this asset is located within a resource folder.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GlobalConfigAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.GlobalConfigAttribute"/> class.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GlobalConfigAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.GlobalConfigAttribute"/> class.
            </summary>
            <original name="assetPath">The relative asset. Remember to locate the path within a resources folder if you want the config file to be loaded at runtime without the Unity Editor.</original>
        </member>
        <member name="T:Sirenix.Utilities.GUILayoutOptions">
             <summary>
             <para>
             GUILayoutOptions is a handy utility that provides cached GUILayoutOpion arrays based on the wanted parameters.
             </para>
             </summary>
             <example>
             <para>
             Most GUILayout and EditorGUILayout methods takes an optional "params GUILayoutOption[]" parameter.
             Each time you call this, an array is allocated generating garbage.
             </para>
             <code>
             // Generates garbage:
             GUILayout.Label(label, GUILayout.Label(label, GUILayout.Width(20), GUILayout.ExpandHeight(), GUILayout.MaxWidth(300)));
            
             // Does not generate garbage:
             GUILayout.Label(label, GUILayout.Label(label, GUILayoutOptions.Width(20).ExpandHeight().MaxWidth(300)));
             </code>
             </example>
        </member>
        <member name="F:Sirenix.Utilities.GUILayoutOptions.EmptyGUIOptions">
            <summary>
            An EmptyGUIOption[] array with a length of 0.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance">
            <summary>
            A GUILayoutOptions instance with an implicit operator to be converted to a GUILayoutOption[] array.
            </summary>
            <seealso cref="T:Sirenix.Utilities.GUILayoutOptions"/>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.op_Implicit(Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance)~UnityEngine.GUILayoutOption[]">
            <summary>
            Gets or creates the cached GUILayoutOption array based on the layout options specified.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.Width(System.Single)">
            <summary>
            Option passed to a control to give it an absolute width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.Height(System.Single)">
            <summary>
            Option passed to a control to give it an absolute height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.MaxHeight(System.Single)">
            <summary>
            Option passed to a control to specify a maximum height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.MaxWidth(System.Single)">
            <summary>
            Option passed to a control to specify a maximum width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.MinHeight(System.Single)">
            <summary>
            Option passed to a control to specify a minimum height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.MinWidth(System.Single)">
            <summary>
            Option passed to a control to specify a minimum width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.ExpandHeight(System.Boolean)">
            <summary>
            Option passed to a control to allow or disallow vertical expansion.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.ExpandWidth(System.Boolean)">
            <summary>
            Option passed to a control to allow or disallow horizontal expansion.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.Equals(Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance)">
            <summary>
            Determines whether the instance is equals another instance.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.GUILayoutOptionsInstance.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.Width(System.Single)">
            <summary>
            Option passed to a control to give it an absolute width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.Height(System.Single)">
            <summary>
            Option passed to a control to give it an absolute height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.MaxHeight(System.Single)">
            <summary>
            Option passed to a control to specify a maximum height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.MaxWidth(System.Single)">
            <summary>
            Option passed to a control to specify a maximum width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.MinWidth(System.Single)">
            <summary>
            Option passed to a control to specify a minimum width.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.MinHeight(System.Single)">
            <summary>
            Option passed to a control to specify a minimum height.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.ExpandHeight(System.Boolean)">
            <summary>
            Option passed to a control to allow or disallow vertical expansion.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.GUILayoutOptions.ExpandWidth(System.Boolean)">
            <summary>
            Option passed to a control to allow or disallow horizontal expansion.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ImmutableHashSet`1">
            <summary>
            Immutable hashset wraps another hashset, and allows for reading the inner hashset, without the ability to change it.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableHashSet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            Creates an immutable hashset around another hashset.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableHashSet`1.Contains(`0)">
            <summary>
            Returns <c>true</c> if the item is contained in the list.
            </summary>
            <original name="item">The item's value.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableHashSet`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.IImmutableList">
            <summary>
            Interface for immutable list.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.IImmutableList`1">
            <summary>
            Interface for generic immutable list.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.IImmutableList`1.Item(System.Int32)">
            <summary>
            Index accessor.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ImmutableList">
            <summary>
            Immutable list wraps another list, and allows for reading the inner list, without the ability to change it.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.#ctor(System.Collections.IList)">
            <summary>
            Creates an immutable list around another list.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.Count">
            <summary>
            Number of items in the list.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.IsFixedSize">
            <summary>
            Immutable list cannot be changed directly, so it's size is always fixed.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.IsReadOnly">
            <summary>
            Immutable list are always readonly.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.IsSynchronized">
            <summary>
            Returns <c>true</c> if the inner list is synchronized.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.SyncRoot">
            <summary>
            Gets the sync root object.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList.Item(System.Int32)">
            <summary>
            Index accessor.
            </summary>
            <original name="index">Index.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if the item is contained in the list.
            </summary>
            <original name="value">The item's value.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copy the list to an array,
            </summary>
            <original name="array">Target array.</original>
            <original name="arrayIndex">Index.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the list to an array,
            </summary>
            <original name="array">Target array.</original>
            <original name="index">Index.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.IndexOf(System.Object)">
            <summary>
            Get the index of a value.
            </summary>
            <original name="value">The item's value.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.System#Collections#Generic#IList{System#Object}#RemoveAt(System.Int32)">
            <summary>
            Immutable list cannot be edited.
            </summary>
            <original name="index">Index.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.System#Collections#Generic#IList{System#Object}#Insert(System.Int32,System.Object)">
            <summary>
            Immutable list cannot be edited.
            </summary>
            <original name="index">Index.</original>
            <original name="item">Item.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.System#Collections#Generic#ICollection{System#Object}#Add(System.Object)">
            <summary>
            Immutable list cannot be edited.
            </summary>
            <original name="item">Item.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.System#Collections#Generic#ICollection{System#Object}#Clear">
            <summary>
            Immutable list cannot be edited.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList.System#Collections#Generic#ICollection{System#Object}#Remove(System.Object)">
            <summary>
            Immutable list cannot be edited.
            </summary>
            <original name="item">Item.</original>
        </member>
        <member name="T:Sirenix.Utilities.ImmutableList`1">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`1.Count">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`1.IsReadOnly">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`1.Item(System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`1.Contains(`0)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`1.GetEnumerator">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`1.IndexOf(`0)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ImmutableList`2">
            <summary>
            Immutable list wraps another list, and allows for reading the inner list, without the ability to change it.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`2.#ctor(`0)">
            <summary>
            Creates an immutable list around another list.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`2.Count">
            <summary>
            Number of items in the list.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`2.IsReadOnly">
            <summary>
            Immutable list are always readonly.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.ImmutableList`2.Item(System.Int32)">
            <summary>
            Index accessor.
            </summary>
            <original name="index">Index.</original>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`2.Contains(`1)">
            <summary>
            Returns <c>true</c> if the item is contained in the list.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`2.GetEnumerator">
            <summary>
            Gets an enumerator.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ImmutableList`2.IndexOf(`1)">
            <summary>
            Gets the index of an item.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.MathUtilities">
            <summary>
            Collection of math function.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.PointDistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Distance from a point to a line.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Hermite(System.Single,System.Single,System.Single)">
            <summary>
            Returns a smooth value between start and end based on t.
            </summary>
            <original name="start">First point.</original>
            <original name="end">Second point.</original>
            <original name="t">Position between 0 and 1.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.StackHermite(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Returns a smooth value between start and end based on t.
            </summary>
            <original name="start">First point.</original>
            <original name="end">Second point.</original>
            <original name="t">Position between 0 and 1.</original>
            <original name="count">Number of interpolations to make.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Fract(System.Single)">
            <summary>
            Returns the fractional of the value.
            </summary>
            <original name="value">The value to get the fractional of.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Fract(UnityEngine.Vector2)">
            <summary>
            Returns the fractional of the value.
            </summary>
            <original name="value">The value to get the fractional of.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Fract(UnityEngine.Vector3)">
            <summary>
            Returns the fractional of the value.
            </summary>
            <original name="value">The value to get the fractional of.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.BounceEaseInFastOut(System.Single)">
            <summary>
            Returns a value based on t, that bounces faster and faster.
            </summary>
            <original name="t">The value to bounce.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Hermite01(System.Single)">
            <summary>
            Returns a smooth value between 0 and 1 based on t.
            </summary>
            <original name="t">Position between 0 and 1.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.StackHermite01(System.Single,System.Int32)">
            <summary>
            Returns a smooth value between 0 and 1 based on t.
            </summary>
            <original name="t">Position between 0 and 1.</original>
            <original name="count">Number of interpolations to make.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.LerpUnclamped(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns an unclamped linear interpolation of two vectors.
            </summary>
            <original name="from">The first vector.</original>
            <original name="to">The second vector.</original>
            <original name="amount">The interpolation factor.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.LerpUnclamped(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns an unclamped linear interpolation of two vectors.
            </summary>
            <original name="from">The first vector.</original>
            <original name="to">The second vector.</original>
            <original name="amount">The interpolation factor.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Bounce(System.Single)">
            <summary>
            Returns a value that bounces between 0 and 1 based on value.
            </summary>
            <original name="value">The value to bounce.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.EaseInElastic(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that eases in elasticly.
            </summary>
            <original name="value">The value to ease in elasticly.</original>
            <original name="amplitude">The amplitude.</original>
            <original name="length">The length.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Pow(UnityEngine.Vector3,System.Single)">
            <summary>
            Pows each element of the vector.
            </summary>
            <original name="v">The vector.</original>
            <original name="p">The power.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Abs(UnityEngine.Vector3)">
            <summary>
            Returns a Vector2 with each element set to their respective sign.
            </summary>
            <original name="v">The vector to sign.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Sign(UnityEngine.Vector3)">
            <summary>
            Returns a Vector3 with each element set to their respective sign.
            </summary>
            <original name="v">The vector to sign.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.EaseOutElastic(System.Single,System.Single,System.Single)">
            <summary>
            Returns a value that eases out elasticly.
            </summary>
            <original name="value">The value to ease out elasticly.</original>
            <original name="amplitude">The amplitude.</original>
            <original name="length">The length.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.EaseInOut(System.Single)">
            <summary>
            Returns a smooth value betweeen that peaks at t=0.5 and then comes back down again.
            </summary>
            <original name="t">A value between 0 and 1.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Clamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Clamps the value of a Vector3.
            </summary>
            <original name="value">The vector to clamp.</original>
            <original name="min">The min value.</original>
            <original name="max">The max value.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Clamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Clamps the value of a Vector2.
            </summary>
            <original name="value">The vector to clamp.</original>
            <original name="min">The min value.</original>
            <original name="max">The max value.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.ComputeByteArrayHash(System.Byte[])">
            <summary>
            Computes a hash for a byte array.
            </summary>
            <original name="data">The byte array.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.InterpolatePoints(UnityEngine.Vector3[],System.Single)">
            <summary>
            Gives a smooth path between a collection of points.
            </summary>
            <original name="path">The collection of point.</original>
            <original name="t">The current position in the path. 0 is at the start of the path, 1 is at the end of the path.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.LineIntersectsLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@)">
            <summary>
            Checks if two given lines intersect with one another and returns the intersection point (if
            any) in an out parameter.
            Source: http://stackoverflow.com/questions/3746274/line-intersection-with-aabb-rectangle.
            Edited to implement Cohen-Sutherland type pruning for efficiency.
            </summary>
            <original name="a1">Starting point of line a.</original>
            <original name="a2">Ending point of line a.</original>
            <original name="b1">Starting point of line b.</original>
            <original name="b2">Ending point of line b.</original>
            <original name="intersection">
            The out parameter which contains the intersection point if there was any.
            </original>
            <returns>True if the two lines intersect, otherwise false.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.InfiniteLineIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the collision point between two infinite lines.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.LineDistToPlane(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Distance from line to plane.
            </summary>
            <original name="planeOrigin">Position of the plane.</original>
            <original name="planeNormal">Surface normal of the plane.</original>
            <original name="lineOrigin">Origin of the line.</original>
            <original name="lineDirectionNormalized">Line direction normal.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.RayDistToPlane(UnityEngine.Ray,UnityEngine.Plane)">
            <summary>
            Distance from ray to plane.
            </summary>
            <original name="ray">The ray.</original>
            <original name="plane">The plane.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.RotatePoint(UnityEngine.Vector2,System.Single)">
            <summary>
            Rotates a Vector2 by an angle.
            </summary>
            <original name="point">The point to rotate.</original>
            <original name="degrees">The angle to rotate.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.RotatePoint(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Rotates a Vector2 around a point by an angle..
            </summary>
            <original name="point">The point to rotate.</original>
            <original name="around">The point to rotate around.</original>
            <original name="degrees">The angle to rotate.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates t between a and b to a value between 0 and 1 using a Hermite polynomial.
            </summary>
            <original name="a">The first value.</original>
            <original name="b">The second value.</original>
            <original name="t">The position value.</original>
            <returns>A smoothed value between 0 and 1.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.LinearStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates t between a and b to a value between 0 and 1.
            </summary>
            <original name="a">The first value.</original>
            <original name="b">The second value.</original>
            <original name="t">The position value.</original>
            <returns>Linear value between 0 and 1.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Wrap(System.Double,System.Double,System.Double)">
            <summary>
            Wraps a value between min and max.
            </summary>
            <original name="value">The value to wrap.</original>
            <original name="min">The minimum value.</original>
            <original name="max">The maximum value.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Wrap(System.Single,System.Single,System.Single)">
            <summary>
            Wraps a value between min and max.
            </summary>
            <original name="value">The value to wrap.</original>
            <original name="min">The minimum value.</original>
            <original name="max">The maximum value.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.Wrap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps a value between min and max.
            </summary>
            <original name="value">The value to wrap.</original>
            <original name="min">The minimum value.</original>
            <original name="max">The maximum value.</original>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.RoundBasedOnMinimumDifference(System.Double,System.Double)">
            <summary>
            Rounds a number based on a mininum difference.
            </summary>
            <original name="valueToRound">The value to round.</original>
            <original name="minDifference">The min difference.</original>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.DiscardLeastSignificantDecimal(System.Double)">
            <summary>
            Discards the least significant demicals.
            </summary>
            <original name="v">The value of insignificant decimals.</original>
            <returns>Value with significant decimals.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MathUtilities.ClampWrapAngle(System.Single,System.Single,System.Single)">
            <summary>
            Clamps and wraps an angle between two values.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.MemberAliasFieldInfo">
            <summary>
            Provides a methods of representing imaginary fields which are unique to serialization.
            <para />
            We aggregate the FieldInfo associated with this member and return a mangled form of the name.
            </summary>
            <seealso cref="T:System.Reflection.FieldInfo" />
        </member>
        <member name="F:Sirenix.Utilities.MemberAliasFieldInfo.FAKE_NAME_SEPARATOR_STRING">
            <summary>
            The default fake name separator string.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.#ctor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasFieldInfo"/> class.
            </summary>
            <original name="field">The field to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.#ctor(System.Reflection.FieldInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasFieldInfo"/> class.
            </summary>
            <original name="field">The field to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
            <original name="separatorString">The separator string to use.</original>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.AliasedField">
            <summary>
            Gets the aliased field.
            </summary>
            <value>
            The aliased field.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.Module">
            <summary>
            Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.MetadataToken">
            <summary>
            Gets a value that identifies a metadata element.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.ReflectedType">
            <summary>
            Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.FieldType">
            <summary>
            Gets the type of the field.
            </summary>
            <value>
            The type of the field.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.FieldHandle">
            <summary>
            Gets a RuntimeFieldHandle, which is a handle to the internal metadata representation of a field.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasFieldInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.
            </summary>
            <original name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</original>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
            </summary>
            <original name="attributeType">The type of custom attribute to search for. The search includes derived types.</original>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            True if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.GetValue(System.Object)">
            <summary>
            Gets the value of the field.
            </summary>
            <original name="obj">The object instance to get the value from.</original>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, sets the value of the field supported by the given object.
            </summary>
            <original name="obj">The object whose field value will be set.</original>
            <original name="value">The value to assign to the field.</original>
            <original name="invokeAttr">A field of Binder that specifies the type of binding that is desired (for example, Binder.CreateInstance or Binder.ExactBinding).</original>
            <original name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder" /> is null, then Binder.DefaultBinding is used.</original>
            <original name="culture">The software preferences of a particular culture.</original>
        </member>
        <member name="T:Sirenix.Utilities.MemberAliasMethodInfo">
            <summary>
            Provides a methods of representing aliased methods.
            <para />
            In this case, what we're representing is a method on a parent class with the same name.
            <para />
            We aggregate the MethodInfo associated with this member and return a mangled form of the name.
            The name that we return is "parentname+methodName".
            </summary>
            <seealso cref="T:System.Reflection.FieldInfo" />
        </member>
        <member name="F:Sirenix.Utilities.MemberAliasMethodInfo.FAKE_NAME_SEPARATOR_STRING">
            <summary>
            The default fake name separator string.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.#ctor(System.Reflection.MethodInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasMethodInfo"/> class.
            </summary>
            <original name="method">The method to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.#ctor(System.Reflection.MethodInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasMethodInfo"/> class.
            </summary>
            <original name="method">The method to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
            <original name="separatorString">The separator string to use.</original>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.AliasedMethod">
            <summary>
            Gets the aliased method.
            </summary>
            <value>
            The aliased method.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.ReturnTypeCustomAttributes">
            <summary>
            Gets the custom attributes for the return type.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.MethodHandle">
            <summary>
            Gets a handle to the internal metadata representation of a method.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.Attributes">
            <summary>
            Gets the attributes associated with this method.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasMethodInfo.ReflectedType">
            <summary>
            Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.GetBaseDefinition">
            <summary>
            When overridden in a derived class, returns the MethodInfo object for the method on the direct or indirect base class in which the method represented by this instance was first declared.
            </summary>
            <returns>
            A MethodInfo object for the first implementation of this method.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <original name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.
            </summary>
            <original name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</original>
            <original name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.GetMethodImplementationFlags">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes" /> flags.
            </summary>
            <returns>
            The MethodImplAttributes flags.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.GetParameters">
            <summary>
            When overridden in a derived class, gets the parameters of the specified method or constructor.
            </summary>
            <returns>
            An array of type ParameterInfo containing information that matches the signature of the method (or constructor) reflected by this MethodBase instance.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, invokes the reflected method or constructor with the given parameters.
            </summary>
            <original name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</original>
            <original name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags" />. If <paramref name="binder" /> is null, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default" />; thus, whatever you pass in is ignored.</original>
            <original name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder" /> is null, the default binder is used.</original>
            <original name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type.</original>
            <original name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.)</original>
            <returns>
            An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verifies that the parameters are valid.CautionElements of the <paramref name="parameters" /> array that represent parameters declared with the ref or out keyword may also be modified.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasMethodInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
            </summary>
            <original name="attributeType">The type of custom attribute to search for. The search includes derived types.</original>
            <original name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            true if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, false.
            </returns>
        </member>
        <member name="T:Sirenix.Utilities.MemberAliasPropertyInfo">
            <summary>
            Provides a methods of representing imaginary properties which are unique to serialization.
            <para />
            We aggregate the PropertyInfo associated with this member and return a mangled form of the name.
            </summary>
            <seealso cref="T:System.Reflection.FieldInfo" />
        </member>
        <member name="F:Sirenix.Utilities.MemberAliasPropertyInfo.FakeNameSeparatorString">
            <summary>
            The default fake name separator string.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasPropertyInfo"/> class.
            </summary>
            <original name="prop">The property to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.MemberAliasPropertyInfo"/> class.
            </summary>
            <original name="prop">The property to alias.</original>
            <original name="namePrefix">The name prefix to use.</original>
            <original name="separatorString">The separator string to use.</original>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.AliasedProperty">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.Module">
            <summary>
            Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.MetadataToken">
            <summary>
            Gets a value that identifies a metadata element.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.ReflectedType">
            <summary>
            Gets the class object that was used to obtain this instance of MemberInfo.
            </summary>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>
            The type of the property.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether this instance can read.
            </summary>
            <value>
              <c>true</c> if this instance can read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sirenix.Utilities.MemberAliasPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether this instance can write.
            </summary>
            <value>
              <c>true</c> if this instance can write; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.
            </summary>
            <original name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</original>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
            </summary>
            <original name="attributeType">The type of custom attribute to search for. The search includes derived types.</original>
            <original name="inherit">True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</original>
            <returns>
            True if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, false.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetAccessors(System.Boolean)">
            <summary>
            Returns an array whose elements reflect the public and, if specified, non-public get, set, and other accessors of the property reflected by the current instance.
            </summary>
            <original name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false.</original>
            <returns>
            An array of <see cref="T:System.Reflection.MethodInfo" /> objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If <paramref name="nonPublic" /> is true, this array contains public and non-public get, set, and other accessors. If <paramref name="nonPublic" /> is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetGetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the public or non-public get accessor for this property.
            </summary>
            <original name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a non-public accessor is to be returned; otherwise, false.</original>
            <returns>
            A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic" /> is true. Returns null if <paramref name="nonPublic" /> is false and the get accessor is non-public, or if <paramref name="nonPublic" /> is true but no get accessors exist.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetIndexParameters">
            <summary>
            Gets the index parameters of the property.
            </summary>
            <returns>The index parameters of the property.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetSetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the set accessor for this property.
            </summary>
            <original name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if a non-public accessor is to be returned; otherwise, false.</original>
            <returns>
            Value Condition A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property. The set accessor is public.-or- <paramref name="nonPublic" /> is true and the set accessor is non-public. null<paramref name="nonPublic" /> is true, but the property is read-only.-or- <paramref name="nonPublic" /> is false and the set accessor is non-public.-or- There is no set accessor.
            </returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the property on the given instance.
            </summary>
            <original name="obj">The object to invoke the getter on.</original>
            <original name="invokeAttr">The <see cref="T:System.Reflection.BindingFlags"/> to invoke with.</original>
            <original name="binder">The binder to use.</original>
            <original name="index">The indices to use.</original>
            <original name="culture">The culture to use.</original>
            <returns>The value of the property on the given instance.</returns>
        </member>
        <member name="M:Sirenix.Utilities.MemberAliasPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Sets the value of the property on the given instance.
            </summary>
            <original name="obj">The object to set the value on.</original>
            <original name="value">The value to set.</original>
            <original name="invokeAttr">The <see cref="T:System.Reflection.BindingFlags"/> to invoke with.</original>
            <original name="binder">The binder to use.</original>
            <original name="index">The indices to use.</original>
            <original name="culture">The culture to use.</original>
        </member>
        <member name="T:Sirenix.Utilities.MultiDimArrayUtilities">
            <summary>
            Contains utilities for operating on arrays multi-dimentional arrays.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.InsertOneColumnLeft``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts one column left of the specified column index.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="columnIndex">Index of the column.</original>
            <original name="array">The array.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.InsertOneColumnRight``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts one column right of the specified column index.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="columnIndex">Index of the column.</original>
            <original name="arr">The arr.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.InsertOneRowAbove``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts one row above the specified row index.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="rowIndex">The row index.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.InsertOneRowBelow``1(``0[0:,0:],System.Int32)">
            <summary>
            Inserts one row below the specified row index.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="rowIndex">Index of the row.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.DuplicateColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Duplicates the column.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="columnIndex">Index of the column.</original>
            <original name="array">The array.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.DuplicateRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Duplicates the row.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="rowIndex">Index of the row.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.MoveColumn``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Moves a column.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="fromColumn">From column.</original>
            <original name="toColumn">To column.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.MoveRow``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Moves a row.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="fromRow">From row.</original>
            <original name="toRow">To row.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.DeleteColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Deletes a column.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="columnIndex">Index of the column.</original>
        </member>
        <member name="M:Sirenix.Utilities.MultiDimArrayUtilities.DeleteRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Deletes the row.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <original name="array">The array.</original>
            <original name="rowIndex">Index of the row.</original>
        </member>
        <member name="T:Sirenix.Utilities.PersistentAssemblyAttribute">
            <summary>
            Indicates a persistent assembly.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.ReferenceEqualityComparer`1">
            <summary>
            Compares objects by reference only, ignoring equality operators completely. This is used by the property tree reference dictionaries to keep track of references.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.ReferenceEqualityComparer`1.Default">
            <summary>
            A default, cached instance of this generic variant of the reference equality comparer.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Returns true if the object references are equal.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns the result of the object's own GetHashCode method.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.SirenixAssetPaths">
            <summary>
            Paths to Sirenix assets.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.OdinPath">
            <summary>
            Path to Odin Inspector folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.SirenixAssetsPath">
            <summary>
            Path to Sirenix assets folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.SirenixPluginPath">
            <summary>
            Path to Sirenix folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.SirenixAssembliesPath">
            <summary>
            Path to Sirenix assemblies.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.OdinResourcesPath">
            <summary>
            Path to Odin Inspector resources folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.OdinEditorConfigsPath">
            <summary>
            Path to Odin Inspector configuration folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.OdinResourcesConfigsPath">
            <summary>
            Path to Odin Inspector resources configuration folder.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.SirenixAssetPaths.OdinTempPath">
            <summary>
            Path to Odin Inspector temporary folder.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.SirenixEditorConfigAttribute">
            <summary>
            <para>This attribute is used by classes deriving from GlobalConfig and specifies the menu item path for the preference window and the asset path for the generated config file.</para>
            <para>The scriptable object created will be located at the OdinEditorConfigs path unless other is specified.</para>
            <para>Classes implementing this attribute will be part of the Odin Preferences window.</para>
            </summary>
            <seealso cref="T:Sirenix.Utilities.SirenixGlobalConfigAttribute"/>
        </member>
        <member name="M:Sirenix.Utilities.SirenixEditorConfigAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.SirenixEditorConfigAttribute"/> class.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.SirenixGlobalConfigAttribute">
            <summary>
            <para>This attribute is used by classes deriving from GlobalConfig and specifies the menu item path for the preference window and the asset path for the generated config file.</para>
            <para>The scriptable object created will be located at the OdinResourcesConigs path unless other is specified.</para>
            <para>Classes implementing this attribute will be part of the Odin Preferences window.</para>
            </summary>
            <seealso cref="T:Sirenix.Utilities.SirenixEditorConfigAttribute"/>
        </member>
        <member name="M:Sirenix.Utilities.SirenixGlobalConfigAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sirenix.Utilities.SirenixGlobalConfigAttribute"/> class.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.StringUtilities">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.StringUtilities.NicifyByteSize(System.Int32,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
            <original name="bytes">Not yet documented.</original>
            <original name="decimals">Not yet documented.</original>
            <returns>Not yet documented.</returns>
        </member>
        <member name="M:Sirenix.Utilities.StringUtilities.NumberAwareStringCompare(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Compares two strings in a number-aware manner, IE, "[2] Foo" is considered to come before "[10] Bar".
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.UnityVersion">
            <summary>
            Utility class indicating current Unity version.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.UnityVersion.IsVersionOrGreater(System.Int32,System.Int32)">
            <summary>
            Tests current Unity version is equal or greater.
            </summary>
            <original name="major">Minimum major version.</original>
            <original name="minor">Minimum minor version.</original>
            <returns><c>true</c> if the current Unity version is greater. Otherwise <c>false</c>.</returns>
        </member>
        <member name="F:Sirenix.Utilities.UnityVersion.Major">
            <summary>
            The current Unity version major.
            </summary>
        </member>
        <member name="F:Sirenix.Utilities.UnityVersion.Minor">
            <summary>
            The current Unity version minor.
            </summary>
        </member>
        <member name="T:Sirenix.Utilities.Unsafe.UnsafeUtilities">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StructArrayFromBytes``1(System.Byte[],System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StructArrayFromBytes``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StructArrayToBytes``1(``0[])">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StructArrayToBytes``1(``0[],System.Byte[]@,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StringFromBytes(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.StringToBytes(System.Byte[],System.String,System.Boolean)">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Sirenix.Utilities.Unsafe.UnsafeUtilities.MemoryCopy(System.Object,System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not yet documented.
            </summary>
        </member>
    </members>
</doc>
