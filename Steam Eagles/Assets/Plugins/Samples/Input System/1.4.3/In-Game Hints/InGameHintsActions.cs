//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Samples/Input System/1.4.3/In-Game Hints/InGameHintsActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnityEngine.InputSystem.Samples.InGameHints
{
    public partial class @InGameHintsActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InGameHintsActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InGameHintsActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""9af2d1b0-cc47-4300-854c-838acb4b168b"",
            ""actions"": [
                {
                    ""name"": ""Move DEMO"",
                    ""type"": ""Value"",
                    ""id"": ""7e7492e7-1329-48bb-9fdc-279fd15473b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look DEMO"",
                    ""type"": ""Value"",
                    ""id"": ""981fecc2-2e7a-4d6a-b041-00b47626e0a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickUp DEMO"",
                    ""type"": ""Button"",
                    ""id"": ""5a59bbc2-a3d4-4cbd-88bb-01120d97dc69"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""f37bbe7e-e241-443f-b868-c784e1219f25"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw DEMO"",
                    ""type"": ""Button"",
                    ""id"": ""e450d71c-7cc5-4879-afb5-f3ed682d9824"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5abc4d20-74bd-4f14-902f-2bd2cf59cc28"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b16141b1-1611-44db-9576-5a004eb451f2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2b20de3f-1ad8-4b42-b591-595edf60dced"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f92eaa9-7f1f-4f42-9682-d105f7c2fc22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3ba79a56-c5f8-4999-8203-bef8471f4bd8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d9acfe6-d844-4860-a151-01d6eb0dfb48"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b69cbeb7-a5bf-4df1-8965-17d944634cef"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ddefc9-49da-485d-be28-58e3ec3f8080"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Look DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92182492-7b62-47e0-94ad-53d9937d9905"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""PickUp DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e20635aa-ffe7-4ed9-8802-96c039d26a8f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PickUp DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5571cd9-1166-4ddc-9071-37dc597b1d4e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""950f549e-ec9c-4d03-aeff-f09ec4031d01"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47d1952d-797b-4f5b-986c-654b8e479deb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Throw DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02e2493d-1eb3-4334-9d25-92f2b5e21399"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Throw DEMO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_MoveDEMO = m_Gameplay.FindAction("Move DEMO", throwIfNotFound: true);
            m_Gameplay_LookDEMO = m_Gameplay.FindAction("Look DEMO", throwIfNotFound: true);
            m_Gameplay_PickUpDEMO = m_Gameplay.FindAction("PickUp DEMO", throwIfNotFound: true);
            m_Gameplay_Drop = m_Gameplay.FindAction("Drop", throwIfNotFound: true);
            m_Gameplay_ThrowDEMO = m_Gameplay.FindAction("Throw DEMO", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_MoveDEMO;
        private readonly InputAction m_Gameplay_LookDEMO;
        private readonly InputAction m_Gameplay_PickUpDEMO;
        private readonly InputAction m_Gameplay_Drop;
        private readonly InputAction m_Gameplay_ThrowDEMO;
        public struct GameplayActions
        {
            private @InGameHintsActions m_Wrapper;
            public GameplayActions(@InGameHintsActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveDEMO => m_Wrapper.m_Gameplay_MoveDEMO;
            public InputAction @LookDEMO => m_Wrapper.m_Gameplay_LookDEMO;
            public InputAction @PickUpDEMO => m_Wrapper.m_Gameplay_PickUpDEMO;
            public InputAction @Drop => m_Wrapper.m_Gameplay_Drop;
            public InputAction @ThrowDEMO => m_Wrapper.m_Gameplay_ThrowDEMO;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @MoveDEMO.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDEMO;
                    @MoveDEMO.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDEMO;
                    @MoveDEMO.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDEMO;
                    @LookDEMO.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookDEMO;
                    @LookDEMO.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookDEMO;
                    @LookDEMO.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLookDEMO;
                    @PickUpDEMO.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickUpDEMO;
                    @PickUpDEMO.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickUpDEMO;
                    @PickUpDEMO.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickUpDEMO;
                    @Drop.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDrop;
                    @Drop.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDrop;
                    @Drop.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDrop;
                    @ThrowDEMO.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrowDEMO;
                    @ThrowDEMO.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrowDEMO;
                    @ThrowDEMO.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnThrowDEMO;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveDEMO.started += instance.OnMoveDEMO;
                    @MoveDEMO.performed += instance.OnMoveDEMO;
                    @MoveDEMO.canceled += instance.OnMoveDEMO;
                    @LookDEMO.started += instance.OnLookDEMO;
                    @LookDEMO.performed += instance.OnLookDEMO;
                    @LookDEMO.canceled += instance.OnLookDEMO;
                    @PickUpDEMO.started += instance.OnPickUpDEMO;
                    @PickUpDEMO.performed += instance.OnPickUpDEMO;
                    @PickUpDEMO.canceled += instance.OnPickUpDEMO;
                    @Drop.started += instance.OnDrop;
                    @Drop.performed += instance.OnDrop;
                    @Drop.canceled += instance.OnDrop;
                    @ThrowDEMO.started += instance.OnThrowDEMO;
                    @ThrowDEMO.performed += instance.OnThrowDEMO;
                    @ThrowDEMO.canceled += instance.OnThrowDEMO;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnMoveDEMO(InputAction.CallbackContext context);
            void OnLookDEMO(InputAction.CallbackContext context);
            void OnPickUpDEMO(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnThrowDEMO(InputAction.CallbackContext context);
        }
    }
}
